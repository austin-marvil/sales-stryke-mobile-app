"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Min = void 0;
const I18nKeyTypeEnum_1 = require("../entity/enums/I18nKeyTypeEnum");
const ValidationBase_1 = require("./ValidationBase");
const ValidationError_1 = require("./ValidationError");
const KEY = I18nKeyTypeEnum_1.I18nKeyTypeEnum.VALIDATION_MIN.getName() || '';
class Min extends ValidationBase_1.ValidationBase {
    constructor(p) {
        super();
        this.min = -1;
        this.setI18nKey({ key: KEY });
        this.min = p.min;
    }
    getClone() {
        let max = new Min({ min: this.getMin() });
        max.setValue({ value: this.getValue() });
        return (max);
    }
    getMin() {
        return (this.min);
    }
    isValid() {
        let foundError_b = false;
        let isValid_b = false;
        let value_s = null;
        this.setLocalizedError({ localizedError: null });
        if (!this.getValue()) {
            foundError_b = true;
        }
        else {
            value_s = this.getValue();
            if (this.min <= value_s.length) {
                isValid_b = true;
            }
            else {
                foundError_b = true;
            }
        }
        if (foundError_b) {
            let attribteName = this.getAttributeName() || '';
            let localizedError = this.getLocalizedTemplate();
            localizedError = localizedError.replaceAll('{min}', this.min.toString());
            this.setLocalizedError({ localizedError: localizedError });
            let validationError = new ValidationError_1.ValidationError({ attributeUUID: this.getAttributeUUID(), message: localizedError });
            this.setError({ error: validationError });
        }
        return (isValid_b);
    }
}
exports.Min = Min;
//# sourceMappingURL=Min.js.map