"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = void 0;
const I18nLocaleType_1 = require("../entity/classes/persistable/I18nLocaleType");
const I18nLocaleTypeEnum_1 = require("../entity/enums/I18nLocaleTypeEnum");
const ErrorBase_1 = require("../lang/ErrorBase");
const LocalizationManager_1 = require("../localization/LocalizationManager");
const LogManager_1 = require("../utils/log/LogManager");
const IsString_1 = require("../utils/object/IsString");
const NAMESPACE = "com.salesstryke.validation.Validator";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class Validator {
    /**
     * ```
     *
     *  validatorName : An optional name for this EntityValidator.
     * ```
     * @param p
     */
    constructor(p) {
        this.attributeName = null;
        this.attributeUUID = '';
        this.locale_s = null;
        this.validationErrors = new Array();
        this.validations = new Array();
        this.validatorName = null;
        this.value = undefined;
        if (p && p.validatorName) {
            this.validatorName = p.validatorName;
        }
    }
    addValidation(p) {
        this.validations.push(p.validation);
        return (this);
    }
    getAttributeName() {
        return (this.attributeName);
    }
    getAttributeUUID() {
        return (this.attributeUUID);
    }
    getClone() {
        let validatorConstructor = undefined;
        if (this.validatorName) {
            validatorConstructor = { validatorName: this.validatorName };
        }
        let validator = new Validator(validatorConstructor);
        let index_i = 0;
        let size_i = this.validations.length;
        for (index_i = 0; index_i < size_i; index_i++) {
            let validation = this.validations[index_i];
            let clone_v = validation.getClone();
            validator.addValidation({ validation: clone_v });
        }
        return (validator);
    }
    getErrors() {
        return (this.validationErrors);
    }
    /**
     * The optional name of this Validator
     * @returns
     */
    getValidatorName() {
        return (this.validatorName);
    }
    getErrorMessage() {
        let errorMessage_s = null;
        let index_i = 0;
        let size_i = this.getErrors().length;
        let temp_s = '';
        for (index_i = 0; index_i < size_i; index_i++) {
            let validation = this.getErrors()[index_i];
            if (temp_s.length > 0) {
                temp_s += ' ';
            }
            temp_s += validation.getLocalizedError();
        }
        if (temp_s.length > 0) {
            errorMessage_s = temp_s;
        }
        return (errorMessage_s);
    }
    getValidations() {
        return (this.validations);
    }
    getValue() {
        return (this.value);
    }
    isValid() {
        let isValid_b = true;
        let index_i = 0;
        let size_i = this.validations.length;
        this.validationErrors.length = 0;
        for (index_i = 0; index_i < size_i; index_i++) {
            let validation = this.validations[index_i];
            let i18nKey = null;
            let tempIsValid = false;
            let templateText = null;
            i18nKey = validation.getI18nKey();
            if (!i18nKey) {
                throw new ErrorBase_1.ErrorBase(`i18nKey missing from ${validation.constructor.name} `, NAMESPACE, this.isValid.name);
            }
            if (!this.locale_s) {
                throw new ErrorBase_1.ErrorBase(`this.locale missing from ${validation.constructor.name} `, NAMESPACE, this.isValid.name);
            }
            templateText = LocalizationManager_1.LocalizationManager.getInstance().getLocaleTemplate({ key: i18nKey, locale: this.locale_s });
            if (!templateText) {
                throw new ErrorBase_1.ErrorBase(`template text missing from ${validation.constructor.name} for i18nKey : ${i18nKey}, i18nLocale : ${this.locale_s} `, NAMESPACE, this.isValid.name);
            }
            validation.setLocalizedTemplate({ localizedTemplate: templateText });
            validation.setAttibuteUUID({ attributeUUID: this.attributeUUID });
            if (this.attributeName) {
                validation.setAttributeName({ attributeName: this.attributeName });
            }
            validation.setValue({ value: this.value });
            tempIsValid = validation.isValid();
            if (!tempIsValid) {
                this.validationErrors.push(validation);
            }
            isValid_b = isValid_b && tempIsValid;
        }
        return (isValid_b);
    }
    setAttributeName(p) {
        this.attributeName = p.attributeName;
    }
    setAttributeUUID(p) {
        this.attributeUUID = p.attributeUUID;
    }
    setLocale(p) {
        if (p.locale) {
            if (p.locale instanceof I18nLocaleType_1.I18nLocaleType) {
                let i18nLocaleType = p.locale;
                this.locale_s = i18nLocaleType.getName() || '';
            }
            else if (p.locale instanceof I18nLocaleTypeEnum_1.I18nLocaleTypeEnum) {
                let i18nLocaleTypeEnum = p.locale;
                this.locale_s = i18nLocaleTypeEnum.getName();
            }
            else if ((0, IsString_1.default)(p.locale)) {
                this.locale_s = p.locale;
            }
            else {
                this.locale_s = I18nLocaleTypeEnum_1.I18nLocaleTypeEnum.EN_US.getName();
            }
        }
    }
    setValue(p) {
        this.value = p.value;
    }
}
exports.Validator = Validator;
//# sourceMappingURL=Validator.js.map