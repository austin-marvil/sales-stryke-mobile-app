"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormValidator = void 0;
const I18nLocaleType_1 = require("../entity/classes/persistable/I18nLocaleType");
const I18nLocaleTypeEnum_1 = require("../entity/enums/I18nLocaleTypeEnum");
const LogManager_1 = require("../utils/log/LogManager");
const IsString_1 = require("../utils/object/IsString");
const EntityValidator_1 = require("./EntityValidator");
const NAMESPACE = "com.salesstryke.validation.FormValidator";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class FormValidator {
    constructor(p) {
        this.entityValidators = new Array();
        this.locale_s = I18nLocaleTypeEnum_1.I18nLocaleTypeEnum.EN_US.getName();
        this.validators = new Array();
        this.setLocale({ locale: p.locale });
    }
    addEntity(p) {
        let entityValidator = new EntityValidator_1.EntityValidator({ entity: p.entity });
        this.addEntityValidator({ entityValidator: entityValidator });
        return (this);
    }
    addEntityValidator(p) {
        this.entityValidators.push(p.entityValidator);
        return (this);
    }
    addValidator(p) {
        this.validators.push(p.validator);
        return (this);
    }
    getEntityValidatorByName(p) {
        let entityValidator = null;
        let temp = this.entityValidators.find(obj => obj.getEntityValidatorName() === p.entityValidationName);
        if (temp) {
            entityValidator = temp;
        }
        return (entityValidator);
    }
    getEntityValidations() {
        return (this.entityValidators);
    }
    getValidators() {
        return (this.validators);
    }
    getValidatorByName(p) {
        let validator = null;
        let temp = this.validators.find(obj => obj.getValidatorName() === p.validatorName);
        if (temp) {
            validator = temp;
        }
        return (validator);
    }
    isValid() {
        let isValid_b = true;
        let index_i = 0;
        let size_i = 0;
        // EntityValidation
        size_i = this.entityValidators.length;
        for (index_i = 0; index_i < size_i; index_i++) {
            let entityValidator = this.entityValidators[index_i];
            entityValidator.setLocale({ locale: this.locale_s });
            isValid_b = isValid_b && entityValidator.isValid();
        }
        // Validator 
        size_i = this.validators.length;
        for (index_i = 0; index_i < size_i; index_i++) {
            let validator = this.validators[index_i];
            validator.setLocale({ locale: this.locale_s });
            isValid_b = isValid_b && validator.isValid();
        }
        return (isValid_b);
    }
    setLocale(p) {
        if (p.locale) {
            if (p.locale instanceof I18nLocaleType_1.I18nLocaleType) {
                let i18nLocaleType = p.locale;
                this.locale_s = i18nLocaleType.getName() || '';
            }
            else if (p.locale instanceof I18nLocaleTypeEnum_1.I18nLocaleTypeEnum) {
                let i18nLocaleTypeEnum = p.locale;
                this.locale_s = i18nLocaleTypeEnum.getName();
            }
            else if ((0, IsString_1.default)(p.locale)) {
                this.locale_s = p.locale;
            }
        }
        if (!this.locale_s) {
            this.locale_s = I18nLocaleTypeEnum_1.I18nLocaleTypeEnum.EN_US.getName();
        }
        return (this);
    }
}
exports.FormValidator = FormValidator;
//# sourceMappingURL=FormValidator.js.map