"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Max = void 0;
const I18nKeyTypeEnum_1 = require("../entity/enums/I18nKeyTypeEnum");
const ValidationBase_1 = require("./ValidationBase");
const ValidationError_1 = require("./ValidationError");
const KEY = I18nKeyTypeEnum_1.I18nKeyTypeEnum.VALIDATION_MAX.getName() || '';
class Max extends ValidationBase_1.ValidationBase {
    constructor(p) {
        super();
        this.max = -1;
        this.setI18nKey({ key: KEY });
        this.max = p.max;
    }
    getClone() {
        let max = new Max({ max: this.getMax() });
        max.setValue({ value: this.getValue() });
        return (max);
    }
    getMax() {
        return (this.max);
    }
    isValid() {
        let foundError_b = false;
        let isValid_b = false;
        let value_s = null;
        if (!this.getValue()) {
            foundError_b = true;
        }
        else {
            value_s = this.getValue();
            if (value_s.length <= this.max) {
                isValid_b = true;
            }
            else {
                foundError_b = true;
            }
        }
        if (foundError_b) {
            let attribteName = this.getAttributeName() || '';
            let errorMessage = this.getLocalizedTemplate();
            errorMessage = errorMessage.replaceAll('{max}', this.max.toString());
            this.setLocalizedError({ localizedError: errorMessage });
            let validationError = new ValidationError_1.ValidationError({ attributeUUID: this.getAttributeUUID(), message: errorMessage });
            this.setError({ error: validationError });
        }
        return (isValid_b);
    }
}
exports.Max = Max;
//# sourceMappingURL=Max.js.map