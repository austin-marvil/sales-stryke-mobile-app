"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhoneNumber = void 0;
const ValidationBase_1 = require("./ValidationBase");
const ValidationError_1 = require("./ValidationError");
class PhoneNumber extends ValidationBase_1.ValidationBase {
    constructor() {
        super();
        this.setI18nKey({ key: '' });
    }
    getClone() {
        let phoneNumber = new PhoneNumber();
        let key = this.getI18nKey();
        if (key) {
            phoneNumber.setI18nKey({ key: key });
        }
        phoneNumber.setValue({ value: this.getValue() });
        return (phoneNumber);
    }
    isValid() {
        let isValid_b = false;
        let value_s = undefined;
        if (!this.getValue()) {
            let validationError = new ValidationError_1.ValidationError({ attributeUUID: this.getAttributeUUID(), message: `Invalid phone number.` });
            this.setError({ error: validationError });
            return (isValid_b);
        }
        let email = this.getValue();
        const allZeros = /^0+$/;
        if (allZeros.test(email)) {
            let validationError = new ValidationError_1.ValidationError({ attributeUUID: this.getAttributeUUID(), message: `Invalid phone number.` });
            this.setError({ error: validationError });
            return (isValid_b);
        }
        const emailRegEx = /^(?:\+1[-. ]?)?\(?\d{3}\)?[-. ]?\d{3}[-. ]?\d{4}$/;
        if (!emailRegEx.test(email)) {
            let validationError = new ValidationError_1.ValidationError({ attributeUUID: this.getAttributeUUID(), message: `Invalid phone number.` });
            this.setError({ error: validationError });
            return (isValid_b);
        }
        isValid_b = true;
        return (isValid_b);
    }
}
exports.PhoneNumber = PhoneNumber;
//# sourceMappingURL=PhoneNumber.js.map