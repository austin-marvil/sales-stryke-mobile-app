import { JsonApiPersistableBase } from "../jsonApi/JsonApiPersistableBase";
import { PersistenceType } from "./PersistenceType";
declare class MetaData {
    namespace: string;
}
export declare class PersistableUtils {
    static metaDataForPersistableUtils: MetaData;
    /**
     * Only allows an Entity to added one time. Will prevent duplicates from being added.
     * @param p
     */
    static addToArray(p: {
        persistable_ary: Array<JsonApiPersistableBase>;
        addToArray: JsonApiPersistableBase;
        persistanceType?: PersistenceType;
    }): void;
    static addOrReplaceInArray(persistable_ary: Array<JsonApiPersistableBase>, addOrReplace: JsonApiPersistableBase, persistanceType?: PersistenceType): void;
    static mongoRefSetter(mongoRef: JsonApiPersistableBase | null, persistanceType?: PersistenceType): void;
    static removeFromArrayIfEntityIdIsNull(p: {
        persistable_ary: Array<JsonApiPersistableBase>;
        remove: JsonApiPersistableBase;
    }): void;
    /**
     * If the Entity has not been persisted, will remove from the array. If the Entity has previously
     * been persisted will set to DETACH
     * @param p
     */
    static removeOrSetDetach(p: {
        persistable_ary: Array<JsonApiPersistableBase>;
        remove: JsonApiPersistableBase;
    }): void;
}
export {};
