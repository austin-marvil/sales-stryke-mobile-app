import { Attribute } from "./entity/Attribute";
import { EntityModel } from "./entity/EntityModel";
import { EntityType } from "./entity/EntityType";
import { RelationshipBase } from "./entity/relationship/RelationshipBase";
import { ZodObject, ZodRawShape } from "zod";
export declare class EntityWrapper {
    private attributeByJsonAttributeName_map;
    private attributeByName_map;
    /**
     * ```
     * Example:
     *   User
     *     ._firstNameIsMutated
     *     .firstName
     *
     *  key: firstName, value: Attribute for '_firstNameIsMutated'
     * ```
     */
    private flagIfMutatedAttributeForDataAttributeByAttributeName_map;
    private attributeByUUID_map;
    private allAttributes_ary;
    private allowCascadeDelete_b;
    private createCrudAuthorizationUUID_s;
    private createdDateAttribute;
    private dataModelName;
    private extends_em;
    private zodSchema;
    private entityAttributes_ary;
    private entityModel;
    private entityModelUUID_s;
    private entityStateAttribute;
    private entityType;
    private extendsAttributes_ary;
    private flagIfMutatedAttribute;
    private idAttribute;
    /**
     * All updates will be included in a History Collection;
     */
    private includeInHistory_b;
    private isOrganizationRefRequired_b;
    private isGraphUpdateable_b;
    private jsonTopLevelID;
    private jsonTopLevelType;
    private mongodbAttributes;
    private namespace;
    private organizationRefAttribute;
    private relationshipPersistableType;
    private relationships_ary;
    private relationshipAttributes_ary;
    private relationshipByUUID_map;
    private simpleName_s;
    private validatorAttributes;
    constructor(entityModel: EntityModel);
    /**
     * Includes Entity Attributes and inherited Attributes
     * @returns
     */
    getAllAttributes(): Array<Attribute>;
    getAllowCascadeDelete(): boolean;
    getAttributeByName(attributeName: string): Attribute | null;
    getAttributeByJsonAttributeName(jsonAttributeName: string): Attribute | null;
    getAttributeByUUID(attributeUUID_s: string): Attribute | null;
    getCreatedDateAttribute(): Attribute | null;
    getCreateCrudAuthorizationUUID(): string | null;
    getDataModelName(): string;
    getEntityAttributes(): Array<Attribute>;
    getEntityModelUUID(): string;
    getEntityStateAttribute(): Attribute | null;
    getEntityType(): EntityType;
    getExtendsEntityModel(): EntityModel | null;
    getFlagIfMutatedAttribute(): Attribute | null;
    getIdAttribute(): Attribute | null;
    /**
     * All updates will be included in a History Collection;
     */
    getIncludeInHistory(): boolean;
    getIsGraphUpdateable(): boolean;
    getMongodbAttributes(): Array<Attribute>;
    getNamespace(): string;
    /**
     * Returns an array of Attributes that have a relationship.
     * @returns
     */
    getRelationshipAttributes(): Array<Attribute>;
    /**
     * Deprecated
     * @param uuid_s
     * @returns
     */
    getRelationshipBaseByUUID(uuid_s: string): RelationshipBase | null;
    /**
     * DEPRECATED
     * @returns
     */
    getRelationships(): Array<RelationshipBase>;
    getIsOrganizationRefRequired(): boolean;
    getAttributeByJsonTopLevelID(): Attribute | null;
    getAttributeByJsonTopLevelType(): Attribute | null;
    getJsonTopLevelType(): Attribute | null;
    /**
     * ```
     * Given a data attribute name, will find that attribute that holds the isMutated state if it exists.
     * Example: given 'firstName' will return the attribute for '_firstNameIsMutated' if it exists.
     * ```
     * @param dataAttributeName_s
     * @returns
     */
    getMutatedAttributeNameFromAttributeName(dataAttributeName_s: string): Attribute | null;
    getOrganizationRefAttribute(): Attribute | null;
    /**
     * _relationshipPersistableType
     * Returns the Attribute for DataModelAttributeHelper.persistableType.attributeName if it exists.
     * @returns
     */
    getRelationshipPersistableType(): Attribute | null;
    /**
     * The simple name from the namespace.
     * @returns
     */
    getSimpleName(): string;
    getValidatorAttributes(): Array<Attribute>;
    getZodSchema(): ZodObject<ZodRawShape>;
    /**
     *
     * @param entityModel
     */
    private initDataFromEntityModel;
}
