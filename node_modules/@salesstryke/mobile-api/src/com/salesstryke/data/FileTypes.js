"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAcceptedFileTypes = exports.isValidExtensionsFileType = exports.fileExtensionToMimeTypeMap = exports.fileMimeToExtensionMap = exports.FileMimeTypeEnum = exports.FileExtensionEnum = void 0;
var FileExtensionEnum;
(function (FileExtensionEnum) {
    FileExtensionEnum["CSV"] = ".csv";
    FileExtensionEnum["XLSX"] = ".xlsx";
    FileExtensionEnum["KML"] = ".kml";
    FileExtensionEnum["JPEG"] = ".jpeg";
    FileExtensionEnum["JPG"] = ".jpg";
    FileExtensionEnum["PNG"] = ".png";
    FileExtensionEnum["SVG"] = ".svg";
    FileExtensionEnum["WEBP"] = ".webp";
})(FileExtensionEnum || (exports.FileExtensionEnum = FileExtensionEnum = {}));
var FileMimeTypeEnum;
(function (FileMimeTypeEnum) {
    FileMimeTypeEnum["CSV"] = "text/csv";
    FileMimeTypeEnum["XLS"] = "application/vnd.ms-excel";
    FileMimeTypeEnum["XLSX"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    FileMimeTypeEnum["KML"] = "application/xml";
    FileMimeTypeEnum["JPEG"] = "image/jpeg";
    FileMimeTypeEnum["PNG"] = "image/png";
    FileMimeTypeEnum["SVG"] = "image/svg+xml";
    FileMimeTypeEnum["WEBP"] = "image/webp";
})(FileMimeTypeEnum || (exports.FileMimeTypeEnum = FileMimeTypeEnum = {}));
exports.fileMimeToExtensionMap = {
    [FileMimeTypeEnum.CSV]: [FileExtensionEnum.CSV],
    [FileMimeTypeEnum.XLS]: [FileExtensionEnum.XLSX],
    [FileMimeTypeEnum.XLSX]: [FileExtensionEnum.XLSX],
    [FileMimeTypeEnum.KML]: [FileExtensionEnum.KML],
    [FileMimeTypeEnum.JPEG]: [FileExtensionEnum.JPEG, FileExtensionEnum.JPG],
    [FileMimeTypeEnum.PNG]: [FileExtensionEnum.PNG],
    [FileMimeTypeEnum.SVG]: [FileExtensionEnum.SVG],
    [FileMimeTypeEnum.WEBP]: [FileExtensionEnum.WEBP],
};
// Reverse map: extension to MIME type
exports.fileExtensionToMimeTypeMap = Object.entries(exports.fileMimeToExtensionMap).reduce((acc, [mimeType, extensions]) => {
    extensions.forEach(ext => {
        acc[ext] = mimeType;
    });
    return acc;
}, {});
const isValidExtensionsFileType = ({ value, validExtension }) => {
    const testExtension = validExtension !== null && validExtension !== void 0 ? validExtension : Object.entries(FileExtensionEnum).map(([key, value]) => value);
    return testExtension.includes(value);
};
exports.isValidExtensionsFileType = isValidExtensionsFileType;
/**
 * Returns an accept object of mimeTypes to extensions on allowed MIME types.
 * Example usage: accept={getAcceptedFileTypes(fileTypes)}
 */
const getAcceptedFileTypes = (fileTypes) => {
    if (fileTypes && fileTypes.length > 0) {
        return fileTypes.reduce((acc, type) => {
            const extensions = exports.fileMimeToExtensionMap[type];
            if (extensions) {
                acc[type] = extensions;
            }
            return acc;
        }, {});
    }
    return exports.fileMimeToExtensionMap;
};
exports.getAcceptedFileTypes = getAcceptedFileTypes;
//# sourceMappingURL=FileTypes.js.map