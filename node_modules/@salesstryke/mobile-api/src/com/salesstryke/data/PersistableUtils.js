"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersistableUtils = void 0;
const PersistenceType_1 = require("./PersistenceType");
class MetaData {
    constructor() {
        this.namespace = 'com.salesstryke.data.PersistableUtils';
    }
}
class PersistableUtils {
    /**
     * Only allows an Entity to added one time. Will prevent duplicates from being added.
     * @param p
     */
    static addToArray(p) {
        if (p.persistanceType) {
            p.addToArray._setRelationshipPersistableType(p.persistanceType.getId());
            if (p.persistanceType === PersistenceType_1.PersistenceType.ATTACH) {
                p.addToArray._setIsAddToRelationship(true);
                p.addToArray._setIsRemoveFromRelationship(false);
            }
            else if (p.persistanceType === PersistenceType_1.PersistenceType.DETACH) {
                p.addToArray._setIsAddToRelationship(false);
                p.addToArray._setIsRemoveFromRelationship(true);
            }
        }
        if (!p.persistable_ary.includes(p.addToArray)) {
            p.persistable_ary.push(p.addToArray);
        }
    }
    static addOrReplaceInArray(persistable_ary, addOrReplace, persistanceType) {
        if (persistanceType) {
            addOrReplace._setRelationshipPersistableType(persistanceType.getId());
            if (persistanceType === PersistenceType_1.PersistenceType.ATTACH) {
                addOrReplace._setIsAddToRelationship(true);
                addOrReplace._setIsRemoveFromRelationship(false);
            }
            else if (persistanceType === PersistenceType_1.PersistenceType.DETACH) {
                addOrReplace._setIsAddToRelationship(false);
                addOrReplace._setIsRemoveFromRelationship(true);
            }
        }
        if (!persistable_ary.includes(addOrReplace)) {
            persistable_ary.push(addOrReplace);
        }
    }
    static mongoRefSetter(mongoRef, persistanceType) {
        if (mongoRef) {
            let id = mongoRef.getId();
            let hasPersystanceTypeBeenSet = false;
            let setToPersistanceType = PersistenceType_1.PersistenceType.NONE;
            if (!id) {
                mongoRef._setRelationshipPersistableType(PersistenceType_1.PersistenceType.CREATE.getId());
                hasPersystanceTypeBeenSet = true;
            }
            if (persistanceType) {
                mongoRef._setRelationshipPersistableType(persistanceType.getId());
                hasPersystanceTypeBeenSet = true;
            }
            if (!hasPersystanceTypeBeenSet) {
                mongoRef._setRelationshipPersistableType(setToPersistanceType.getId());
            }
        }
    }
    static removeFromArrayIfEntityIdIsNull(p) {
        if (p.remove.getId() === null) {
            let index_i = p.persistable_ary.indexOf(p.remove);
            if (index_i > -1) {
                p.persistable_ary.splice(index_i, 1);
            }
        }
    }
    /**
     * If the Entity has not been persisted, will remove from the array. If the Entity has previously
     * been persisted will set to DETACH
     * @param p
     */
    static removeOrSetDetach(p) {
        p.remove._setIsAddToRelationship(false);
        p.remove._setIsRemoveFromRelationship(true);
        if (p.remove.getId() === null || p.remove.getId() === '') {
            // Entity has not previously been persisted.
            let index_i = p.persistable_ary.indexOf(p.remove);
            if (index_i > -1) {
                p.persistable_ary.splice(index_i, 1);
            }
            return;
        }
        if (!p.persistable_ary.includes(p.remove)) {
            p.persistable_ary.push(p.remove);
        }
    }
}
exports.PersistableUtils = PersistableUtils;
PersistableUtils.metaDataForPersistableUtils = new MetaData();
//# sourceMappingURL=PersistableUtils.js.map