"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityManager = void 0;
const LogManager_1 = require("../utils/log/LogManager");
const EntityWrapper_1 = require("./EntityWrapper");
const zod_1 = require("zod");
const NAMESPACE = "com.salesstryke.data.EntityManager";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class EntityManager {
    constructor() {
        //private entityModels_ary:               Array<EntityModel>;
        this.entityModelByNamespace_map = new Map();
        this.entityWrapperByNamespace = new Map();
        this.entityWrapperByEntityModelUUID_map = new Map();
        this.relationships_ary = new Array();
        //this.entityModels_ary           = new Array<EntityModel>();
        //this.entityWrapperByNamespace   = new Map<string, EntityWrapper>();
    }
    static getInstance() {
        return (EntityManager.INSTANCE);
    }
    addEntityModel(entityModel) {
        let namespace_s = entityModel.getNamespace();
        let entityModelWrapper = new EntityWrapper_1.EntityWrapper(entityModel);
        this.entityWrapperByNamespace.set(namespace_s, entityModelWrapper);
        this.entityWrapperByEntityModelUUID_map.set(entityModelWrapper.getEntityModelUUID(), entityModelWrapper);
        this.entityModelByNamespace_map.set(namespace_s, entityModel);
        return (this);
    }
    addRelationship(relationship) {
        this.relationships_ary.push(relationship);
        //this.verifyEntityModelsIncludeRelationship(relationship);
        return (this);
    }
    getEntityWrapperByNamespace(namespace) {
        let entityModelWrapper = null;
        let entry = this.entityWrapperByNamespace.get(namespace);
        if (entry !== undefined) {
            entityModelWrapper = entry;
        }
        return (entityModelWrapper);
    }
    getEntityZodSchemaByNameSpace(namespace) {
        // let entityModelWrapper : EntityWrapper | null = null;
        let schemaValidator = zod_1.z.object({});
        let entityModelWrapper = this.getEntityWrapperByNamespace(namespace);
        // let entry: any = this.entityWrapperByNamespace.get(namespace);
        if (entityModelWrapper) {
            schemaValidator = entityModelWrapper.getZodSchema();
        }
        let zodSchema = schemaValidator;
        return (zodSchema);
    }
    getEntityWrapperByEntityModelUUID(entityModelUUID) {
        let entityModelWrapper = null;
        let entry = this.entityWrapperByEntityModelUUID_map.get(entityModelUUID);
        if (entry) {
            entityModelWrapper = entry;
        }
        return (entityModelWrapper);
    }
}
exports.EntityManager = EntityManager;
EntityManager.INSTANCE = new EntityManager();
//# sourceMappingURL=EntityManager.js.map