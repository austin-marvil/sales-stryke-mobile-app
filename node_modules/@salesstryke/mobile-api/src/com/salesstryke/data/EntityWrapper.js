"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityWrapper = void 0;
const DataModelAttributeHelperUtil_1 = require("../utils/DataModelAttributeHelperUtil");
const DataType_1 = require("./entity/DataType");
const EntityBase_1 = require("./entity/EntityBase");
const EntityStateTypeUtil_1 = require("./entity/EntityStateTypeUtil");
const ErrorBase_1 = require("../lang/ErrorBase");
const Exists_1 = require("../utils/object/Exists");
const JsonApiPropertyType_1 = require("../jsonApi/JsonApiPropertyType");
const LogManager_1 = require("../utils/log/LogManager");
const NamespaceUtils_1 = require("../utils/NamespaceUtils");
const zod_1 = require("zod");
const NAMESPACE = "com.salesstryke.data.EntityWrapper";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class EntityWrapper {
    constructor(entityModel) {
        /**
         * ```
         * Example:
         *   User
         *     ._firstNameIsMutated
         *     .firstName
         *
         *  key: firstName, value: Attribute for '_firstNameIsMutated'
         * ```
         */
        this.flagIfMutatedAttributeForDataAttributeByAttributeName_map = new Map();
        this.attributeByUUID_map = new Map();
        this.allowCascadeDelete_b = false;
        this.createCrudAuthorizationUUID_s = null;
        this.createdDateAttribute = null;
        this.extends_em = null;
        this.zodSchema = zod_1.z.object({});
        this.entityAttributes_ary = new Array();
        this.entityModelUUID_s = "";
        this.entityStateAttribute = null;
        this.extendsAttributes_ary = new Array();
        this.flagIfMutatedAttribute = null;
        this.idAttribute = null;
        /**
         * All updates will be included in a History Collection;
         */
        this.includeInHistory_b = false;
        this.isOrganizationRefRequired_b = false;
        this.isGraphUpdateable_b = false;
        this.jsonTopLevelID = null;
        this.jsonTopLevelType = null;
        this.organizationRefAttribute = null;
        //_relationshipPersistableType
        // DataModelAttributeHelper.persistableType.attributeName;
        this.relationshipPersistableType = null;
        this.relationships_ary = new Array();
        this.relationshipAttributes_ary = new Array();
        // deprecate
        this.relationshipByUUID_map = new Map();
        this.validatorAttributes = new Array();
        let noop_n = 0;
        this.entityModel = entityModel;
        this.extends_em = entityModel.getExtends();
        this.allAttributes_ary = this.entityModel.getAllAttributes(); //.getEntityAttributes();  
        this.allowCascadeDelete_b = this.entityModel.getAllowCascadeDelete();
        this.attributeByJsonAttributeName_map = new Map();
        this.attributeByName_map = new Map();
        this.createCrudAuthorizationUUID_s = this.entityModel.getCrudCreateAuthorizationUUID();
        this.dataModelName = this.entityModel.getDataModelName();
        this.entityAttributes_ary = this.entityModel.getEntityAttributes();
        this.entityType = this.entityModel.getEntityType();
        this.includeInHistory_b = this.entityModel.getIncludeInHistory();
        this.isGraphUpdateable_b = entityModel.getIsGraphUpdateable();
        this.entityModelUUID_s = entityModel.getUUID();
        this.mongodbAttributes = new Array();
        this.namespace = this.entityModel.getNamespace();
        this.simpleName_s = NamespaceUtils_1.NamespaceUtils.namespaceToSimpleName(this.namespace);
        try {
            if (this.allAttributes_ary.length > 11) {
                let noop_b = false;
            }
            if (this.namespace.indexOf("Address") > -1) {
                let noop_b = false;
            }
            if (this.namespace.indexOf("ChildOfATest") > 0) {
                let noop_s = "";
            }
            if (this.namespace === "packages.common.com.salesstryke.entity.classes.record.Authentication") {
                let noop_b = false;
            }
            this.entityAttributes_ary = this.entityModel.getAllAttributes();
            this.initDataFromEntityModel(this.entityModel);
        }
        catch (error_any) {
            let error = error_any;
            let errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, 'constructor', "828afc90-cf3f-4ebc-8457-3b799989b85d", error);
            if (LOGGER.isErrorEnabled()) {
                LOGGER.logErrorBase(errorBase);
            }
        }
    }
    /**
     * Includes Entity Attributes and inherited Attributes
     * @returns
     */
    getAllAttributes() {
        return (this.allAttributes_ary);
    }
    getAllowCascadeDelete() {
        return (this.allowCascadeDelete_b);
    }
    getAttributeByName(attributeName) {
        let attribute = null;
        let item = this.attributeByName_map.get(attributeName);
        if (item !== undefined) {
            attribute = item;
        }
        return (attribute);
    }
    getAttributeByJsonAttributeName(jsonAttributeName) {
        let attribute = null;
        let item = this.attributeByJsonAttributeName_map.get(jsonAttributeName);
        if (item !== undefined) {
            attribute = item;
        }
        return (attribute);
    }
    getAttributeByUUID(attributeUUID_s) {
        let attribute = null;
        let attribute_any = this.attributeByUUID_map.get(attributeUUID_s);
        if (attribute_any !== undefined && attribute_any !== null) {
            attribute = attribute_any;
        }
        return (attribute);
    }
    getCreatedDateAttribute() {
        return (this.createdDateAttribute);
    }
    getCreateCrudAuthorizationUUID() {
        return (this.createCrudAuthorizationUUID_s);
    }
    getDataModelName() {
        return (this.dataModelName);
    }
    getEntityAttributes() {
        return (this.entityAttributes_ary);
    }
    getEntityModelUUID() {
        return (this.entityModelUUID_s);
    }
    getEntityStateAttribute() {
        return (this.entityStateAttribute);
    }
    getEntityType() {
        return (this.entityType);
    }
    getExtendsEntityModel() {
        return (this.extends_em);
    }
    getFlagIfMutatedAttribute() {
        return (this.flagIfMutatedAttribute);
    }
    getIdAttribute() {
        return (this.idAttribute);
    }
    /**
     * All updates will be included in a History Collection;
     */
    getIncludeInHistory() {
        return (this.includeInHistory_b);
    }
    getIsGraphUpdateable() {
        return (this.isGraphUpdateable_b);
    }
    getMongodbAttributes() {
        return (this.mongodbAttributes);
    }
    getNamespace() {
        return (this.namespace);
    }
    /**
     * Returns an array of Attributes that have a relationship.
     * @returns
     */
    getRelationshipAttributes() {
        return (this.relationshipAttributes_ary);
    }
    /**
     * Deprecated
     * @param uuid_s
     * @returns
     */
    getRelationshipBaseByUUID(uuid_s) {
        let relationshipBase = null;
        let relationship_any = this.relationshipByUUID_map.get(uuid_s);
        if (relationship_any !== undefined && relationship_any !== null) {
            relationshipBase = relationship_any;
        }
        return (relationshipBase);
    }
    /**
     * DEPRECATED
     * @returns
     */
    getRelationships() {
        return (this.relationships_ary);
    }
    getIsOrganizationRefRequired() {
        return (this.isOrganizationRefRequired_b);
    }
    getAttributeByJsonTopLevelID() {
        return (this.jsonTopLevelID);
    }
    getAttributeByJsonTopLevelType() {
        return (this.jsonTopLevelType);
    }
    getJsonTopLevelType() {
        return (this.jsonTopLevelType);
    }
    /**
     * ```
     * Given a data attribute name, will find that attribute that holds the isMutated state if it exists.
     * Example: given 'firstName' will return the attribute for '_firstNameIsMutated' if it exists.
     * ```
     * @param dataAttributeName_s
     * @returns
     */
    getMutatedAttributeNameFromAttributeName(dataAttributeName_s) {
        let attribute = null;
        let mutatedFlagAttributeName_s = EntityStateTypeUtil_1.EntityStateTypeUtil.typeScriptAttributeNameToTypeScriptIsMutatedClassVariableName(dataAttributeName_s);
        let attribute_any = this.attributeByName_map.get(mutatedFlagAttributeName_s);
        if (attribute_any !== undefined && attribute_any !== null) {
            attribute = attribute_any;
        }
        return (attribute);
    }
    getOrganizationRefAttribute() {
        return (this.organizationRefAttribute);
    }
    /**
     * _relationshipPersistableType
     * Returns the Attribute for DataModelAttributeHelper.persistableType.attributeName if it exists.
     * @returns
     */
    getRelationshipPersistableType() {
        return (this.relationshipPersistableType);
    }
    /**
     * The simple name from the namespace.
     * @returns
     */
    getSimpleName() {
        return (this.simpleName_s);
    }
    getValidatorAttributes() {
        return (this.validatorAttributes);
    }
    getZodSchema() {
        return (this.zodSchema);
    }
    // private typescriptAttributeNameToMutatedName = (attributeName_s: string): string | null =>
    // {
    //     let mutatedName_s:  string | null = null;
    //     if(attributeName_s !== undefined && attributeName_s !== null && attributeName_s.length > 0)
    //     {
    //         let firstChar_s:    string          = attributeName_s.substring(0, 1);
    //         if(firstChar_s === '_')
    //         {
    //         }
    //     }
    //     return(mutatedName_s);
    // }
    /**
     *
     * @param entityModel
     */
    initDataFromEntityModel(entityModel) {
        if (entityModel !== null) {
            let noop_n = 0;
            try {
                //if(this.namespace.indexOf("WorkspaceWidget") > 0) {
                if (this.namespace === 'packages.common.com.salesstryke.entity.classes.persistable.WorkspaceWidget') {
                    let noop_s = "";
                }
                this.isOrganizationRefRequired_b = entityModel.getIsOrganizationRefRequired();
                let attributes_ary = entityModel.getAllAttributes();
                let relationshipBase_ary = entityModel.getRelationships();
                relationshipBase_ary.forEach((relationshipBase) => {
                    this.relationships_ary.push(relationshipBase);
                });
                let attributeSize_i = attributes_ary.length;
                // load all attributes into map by name for later use.
                for (let index_i = 0; index_i < attributeSize_i; index_i++) {
                    let attribute = attributes_ary[index_i];
                    let attributeName = attribute.getTypeScriptAttributeName();
                    this.attributeByName_map.set(attributeName, attribute);
                }
                let schemaValidator = {};
                for (let index_i = 0; index_i < attributeSize_i; index_i++) {
                    let attribute = attributes_ary[index_i];
                    let attributeUUID_s = attribute.getUUID();
                    let dataType = attribute.getDataType();
                    let isFlaggedIfMutated_b = attribute.getIsFlaggedIfMutated();
                    let jsonAttributeName = attribute.getJsonAttributeName();
                    let jsonApiPropertyType = attribute.getJsonApiPropertyType();
                    let mongodbAttributeName_s = attribute.getMongoAttributeName();
                    let relationshipBase = attribute.getRelationship();
                    let tempName_s = null;
                    let typeScriptAttributeName_s = attribute.getTypeScriptAttributeName();
                    let validator = attribute.getValidator();
                    if (validator) {
                        this.validatorAttributes.push(attribute);
                    }
                    if (validator instanceof zod_1.z.ZodType && typeScriptAttributeName_s) {
                        schemaValidator[typeScriptAttributeName_s] = validator;
                    }
                    //_relationshipPersistableType
                    if (typeScriptAttributeName_s === DataModelAttributeHelperUtil_1.DataModelAttributeHelper._relationshipPersistableType.attributeName) {
                        this.relationshipPersistableType = attribute;
                    }
                    if (attributeUUID_s !== null && attributeUUID_s === '224891d4-2b6f-4575-8992-80c1e56d27df') {
                        let noop = '';
                    }
                    this.attributeByUUID_map.set(attributeUUID_s, attribute);
                    if (isFlaggedIfMutated_b) {
                        tempName_s = EntityStateTypeUtil_1.EntityStateTypeUtil.typeScriptAttributeNameToTypeScriptIsMutatedClassVariableName(typeScriptAttributeName_s);
                        this.flagIfMutatedAttribute = attribute;
                    }
                    if (typeScriptAttributeName_s !== null) {
                        if (typeScriptAttributeName_s === '_entityState') {
                            this.entityStateAttribute = attribute;
                        }
                        else if (typeScriptAttributeName_s === DataModelAttributeHelperUtil_1.DataModelAttributeHelper.createdDate.attributeName) {
                            this.createdDateAttribute = attribute;
                        }
                    }
                    /**
                     * If this Entity has a foreign reference to the Organization Entity, set the attribute here.
                     */
                    if (mongodbAttributeName_s !== null) {
                        if (mongodbAttributeName_s === EntityBase_1.EntityBase.organizationDataModelRefName) {
                            // TODO: REMOVE THIS
                            this.organizationRefAttribute = attribute;
                        }
                        else if (mongodbAttributeName_s === EntityBase_1.EntityBase.organizationEntityModelAttributeName) {
                            this.organizationRefAttribute = attribute;
                        }
                    }
                    // organizationRefAttribute
                    // let mongoAttribute_s:       string | null               = attribute.getMongoAttributeName();
                    // if(mongoAttribute_s !== null && mongoAttribute_s === "_id") {
                    //     noop_n = 0;
                    // }
                    if (dataType !== null) {
                        let dataType_s = dataType.getName();
                        switch (dataType) {
                            case DataType_1.DataType.MANY_TO_MANY:
                            case DataType_1.DataType.MANY_TO_ONE:
                            case DataType_1.DataType.MONGO_REF:
                            case DataType_1.DataType.MONGO_REF_ARRAY:
                            case DataType_1.DataType.MONGO_VIRTUAL_ARRAY:
                            case DataType_1.DataType.ONE_TO_MANY:
                                this.relationshipAttributes_ary.push(attribute);
                                break;
                            case DataType_1.DataType.ID:
                                this.idAttribute = attribute;
                                break;
                        }
                    }
                    // if(relationshipBase !== null) {
                    //     this.relationshipAttributes_ary.push(attribute);
                    // }
                    // if(this.namespace === "packages.common.com.salesstryke.entity.classes.record.Authentication") {
                    //     let noop_b: boolean = false;
                    // }
                    this.attributeByJsonAttributeName_map.set(jsonAttributeName, attribute);
                    let jsonApiPropertyTypeAny = attribute.getJsonApiPropertyType();
                    if ((0, Exists_1.Exists)(jsonApiPropertyTypeAny)) {
                        let jsonApiPropertyType = jsonApiPropertyTypeAny;
                        if (jsonApiPropertyType === JsonApiPropertyType_1.JsonApiPropertyType.ID) {
                            this.jsonTopLevelID = attribute;
                        }
                        else if (jsonApiPropertyType === JsonApiPropertyType_1.JsonApiPropertyType.TYPE) {
                            this.jsonTopLevelType = attribute;
                        }
                    }
                    let mongoAttribute_any = attribute.getMongoAttributeName();
                    if (mongoAttribute_any !== undefined && mongoAttribute_any !== null) {
                        this.mongodbAttributes.push(attribute);
                    }
                }
                this.zodSchema = zod_1.z.object(schemaValidator);
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, this.initDataFromEntityModel.name, "019b9200-4db3-411d-98a3-9c78cc3febfd", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
            }
        }
    }
}
exports.EntityWrapper = EntityWrapper;
//# sourceMappingURL=EntityWrapper.js.map