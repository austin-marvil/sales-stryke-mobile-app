"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManyToOneOneToMany = void 0;
const StringToHashCode_1 = require("../../../utils/StringToHashCode");
const RelationshipBase_1 = require("./RelationshipBase");
const RelationshipType_1 = require("./RelationshipType");
class ManyToOneOneToMany extends RelationshipBase_1.RelationshipBase {
    constructor() {
        super(RelationshipType_1.RelationshipType.MANY_TO_ONE_ONE_TO_MANY);
        this.manyEntityNamespace_s = null;
        this.manyEntityForeignKeyAttributeName_s = null;
        this.manyToOneEntityAttributeName_s = null;
        this.oneEntityNamespace_s = null;
        this.oneToManyEntityArrayAttributeName_s = null;
        this.oneVirtualAttributeName_s = null;
        this.onePrimaryKeyAttributeName_s = null;
    }
    getHashCode() {
        let hashCode_i = 1;
        let prime = 31;
        hashCode_i = prime * hashCode_i + StringToHashCode_1.StringToHashCode.stringToHashCode(this.getManyEntityNamespace());
        //hashCode_i = prime * hashCode_i + StringToHashCode.stringToHashCode(this.getManyForiegnKeyAttributeName());
        hashCode_i = prime * hashCode_i + StringToHashCode_1.StringToHashCode.stringToHashCode(this.getOneEntityNamespace());
        hashCode_i = prime * hashCode_i + StringToHashCode_1.StringToHashCode.stringToHashCode(this.getOneEntityAttributeName());
        return (hashCode_i);
    }
    /**
     * The Entity on the Many side of a OneToMany or a ManyToOne data relationship.
     * @returns
     */
    getManyEntityNamespace() {
        return (this.manyEntityNamespace_s);
    }
    /**
     * The Many Entity Attribute that relates to the One Entity Attribute that defines the ManyToOne or OneToMany relationship.
     * @returns
     */
    getManyEntityForiegnKeyAttributeName() {
        return (this.manyEntityForeignKeyAttributeName_s);
    }
    /**
     * DELETE THIS
     * @returns
     */
    getManyToOneEntityAttributeName() {
        return (this.manyToOneEntityAttributeName_s);
    }
    /**
     * The Entity on the One side of a OneToMany or a ManyToOne data relationship.
     * @returns
     */
    getOneEntityNamespace() {
        return (this.oneEntityNamespace_s);
    }
    /**
     * This is a Mongo Virtual. If the values exists, a Mongo Virtual is added to the One side of a ManyToOne or a OneToMany with
     * the name of the virtual corresponding to an Array of the Many Entity being accessible one the One Entity.
     * @returns
     */
    getOneVirtualAttributeName() {
        return (this.oneVirtualAttributeName_s);
    }
    getOneToManyEntityArrayAttributeName() {
        return (this.oneToManyEntityArrayAttributeName_s);
    }
    getOneEntityAttributeName() {
        return (this.onePrimaryKeyAttributeName_s);
    }
    setManyEntityNamespace(manyEntityTypeNamespace_s) {
        this.manyEntityNamespace_s = manyEntityTypeNamespace_s;
        return (this);
    }
    setManyForeignKeyAttributeName(manyForeignKeyAttributeName_s) {
        this.manyEntityForeignKeyAttributeName_s = manyForeignKeyAttributeName_s;
        return (this);
    }
    // public setManyForeignRefAttributeName(manyToOneEntityAttributeName_s: string): ManyToOneOneToMany {
    //     this.manyToOneEntityAttributeName_s = manyToOneEntityAttributeName_s;
    //     return(this);
    // }
    setOneEntityNamespace(oneEntityTypeNamespace_s) {
        this.oneEntityNamespace_s = oneEntityTypeNamespace_s;
        return (this);
    }
    /**
     * The MongoVirtualName is of type ManyEntityNamespace
     * @param oneMongoVirtualName_s
     * @returns
     */
    setOneMongoVirtualName(oneMongoVirtualName_s) {
        this.oneVirtualAttributeName_s = oneMongoVirtualName_s;
        return (this);
    }
    setOneToManyEntityArrayAttributeName(oneToManyEntityArrayAttributeName_s) {
        this.oneToManyEntityArrayAttributeName_s = oneToManyEntityArrayAttributeName_s;
        return (this);
    }
    setOnePrimaryKeyAttributeName(onePrimaryKeyAttributeName_s) {
        this.onePrimaryKeyAttributeName_s = onePrimaryKeyAttributeName_s;
        return (this);
    }
    setRelationshipUUID(relationshipUUID_s) {
        super.setRelationshipUUID(relationshipUUID_s);
        return (this);
    }
}
exports.ManyToOneOneToMany = ManyToOneOneToMany;
//# sourceMappingURL=ManyToOneOneToMany.js.map