"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTypeAsTypeScriptTypeUtil = void 0;
const NamespaceUtils_1 = require("../../../utils/NamespaceUtils");
const LogManager_1 = require("../../../utils/log/LogManager");
const DataType_1 = require("../DataType");
const NAMESPACE = "com.salesstryke.data.entity.utils.DataTypeAsTypeScriptTypeUtil";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class DataTypeAsTypeScriptTypeUtil {
    static getAsTypeScriptDataType(attribute, dataType) {
        let dataTypeName_s = "";
        let mongoRefEntityNamespace_s = null;
        switch (dataType) {
            case DataType_1.DataType.BOOLEAN:
                dataTypeName_s = "boolean";
                break;
            case DataType_1.DataType.CURRENCY:
                dataTypeName_s = "number";
                break;
            case DataType_1.DataType.DATE:
                dataTypeName_s = "Date";
                break;
            case DataType_1.DataType.FLOAT:
                dataTypeName_s = "number";
                break;
            case DataType_1.DataType.FORIEGN_KEY:
            case DataType_1.DataType.ID:
                dataTypeName_s = "string";
                break;
            case DataType_1.DataType.INTEGER:
                dataTypeName_s = "number";
                break;
            case DataType_1.DataType.JSON_STRING:
                dataTypeName_s = "string";
                break;
            case DataType_1.DataType.MONGO_REF:
                if (attribute) {
                    mongoRefEntityNamespace_s = attribute.getForeignRefEntityNamespace();
                    if (mongoRefEntityNamespace_s !== null) {
                        dataTypeName_s = NamespaceUtils_1.NamespaceUtils.namespaceToSimpleName(mongoRefEntityNamespace_s);
                    }
                }
                break;
            case DataType_1.DataType.MONGO_REF_ARRAY:
                if (attribute) {
                    mongoRefEntityNamespace_s = attribute.getForeignRefEntityNamespace();
                    if (mongoRefEntityNamespace_s !== null) {
                        dataTypeName_s = `${NamespaceUtils_1.NamespaceUtils.namespaceToSimpleName(mongoRefEntityNamespace_s)}[]`;
                    }
                }
                break;
            case DataType_1.DataType.MONGO_VIRTUAL_ARRAY:
            case DataType_1.DataType.MANY_TO_ONE:
            case DataType_1.DataType.NUMBER:
                dataTypeName_s = "number";
                break;
            case DataType_1.DataType.ONE_TO_MANY:
                dataTypeName_s = "";
                break;
            case DataType_1.DataType.REAL:
                dataTypeName_s = "number";
                break;
            case DataType_1.DataType.STRING:
                dataTypeName_s = "string";
                break;
            default:
                // eslint-disable-next-line
                let errorMsg = "unknown datatype: " + dataType.getName();
                LOGGER.logError({ message: errorMsg, methodName: this.getAsTypeScriptDataType.name });
                throw errorMsg;
                break;
        }
        return (dataTypeName_s);
    }
}
exports.DataTypeAsTypeScriptTypeUtil = DataTypeAsTypeScriptTypeUtil;
//# sourceMappingURL=DataTypeAsTypeScriptTypeUtil.js.map