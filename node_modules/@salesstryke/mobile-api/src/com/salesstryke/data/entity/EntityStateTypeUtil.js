"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityStateTypeUtil = void 0;
const Exists_1 = require("../../utils/object/Exists");
const StringUtils_1 = require("../../utils/StringUtils");
const EntityStateType_1 = require("./EntityStateType");
class EntityStateTypeUtil {
    static getStringAsEntityStateType(entityStateType_s) {
        let entityStateType = null;
        if (entityStateType_s
            && (0, Exists_1.Exists)(entityStateType_s)) {
            entityStateType_s = entityStateType_s.toLocaleUpperCase();
            if (entityStateType_s === EntityStateType_1.EntityStateType[EntityStateType_1.EntityStateType.CREATE]) {
                entityStateType = EntityStateType_1.EntityStateType.CREATE;
            }
            else if (entityStateType_s === EntityStateType_1.EntityStateType[EntityStateType_1.EntityStateType.DELETE]) {
                entityStateType = EntityStateType_1.EntityStateType.DELETE;
            }
            else if (entityStateType_s === EntityStateType_1.EntityStateType[EntityStateType_1.EntityStateType.READ]) {
                entityStateType = EntityStateType_1.EntityStateType.READ;
            }
            else if (entityStateType_s === EntityStateType_1.EntityStateType[EntityStateType_1.EntityStateType.UPDATE]) {
                entityStateType = EntityStateType_1.EntityStateType.UPDATE;
            }
        }
        return (entityStateType);
    }
    static jsonAttributeNameToTypeScriptIsMutatedName(jsonAttributeName_s) {
        let isMutated_s = `_${jsonAttributeName_s}IsMutated`;
        return (isMutated_s);
    }
    /**
     * Will not duplicate 'is' if attribute name begins with 'is'
     * @param typeScriptAttributeName_s
     * @returns
     */
    static typeScriptAttributeNameToTypeScriptGetterMethodName(typeScriptAttributeName_s) {
        if (typeScriptAttributeName_s.indexOf("_is") > -1) {
            let noop = 0;
        }
        let char1_s = typeScriptAttributeName_s.charAt(0);
        if (char1_s === "_") {
            // remove first char
            typeScriptAttributeName_s = typeScriptAttributeName_s.substring(1, typeScriptAttributeName_s.length);
        }
        let getterName = "";
        let temp_s = typeScriptAttributeName_s.toLocaleLowerCase();
        if (temp_s.indexOf("is") === 0) {
            getterName = `_get${StringUtils_1.StringUtils.firstCharToUpperCase(typeScriptAttributeName_s)}Mutated`;
        }
        else {
            getterName = `_getIs${StringUtils_1.StringUtils.firstCharToUpperCase(typeScriptAttributeName_s)}Mutated`;
        }
        return (getterName);
    }
    /**
     * Will not duplicate 'is' if attribute name begins with 'is'
     * @param typeScriptAttributeName_s
     * @returns
     */
    static typeScriptAttributeNameToTypeScripSetterMethodName(typeScriptAttributeName_s) {
        let setterName = "";
        let char1_s = typeScriptAttributeName_s.charAt(0);
        if (char1_s === "_") {
            // remove first char
            typeScriptAttributeName_s = typeScriptAttributeName_s.substring(1, typeScriptAttributeName_s.length);
        }
        let temp_s = typeScriptAttributeName_s.toLocaleLowerCase();
        if (temp_s.indexOf("is") === 0) {
            setterName = `_set${StringUtils_1.StringUtils.firstCharToUpperCase(typeScriptAttributeName_s)}Mutated`;
        }
        else {
            setterName = `_setIs${StringUtils_1.StringUtils.firstCharToUpperCase(typeScriptAttributeName_s)}Mutated`;
        }
        return (setterName);
    }
    static typeScriptAttributeNameToTypeScriptIsMutatedClassVariableName(typeScriptAttributeName_s) {
        let char1_s = typeScriptAttributeName_s.charAt(0);
        if (char1_s === "_") {
            // remove first char
            typeScriptAttributeName_s = typeScriptAttributeName_s.substring(1, typeScriptAttributeName_s.length);
        }
        let isMutated_s = `_${typeScriptAttributeName_s}IsMutated`;
        return (isMutated_s);
    }
}
exports.EntityStateTypeUtil = EntityStateTypeUtil;
//# sourceMappingURL=EntityStateTypeUtil.js.map