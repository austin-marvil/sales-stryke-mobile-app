"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityModel = void 0;
const EntityType_1 = require("./EntityType");
const Attribute_1 = require("./Attribute");
const DataType_1 = require("./DataType");
const JsonApiPropertyType_1 = require("../../jsonApi/JsonApiPropertyType");
const EntityStateTypeUtil_1 = require("./EntityStateTypeUtil");
class EntityModel {
    constructor() {
        /**
         * All the Entity Attributes plus all 'extends' Entity Attributes.
         */
        this.allAttributes_ary = new Array();
        /**
         * Identifies if this type of entity is allowed to be cascade deleted.
         */
        this.allowCascadeDelete_b = false;
        /**
         * This is the crud @DAsyncAuthorization("<uuid>>", "<short description>")
         */
        this.crudCreateAuthorizationUUID_s = null;
        this.crudOverWriteSourceCode_b = true;
        this.dataModelName_s = "";
        this.entityType = EntityType_1.EntityType.JSONAPI;
        this.extends_em = null;
        this.imports = new Array();
        /**
         * All updates will be included in a History Collection;
         */
        this.includeInHistory_b = false;
        this.isOrganizationRefRequired_b = false;
        /**
         * When saving data, identifies if able to update child data.
         * USStates are NOT graph updateable.
         */
        this.isGraphUpdateable_b = false;
        /**
         * A secure entity does not allow direct HTTPMethod calls.
         */
        this.isSecure_b = false;
        this.relationship_ary = new Array();
        this.namespace_s = "";
        this.doPack_b = true;
        this.uuid_s = "";
        this.entityAttributes_ary = new Array();
        // let entityState: Attribute = new Attribute()     
        //     .setComment("CREATE, DELETE, UPDATE")   
        //     .setDataType(DataType.STRING)
        //     .setJsonApiPropertyType(JsonApiPropertyType.FIELD)
        //     .setJsonAttributeName(DataModelAttributeHelper._entityState.attributeName)
        //     .setTypeScriptAttributeName(DataModelAttributeHelper._entityState.attributeName)
        //     .setTypeScriptGetterMethodName(DataModelAttributeHelper._entityState.getterMethodName)
        //     .setTypeScriptSetterMethodName(DataModelAttributeHelper._entityState.setterMethodName);
        // this.entityAttributes_ary.push(entityState);
    }
    addImport(p) {
        this.imports.push(p.import);
        return (this);
    }
    /**
     * Identifies if this type of entity is allowed to be cascade deleted.
     */
    getAllowCascadeDelete() {
        return (this.allowCascadeDelete_b);
    }
    getImports() {
        return (this.imports);
    }
    /**
     * All updates will be included in a History Collection;
     */
    getIncludeInHistory() {
        return (this.includeInHistory_b);
    }
    getIsOrganizationRefRequired() {
        return (this.isOrganizationRefRequired_b);
    }
    /**
     * A secure entity does not allow direct HTTPMethod calls.
     */
    getIsSecure() {
        return (this.isSecure_b);
    }
    addEntityAttribute(attribute, mutatedFlagAttributeUUID_s = null) {
        this.entityAttributes_ary.push(attribute);
        if (attribute.getJsonAttributeName().includes('initializedDataKey')) {
            let noop = '';
        }
        let tsName_s = attribute.getTypeScriptAttributeName();
        if (attribute.getIsFlaggedIfMutated()) {
            let typeScriptAttributeName_s = attribute.getTypeScriptAttributeName();
            let getterMethodName_s = EntityStateTypeUtil_1.EntityStateTypeUtil.typeScriptAttributeNameToTypeScriptGetterMethodName(typeScriptAttributeName_s);
            let setterMethodName_s = EntityStateTypeUtil_1.EntityStateTypeUtil.typeScriptAttributeNameToTypeScripSetterMethodName(typeScriptAttributeName_s);
            let jsonAttributeName_s = EntityStateTypeUtil_1.EntityStateTypeUtil.jsonAttributeNameToTypeScriptIsMutatedName(typeScriptAttributeName_s);
            let isMutatedTypeScriptAttributeName_s = EntityStateTypeUtil_1.EntityStateTypeUtil.typeScriptAttributeNameToTypeScriptIsMutatedClassVariableName(typeScriptAttributeName_s);
            let mutatedAttribute = new Attribute_1.Attribute()
                .setDataType(DataType_1.DataType.BOOLEAN)
                .setIsSystem(true)
                .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
                .setJsonAttributeName(jsonAttributeName_s)
                .setTypeScriptAttributeName(isMutatedTypeScriptAttributeName_s)
                .setTypeScriptGetterMethodName(getterMethodName_s)
                .setTypeScriptSetterMethodName(setterMethodName_s);
            if (mutatedFlagAttributeUUID_s !== null) {
                // attribute.setMutatedFlagAttributeUUID(mutatedFlagAttributeUUID_s);
                // attribute.getMutatedFlagAttributeUUID()
                mutatedAttribute.setUUID(attribute.getMutatedFlagAttributeUUID() || '');
            }
            this.entityAttributes_ary.push(mutatedAttribute);
        }
        return (this);
    }
    /**
     *
     */
    doPack() {
        if (this.doPack_b) {
            this.allAttributes_ary.sort((a, b) => {
                let aAttributeName_s = a.getTypeScriptAttributeName();
                let bAttributeName_s = b.getTypeScriptAttributeName();
                return (aAttributeName_s.localeCompare(bAttributeName_s));
            });
            this.entityAttributes_ary.sort((a, b) => {
                let aAttributeName_s = a.getTypeScriptAttributeName();
                let bAttributeName_s = b.getTypeScriptAttributeName();
                return (aAttributeName_s.localeCompare(bAttributeName_s));
            });
            this.doPack_b = false;
        }
    }
    /**
     * Clears ONLY the Attributes that are unique to the Entity. Does not clear Attributes for the extends Entity.
     * @returns
     */
    clearEntityAttributes() {
        if (this.doPack_b) {
            this.entityAttributes_ary = new Array();
        }
        return (this);
    }
    /**
     * All Entity and inherited Attributes.
     * @returns
     */
    getAllAttributes() {
        return (this.allAttributes_ary);
    }
    /**
     * The <simpleName>Crud @DAsyncAuthorization("<uuid>>", "<short description>")
     * @returns
     */
    getCrudCreateAuthorizationUUID() {
        return (this.crudCreateAuthorizationUUID_s);
    }
    /**
     *
     * @returns
     */
    getCrudOverWriteSourceCode() {
        return (this.crudOverWriteSourceCode_b);
    }
    /**
     * The Attributes the are specifically defined for the Entity, does not include inherited Attributes.
     * @returns
     */
    getEntityAttributes() {
        return (this.entityAttributes_ary);
    }
    getDataModelName() {
        return (this.dataModelName_s);
    }
    getEntityType() {
        return (this.entityType);
    }
    getExtends() {
        return (this.extends_em);
    }
    // public getExtends(): string | null {
    //     return(this.extends_s);
    // }
    getIsGraphUpdateable() {
        return (this.isGraphUpdateable_b);
    }
    getNamespace() {
        return (this.namespace_s);
    }
    getRelationships() {
        return (this.relationship_ary);
    }
    getUUID() {
        return (this.uuid_s);
    }
    /**
     * Identifies if this type of entity is allowed to be cascade deleted.
     */
    setAllowCascadeDelete(allowCascadeDelete_b) {
        this.allowCascadeDelete_b = allowCascadeDelete_b;
        return (this);
    }
    /**
     * The <simpleName>Crud @DAsyncAuthorization("<uuid>>", "<short description>")
     * @returns
     */
    setCrudCreateAuthorizationUUID(createCrudAuthorizationUUID_s) {
        this.crudCreateAuthorizationUUID_s = createCrudAuthorizationUUID_s;
        return (this);
    }
    /**
     * If true will generate and overwrite the crud source code. If false, will generate the code and write the file with a .txt extension.
     * @param crudOverWriteSourceCode_b
     * @returns
     */
    setCrudOverWriteSourceCode(crudOverWriteSourceCode_b) {
        this.crudOverWriteSourceCode_b = crudOverWriteSourceCode_b;
        return (this);
    }
    setDataModelName(dataModelName) {
        this.dataModelName_s = dataModelName;
        return (this);
    }
    setEntityType(entityType) {
        this.entityType = entityType;
        return (this);
    }
    setExtends(extends_em) {
        this.extends_em = extends_em;
        return (this);
    }
    /**
     * All updates will be included in a History Collection;
     */
    setIncludeInHistory(includeInHistory) {
        this.includeInHistory_b = includeInHistory;
        return (this);
    }
    setIsOrganizationRefRequired(isOrganizationRefRequired_b) {
        this.isOrganizationRefRequired_b = isOrganizationRefRequired_b;
        return (this);
    }
    setIsGraphUpdateable(isGraphUpdateable_b) {
        this.isGraphUpdateable_b = isGraphUpdateable_b;
        return (this);
    }
    setIsSecure(isSecure_b) {
        this.isSecure_b = isSecure_b;
        return (this);
    }
    setNamespace(modelName) {
        this.namespace_s = modelName;
        return (this);
    }
    setUUID(uuid_s) {
        this.uuid_s = uuid_s;
        return (this);
    }
}
exports.EntityModel = EntityModel;
//# sourceMappingURL=EntityModel.js.map