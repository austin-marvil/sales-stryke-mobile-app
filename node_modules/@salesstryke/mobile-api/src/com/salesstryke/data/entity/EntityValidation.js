"use strict";
var _a, _EntityValidation__isValidMethodName_s;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityValidation = void 0;
const tslib_1 = require("tslib");
const EntityWebReflectionUtils_1 = require("../../jsonApi/util/EntityWebReflectionUtils");
const ErrorBase_1 = require("../../lang/ErrorBase");
const LogManager_1 = require("../../utils/log/LogManager");
const Exists_1 = require("../../utils/object/Exists");
const EntityManager_1 = require("../EntityManager");
const DataType_1 = require("./DataType");
//const salesstrykeModule: SalesStrykeModule = SalesStrykeModule.getInstance();
const NAMESPACE = "com.salesstryke.data.entity.EntityValidation";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class EntityValidation {
    constructor() {
        this.errors_ary = new Array();
        //private isValid_b: boolean = false;
        this.validationErrors = new Array();
    }
    getErrors() {
        return (this.errors_ary);
    }
    getValidationErrors() {
        return (this.validationErrors);
    }
    isValid() {
        let isValid_b = false;
        if (this.errors_ary.length === 0) {
            isValid_b = true;
        }
        return (isValid_b);
    }
    /**
     * Validates root object, and all data relationships: MANY_TO_MANY, MANY_TO_ONE, ONE_TO_MANY, ONE_TO_ONE
     * @param jsonApiPersistableBase
     * @returns
     */
    _isValid(jsonApiPersistableBase) {
        let jsonApiError_ary = new Array();
        let className_s = jsonApiPersistableBase.getClassName();
        let entityWrapper = EntityManager_1.EntityManager.getInstance().getEntityWrapperByNamespace(className_s);
        if (entityWrapper !== null) {
            try {
                let attributes_ary = entityWrapper.getAllAttributes();
                attributes_ary.forEach((attribute, index_i) => {
                    let dataType = attribute.getDataType();
                    switch (dataType) {
                        //case DataType.MANY_TO_MANY:
                        //case DataType.MANY_TO_ONE:
                        case DataType_1.DataType.MANY_TO_ONE:
                            // eslint-disable-next-line
                            let entity_any = EntityWebReflectionUtils_1.EntityWebReflectionUtils.getValue(attribute, jsonApiPersistableBase);
                            if (entity_any !== null) {
                                let entity_japb = entity_any;
                                let errors_jae_ary = this._isValid(entity_japb);
                                for (let index_i = 0; index_i < errors_jae_ary.length; index_i++) {
                                    jsonApiError_ary.push(errors_jae_ary[index_i]);
                                }
                            }
                            break;
                    }
                    let getterMethodName_s = attribute.getTypeScriptGetterMethodName();
                    let value_any = EntityWebReflectionUtils_1.EntityWebReflectionUtils.getValue(attribute, jsonApiPersistableBase);
                    if (attribute.getIsMongoPersistable()) {
                        // TODO: implement
                        // let validations_ary: Array<ValidationBase> = attribute.getValidations();
                        // validations_ary.forEach((validationBase: ValidationBase) => {
                        //     if(!validationBase.isValid(value_any)) {
                        //         let errorMessage_s:         string              = validationBase.getErrorMessage();
                        //         let errorMessageUUID_s:     string              = validationBase.getErrorMessageUUID();
                        //         let errorNamespace_s:       string              = validationBase.getErrorNamespace();
                        //         let jsonApiErrorMeta:       JsonApiErrorMeta    = new JsonApiErrorMeta()
                        //                                                                 .setNamespace(errorNamespace_s);
                        //         let jsonApiError:           JsonApiError        = new JsonApiError().setMeta(jsonApiErrorMeta);
                        //         jsonApiError_ary.push(jsonApiError);
                        //     }
                        // });
                    }
                });
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, tslib_1.__classPrivateFieldGet(_a, _a, "f", _EntityValidation__isValidMethodName_s), "3158d3d0-3450-4a32-ae0c-98ed89a20bfd", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
            }
        }
        return (jsonApiError_ary);
    }
    validate(jsonApiBase) {
        let tempIsValid_b = true;
        try {
            if ((0, Exists_1.Exists)(jsonApiBase)) {
                //errors_ary: Array<JsonApiError> = new Array<JsonApiError>();
                this.errors_ary = this._isValid(jsonApiBase);
                let noop_s = "";
                /*

                let entityManager: EntityManager = EntityManager.getInstance();
                let namespace_s: string = jsonApiBase.getClassName();
                let entityWrapper: EntityWrapper | null = entityManager.getEntityWrapperByNamespace(namespace_s);
        
                if(entityWrapper !== null) {
                    let attributes: Array<Attribute> = entityWrapper.getMongodbAttributes();
                    
        
                    for(let index_i = 0; index_i < attributes.length; index_i++) {
                        let attribute: Attribute = attributes[index_i];
                        let attributeName_s: string = attribute.getAttributeName();
                        let regEx_s: string = attribute.getJavaScriptRegExValidation();
    
                        if(regEx_s !== undefined && regEx_s.length > 0) {
    
                            //let dataType: DataType = attribute.getDataType();
                            let getterMethodName_s: string = attribute.getGetterMethodName();
                            let dataValue_any: any = ReflectionUtils.getValue(attribute, jsonApiBase, getterMethodName_s);
    
                            tempIsValid_b = attribute.isValid(dataValue_any);
    
                            if(!tempIsValid_b) {
                                let detail_s: string = `${namespace_s}.${attributeName_s} invalid.`;
                                let jsonApiErrorMeta: JsonApiErrorMeta = new JsonApiErrorMeta();
                                jsonApiErrorMeta.setErrorType(JsonApiErrorMetaErrorType.ATTRIBUTE_INVALID);
                                jsonApiErrorMeta.setMethodName(getterMethodName_s);
                                jsonApiErrorMeta.setNamespace(namespace_s);
    
                                let jsonApiError: JsonApiError = new JsonApiError().setDetail(detail_s).setMeta(jsonApiErrorMeta);
                                this.errors.push(jsonApiError);
    
                                let message_s:                      string = "";
                                let userUUID_s:                     string = "";
                                let errorIdType:                    ErrorIdType = ErrorIdType.ATTRIBUTE_VADIDATION;
                                let securityAttributeUUID_s:        string = "";
                                let methodName_s:                   string = getterMethodName_s;
                                let uiUUID_s:                       string = jsonApiBase.getUIUUID() || "";
                                let i18n_s:                         string = jsonApiBase.getI18n() || "";
                                let validationError:                AttributeValidationError = new AttributeValidationError(
                                                                                                        message_s,
                                                                                                        userUUID_s,
                                                                                                        securityAttributeUUID_s,
                                                                                                        namespace_s,
                                                                                                        methodName_s,
                                                                                                        i18n_s,
                                                                                                        uiUUID_s
                                                                                                );
                                this.validationErrors.push(validationError);
                            }
    
                            this.isValid_b = (this.isValid_b && tempIsValid_b);
                        }
        
                    }
        
                }
                */
            }
        }
        catch (error_any) {
            //this.isValid_b = false;
        }
        return (this);
        //return(this.isValid_b);
    }
}
exports.EntityValidation = EntityValidation;
_a = EntityValidation;
_EntityValidation__isValidMethodName_s = { value: "_isValid" };
//# sourceMappingURL=EntityValidation.js.map