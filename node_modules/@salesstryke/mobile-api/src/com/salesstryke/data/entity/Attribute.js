"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attribute = void 0;
const DataType_1 = require("./DataType");
const JsonApiUtils_1 = require("../../jsonApi/JsonApiUtils");
const StringUtils_1 = require("../../utils/StringUtils");
class Attribute {
    constructor() {
        this.addListItemMethodName_s = "";
        this.addListItemMethodParameterName_s = "";
        this.callsSuperMethod_b = false;
        this.dataType = null;
        this.defaultValueAsString_s = null;
        this.flagIfMutated_b = false;
        /**
         * All updates will be included in a History Collection;
         */
        this.includeInHistory_b = false;
        this.typeScriptGetterMethodName_s = "";
        this.mongoAllowRefArrayDuplicate_b = false;
        this.isMongoAttributeIndexed_b = false;
        this.isMongoPersistable_b = false;
        this.isMongoRequired_b = false;
        this.mongoVirtualForeignField_s = null;
        this.mongoVirtualLocalField_s = null;
        this.mongoVirtualJustOne_b = true;
        this.mongoVirtualName_s = null;
        this.mongoVirtualRef_s = null;
        /**
         * Identifies the virtual array attribute.
         *
         * The attribute is not a direct persistable, it is a virtual attribute.
         *
         * Is the foreignField in:
         *
         * schemaName.virtual('virtualArray', {
         *   ref          : 'VirtualArrayModel',         // The model to use for populating the virtual
         *   localField   : '_id',                       // The local field used for matching documents in the target model
         *   foreignField : 'virtualArrayAttributeName'  // The field in the local model that references the target model
         * });
         */
        this.isMongoVirtualArrayForeignField_b = false;
        this.isMongoVirtualArrayJustOne_b = false;
        /**
         * DELETE THIS!!!!
         * If this is an input Attribute, the mutatedFlagAttributeUUID with identify the attribute that
         * hold the mutated status.
         */
        this.mutatedFlagAttributeUUID_s = null;
        // private isMutated_b:                            boolean                     = false;
        // private mutatedTypeScriptAttributeName_s:       string | null               = null;
        /**
         * Prevent the Attribute data from being part of a Response to an HTTP client.
         */
        this.isSecure_b = false;
        /**
         * If isSystem, variable names and method names will have a leading underscore.
         * Example:
         *      foriegnKey:
         *
         *          private _foriegnKey_s: string | null = null;
         *
         *          public _getForiegnKey(): string | null {
         *              return(...);
         *          }
         *
         */
        this.isSystem_b = false;
        this.isTypeAlias_b = false;
        this.isTypeAliasOptional_b = false;
        this.javaScriptRegExValidation_s = "";
        this.jsonApiPropertyType = null;
        this.jsonAttributeName_s = "";
        this.comment_s = "";
        this.mongoAttributeName_s = "";
        this.mongoIsUnique_b = false;
        this.omitClassVariable_b = false;
        this.foreignRefEntityNamespace_s = null;
        this.foreignField_s = null;
        this.relationshipBase = null;
        this.typeReference = null;
        this.typeScriptAttributeName_s = "";
        this.typeScriptSetterMethodName_s = "";
        this.typeScriptAddItemMethodName_s = null;
        //private typeScriptAttributeName_s:          string                      = "";
        this.uiDefaultLabel_s = null;
        this.uiDataType = null;
        this.uiI18nKey_s = null;
        /**
         * If true show UI attribute
         */
        this.uiIsVisible_b = false;
        /**
         * -1 indicates no view order set
         */
        this.uiViewOrder_i = -1;
        this.typeScriptValidations_ary = new Array();
        this.zodValidator = undefined;
        /**
         * Useful for validating unique ui elements and easily showing the validation error to the correct component.
         */
        this.uiUUID_s = "";
        /**
         * Unique uuid for the Attribute.
         */
        this.uuid_s = "";
        this.variableType = null;
    }
    addTypeScriptValidation(validation) {
        this.typeScriptValidations_ary.push(validation);
        return (this);
    }
    getAddListItemMethodName() {
        return (this.addListItemMethodName_s);
    }
    getAddListItemMethodParameterName() {
        return (this.addListItemMethodParameterName_s);
    }
    getCallsSuperMethod() {
        return (this.callsSuperMethod_b);
    }
    /**
     * Returns the dataModelAttributeName if set, otherwise returns the attributeName.
     * @returns
     */
    getMongoAttributeName() {
        if (this.mongoAttributeName_s !== "") {
            return (this.mongoAttributeName_s);
        }
        return (this.typeScriptAttributeName_s);
    }
    getMutatedFlagAttributeUUID() {
        return (this.mutatedFlagAttributeUUID_s);
    }
    /**
     * Used for relationships: ManyToOne, OneToMany, etc. For when there is both a class getter value and DataModelGetter in the same attribute.
     * @returns
     */
    getDataModelGetterMethodName() {
        let name_s = this.getMongoAttributeName();
        name_s = `_get${StringUtils_1.StringUtils.firstCharToUpperCase(name_s)}`;
        return (name_s);
    }
    getDataModelSetterMethodName() {
        let name_s = this.getMongoAttributeName();
        name_s = `_set${StringUtils_1.StringUtils.firstCharToUpperCase(name_s)}`;
        return (name_s);
    }
    getDataType() {
        return (this.dataType);
    }
    /**
     *
     * @returns
     */
    getDefaultValueAsString() {
        return (this.defaultValueAsString_s);
    }
    getForeignField() {
        return (this.foreignField_s);
    }
    getIsFlaggedIfMutated() {
        return (this.flagIfMutated_b);
    }
    /**
     * Prevent the Attribute data from being part of a Response to an HTTP client.
     */
    getIsSecure() {
        return (this.isSecure_b);
    }
    getIsSystem() {
        return (this.isSystem_b);
    }
    /**
     * Identifies if the attribute is to be part of a TypeAlias definition.
     * @returns
     */
    getIsTypeAlias() {
        return (this.isTypeAlias_b);
    }
    /**
     * Identifies if the attribute is optional as part of a TypeAlias definition.
     * @returns
     */
    getIsTypeAliasOptional() {
        return (this.isTypeAliasOptional_b);
    }
    getTypeScriptAttributeName() {
        return (this.typeScriptAttributeName_s);
    }
    getMongoIsUnique() {
        return (this.mongoIsUnique_b);
    }
    /**
     * If the class variable is omitted, it indicates that it exists in a parent class.
     * @returns
     */
    getOmitClassVariable() {
        return (this.omitClassVariable_b);
    }
    getJavaScriptRegExValidation() {
        return (this.javaScriptRegExValidation_s);
    }
    getJsonApiPropertyType() {
        return (this.jsonApiPropertyType);
    }
    /**
     * Returns the jsonAttributeName if set, otherwise returns the attributeName.
     * @returns string
     */
    getJsonAttributeName() {
        if (this.jsonAttributeName_s !== "") {
            return (this.jsonAttributeName_s);
        }
        return (this.typeScriptAttributeName_s);
    }
    getComment() {
        return (this.comment_s);
    }
    /**
     * If true, allow a Mongo Reference Array to have duplicates. If false do not allow duplicates.
     * @returns
     */
    getMongoRefArrayAllowDuplicate() {
        return (this.mongoAllowRefArrayDuplicate_b);
    }
    getIsMongoAttributeIndexed() {
        return (this.isMongoAttributeIndexed_b);
    }
    getIsMongoPersistable() {
        return (this.isMongoPersistable_b);
    }
    getIsMongoRequired() {
        return (this.isMongoRequired_b);
    }
    getForeignRefEntityNamespace() {
        return (this.foreignRefEntityNamespace_s);
    }
    getIsMongoVirtualArrayForeignField() {
        return (this.isMongoVirtualArrayForeignField_b);
    }
    getIsMongoVirtualArrayJustOne() {
        return (this.isMongoVirtualArrayJustOne_b);
    }
    getMongoVirtualForeignField() {
        return (this.mongoVirtualForeignField_s);
    }
    getMongoVirtualLocalField() {
        return (this.mongoVirtualLocalField_s);
    }
    getMongoVirtualJustOne() {
        return (this.mongoVirtualJustOne_b);
    }
    getMongoVirtualName() {
        return (this.mongoVirtualName_s);
    }
    getMongoVirtualRef() {
        return (this.mongoVirtualRef_s);
    }
    getRelationship() {
        return (this.relationshipBase);
    }
    getTypeScriptAddItemMethodName() {
        return (this.typeScriptAddItemMethodName_s);
    }
    /**
     * Returns the getterMethodName if set, otherwise returns the `get${attributeName}` where the first character of attributeName is upper case.
     * @returns
     */
    getTypeScriptGetterMethodName() {
        let tsName_s = this.getTypeScriptAttributeName();
        if (tsName_s.indexOf("ActiveOrganization") > -1) {
            let noop_b = false;
        }
        if (this.typeScriptGetterMethodName_s !== "") {
            return (this.typeScriptGetterMethodName_s);
        }
        return ("get" + JsonApiUtils_1.JsonApiUtils.firstCharToUpperCase(this.typeScriptAttributeName_s));
    }
    /**
     * Returns the setterMethodName if set, otherwise returns the `set${attributeName}` where the first character of attributeName is upper case.
     * @returns
     */
    getTypeScriptSetterMethodName() {
        if (this.typeScriptSetterMethodName_s !== "") {
            return (this.typeScriptSetterMethodName_s);
        }
        return ("set" + JsonApiUtils_1.JsonApiUtils.firstCharToUpperCase(this.typeScriptAttributeName_s));
    }
    // /**
    //  * Returns the typeScriptAttributeName if set, otherwise returns the attributeName.
    //  * @returns 
    //  */
    //  public getTypeScriptAttributeName(): string {
    //     if(this.typeScriptAttributeName_s !== "") {
    //         return(this.typeScriptAttributeName_s);
    //     }
    //     return(this.attributeName_s);
    // }
    getUIDataType() {
        return (this.uiDataType);
    }
    getUIDefaultLabel() {
        return (this.uiDefaultLabel_s);
    }
    getUII18nKey() {
        return (this.uiI18nKey_s);
    }
    /**
     * If true show UI attribute
     * @returns
     */
    getUIIsVisible() {
        return (this.uiIsVisible_b);
    }
    getUIViewOrder() {
        return (this.uiViewOrder_i);
    }
    getUIUUID() {
        return (this.uiUUID_s);
    }
    getUUID() {
        return (this.uuid_s);
    }
    getValidations() {
        return (this.typeScriptValidations_ary);
    }
    getValidator() {
        return (this.zodValidator);
    }
    getVariableType() {
        return (this.variableType);
    }
    isValid(value_any) {
        let isValid_b = false;
        let javaScriptRegExValidation_s = this.getJavaScriptRegExValidation();
        let value_s = "";
        if ((this.dataType !== null)
            && (value_any !== undefined)
            && (javaScriptRegExValidation_s !== null)
            && (javaScriptRegExValidation_s !== "")) {
            switch (this.dataType) {
                case DataType_1.DataType.ID:
                case DataType_1.DataType.STRING:
                    value_s = value_any;
                    // eslint-disable-next-line
                    let regEx = new RegExp(javaScriptRegExValidation_s);
                    isValid_b = regEx.test(value_s);
                    break;
            }
        }
        return (isValid_b);
    }
    setAddListItemMethodName(addListItemMethodName_s) {
        this.addListItemMethodName_s = addListItemMethodName_s;
        return (this);
    }
    /**
     * This is also the singular name of the attribute.
     * @param addListItemMethodParameterName_s
     * @returns
     */
    setAddListItemMethodParameterName(addListItemMethodParameterName_s) {
        this.addListItemMethodParameterName_s = addListItemMethodParameterName_s;
        return (this);
    }
    setCallsSuperMethod(callsSuperMethod) {
        this.callsSuperMethod_b = callsSuperMethod;
        return (this);
    }
    setComment(comment_s) {
        this.comment_s = comment_s;
        return (this);
    }
    /**
     * The MongoDB data attribute name.
     */
    setMongoAttributeName(mongoAttributeName_s) {
        this.mongoAttributeName_s = mongoAttributeName_s;
        return (this);
    }
    setMutatedFlagAttributeUUID(mutatedFlagAttributeUUID_s) {
        this.mutatedFlagAttributeUUID_s = mutatedFlagAttributeUUID_s;
        return (this);
    }
    setDataType(dataType) {
        this.dataType = dataType;
        return (this);
    }
    setDefaultValueAsString(defaultValueAsString_s) {
        this.defaultValueAsString_s = defaultValueAsString_s;
        return (this);
    }
    setForeignField(foreignField_s) {
        this.foreignField_s = foreignField_s;
        return (this);
    }
    /**
     * Identifies the foreign reference for a relationship.
     * @param foreignRefEntityNamespace_s
     * @returns
     */
    setForeignRefEntityNamespace(foreignRefEntityNamespace_s) {
        this.foreignRefEntityNamespace_s = foreignRefEntityNamespace_s;
        return (this);
    }
    setIsFlaggedIfMutated(flagIfMutated_b) {
        this.flagIfMutated_b = flagIfMutated_b;
        return (this);
    }
    /**
     * If true, allow a Mongo Reference Array to have duplicates. If false do not allow duplicates.
     * @returns
     */
    setMongoRefArrayAllowDuplicate(mongoAllowRefArrayDuplicate) {
        this.mongoAllowRefArrayDuplicate_b = mongoAllowRefArrayDuplicate;
        return (this);
    }
    setMongoIsIndexed(isIndexed) {
        this.isMongoAttributeIndexed_b = isIndexed;
        return (this);
    }
    setMongoIsPersistable(isPersistable_b) {
        this.isMongoPersistable_b = isPersistable_b;
        return (this);
    }
    setMongoIsRequired(isRequired) {
        this.isMongoRequired_b = isRequired;
        return (this);
    }
    setOmitClassVariable(omitClassVariable_b) {
        this.omitClassVariable_b = omitClassVariable_b;
        return (this);
    }
    /**
     * All updates will be included in a History Collection;
     */
    setIncludeInHistory(includeInHistory) {
        this.includeInHistory_b = includeInHistory;
        return (this);
    }
    /**
     * Prevent the Attribute data from being part of a Response to an HTTP client.
     */
    setIsSecure(isSecure) {
        this.isSecure_b = isSecure;
        return (this);
    }
    setIsMongoVirtualArrayForeignField(isMongoVirtualArrayForeignField) {
        this.isMongoVirtualArrayForeignField_b = isMongoVirtualArrayForeignField;
        return (this);
    }
    setIsMongoVirtualArrayJustOne(isMongoVirtualArrayJustOne) {
        this.isMongoVirtualArrayJustOne_b = isMongoVirtualArrayJustOne;
        return (this);
    }
    /**
     * Identifies if the attribute is to be part of a TypeAlias definition.
     * @returns
     */
    setIsTypeAlias(isTypeAlias) {
        this.isTypeAlias_b = isTypeAlias;
        return (this);
    }
    /**
     * Identifies if the attribute is optional as part of a TypeAlias definition.
     * @returns
     */
    setIsTypeAliasOptional(isTypeAliasOptional) {
        this.isTypeAliasOptional_b = isTypeAliasOptional;
        return (this);
    }
    setJavaScriptRegExValidation(javaScriptRegExValidation_s) {
        this.javaScriptRegExValidation_s = javaScriptRegExValidation_s;
        return (this);
    }
    setJsonApiPropertyType(jsonApiPropertyType) {
        this.jsonApiPropertyType = jsonApiPropertyType;
        return (this);
    }
    setJsonAttributeName(jsonAttributeName) {
        this.jsonAttributeName_s = jsonAttributeName;
        return (this);
    }
    setIsSystem(isSystem_b) {
        this.isSystem_b = isSystem_b;
        return (this);
    }
    setMongoIsUnique(isUnique) {
        this.mongoIsUnique_b = isUnique;
        return (this);
    }
    setTypeScriptAddItemMethodName(typeScriptAddItemMethodName) {
        this.typeScriptAddItemMethodName_s = typeScriptAddItemMethodName;
        return (this);
    }
    setMongoVirtualForeignField(mongoVirtualForeignField) {
        this.mongoVirtualForeignField_s = mongoVirtualForeignField;
        return (this);
    }
    setMongoVirtualLocalField(mongoVirtualLocalField) {
        this.mongoVirtualLocalField_s = mongoVirtualLocalField;
        return (this);
    }
    setMongoVirtualJustOne(mongoVirtualJustOne) {
        this.mongoVirtualJustOne_b = mongoVirtualJustOne;
        return (this);
    }
    setMongoVirtualName(mongoVirtualName) {
        this.mongoVirtualName_s = mongoVirtualName;
        return (this);
    }
    setMongoVirtualRef(mongoVirtualRef) {
        this.mongoVirtualRef_s = mongoVirtualRef;
        return (this);
    }
    setTypeScriptAttributeName(attributeName) {
        if (attributeName.indexOf("__") > -1) {
            let noop = 0;
        }
        this.typeScriptAttributeName_s = attributeName;
        return (this);
    }
    setTypeScriptGetterMethodName(getterMethodName) {
        if (getterMethodName.indexOf("getIs") > -1) {
            let noop_b = false;
        }
        this.typeScriptGetterMethodName_s = getterMethodName;
        return (this);
    }
    setTypeScriptSetterMethodName(setterMethodName) {
        this.typeScriptSetterMethodName_s = setterMethodName;
        return (this);
    }
    // public setTypeScriptAttributeName(typeScriptAttributeName_s: string): Attribute {
    //     this.typeScriptAttributeName_s = typeScriptAttributeName_s;
    //     return(this);
    // }
    setUIDataType(uiDataType) {
        this.uiDataType = uiDataType;
        return (this);
    }
    setUIDefaultLabel(uiDefaultLabel_s) {
        this.uiDefaultLabel_s = uiDefaultLabel_s;
        return (this);
    }
    setUII18nKey(uiI18nKey_s) {
        this.uiI18nKey_s = uiI18nKey_s;
        return (this);
    }
    /**
     * If true show UI attribute
     * @returns
     */
    setUIIsVisible(uiIsVisible_b) {
        this.uiIsVisible_b = uiIsVisible_b;
        return (this);
    }
    setUIViewOrder(uiViewOrder_i) {
        this.uiViewOrder_i = uiViewOrder_i;
        return (this);
    }
    setUUID(uuid_s) {
        this.uuid_s = uuid_s;
        return (this);
    }
    setUIUUID(uiUUID_s) {
        this.uiUUID_s = uiUUID_s;
        return (this);
    }
    setValidator(zodValidator) {
        this.zodValidator = zodValidator;
        return (this);
    }
    setVariableType(p) {
        if (p) {
            this.variableType = p.variableType;
        }
        return (this);
    }
}
exports.Attribute = Attribute;
//# sourceMappingURL=Attribute.js.map