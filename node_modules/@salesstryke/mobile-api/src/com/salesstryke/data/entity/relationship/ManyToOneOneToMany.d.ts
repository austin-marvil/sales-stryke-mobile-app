import { RelationshipBase } from "./RelationshipBase";
export declare class ManyToOneOneToMany extends RelationshipBase {
    private manyEntityNamespace_s;
    private manyEntityForeignKeyAttributeName_s;
    private manyToOneEntityAttributeName_s;
    private oneEntityNamespace_s;
    private oneToManyEntityArrayAttributeName_s;
    private oneVirtualAttributeName_s;
    private onePrimaryKeyAttributeName_s;
    constructor();
    getHashCode(): number;
    /**
     * The Entity on the Many side of a OneToMany or a ManyToOne data relationship.
     * @returns
     */
    getManyEntityNamespace(): string | null;
    /**
     * The Many Entity Attribute that relates to the One Entity Attribute that defines the ManyToOne or OneToMany relationship.
     * @returns
     */
    getManyEntityForiegnKeyAttributeName(): string | null;
    /**
     * DELETE THIS
     * @returns
     */
    getManyToOneEntityAttributeName(): string | null;
    /**
     * The Entity on the One side of a OneToMany or a ManyToOne data relationship.
     * @returns
     */
    getOneEntityNamespace(): string | null;
    /**
     * This is a Mongo Virtual. If the values exists, a Mongo Virtual is added to the One side of a ManyToOne or a OneToMany with
     * the name of the virtual corresponding to an Array of the Many Entity being accessible one the One Entity.
     * @returns
     */
    getOneVirtualAttributeName(): string | null;
    getOneToManyEntityArrayAttributeName(): string | null;
    getOneEntityAttributeName(): string | null;
    setManyEntityNamespace(manyEntityTypeNamespace_s: string): ManyToOneOneToMany;
    setManyForeignKeyAttributeName(manyForeignKeyAttributeName_s: string): ManyToOneOneToMany;
    setOneEntityNamespace(oneEntityTypeNamespace_s: string): ManyToOneOneToMany;
    /**
     * The MongoVirtualName is of type ManyEntityNamespace
     * @param oneMongoVirtualName_s
     * @returns
     */
    setOneMongoVirtualName(oneMongoVirtualName_s: string): ManyToOneOneToMany;
    setOneToManyEntityArrayAttributeName(oneToManyEntityArrayAttributeName_s: string): ManyToOneOneToMany;
    setOnePrimaryKeyAttributeName(onePrimaryKeyAttributeName_s: string): ManyToOneOneToMany;
    setRelationshipUUID(relationshipUUID_s: string): ManyToOneOneToMany;
}
