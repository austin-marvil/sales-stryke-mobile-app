import { EnumBase } from "../../lang/EnumBase";
export declare class DataType extends EnumBase<DataType> {
    static BOOLEAN: DataType;
    static CURRENCY: DataType;
    static DATE: DataType;
    static FLOAT: DataType;
    static FORIEGN_KEY: DataType;
    static ID: DataType;
    static INTEGER: DataType;
    /**
     * For a JsonApi, a setter method will take in a JSON object, JSON.stringify it then that is used as the value.
     * When using a getter method, the Json string will turned into a JSON object using JSON.parse
     */
    static JSON_STRING: DataType;
    static NUMBER: DataType;
    static MANY_TO_MANY: DataType;
    static MANY_TO_ONE: DataType;
    /**
     * logically a ManyToOne
     */
    static MONGO_REF: DataType;
    /**
     * Logicall a ManyToMany, Holds an Array of ObjectId's.
     */
    static MONGO_REF_ARRAY: DataType;
    /**
     * logically a OneToMany
     */
    static MONGO_VIRTUAL_ARRAY: DataType;
    /**
     * for record type
     */
    static ONE_TO_MANY: DataType;
    static REAL: DataType;
    /**
     * To prevent data from getting out of the system.
     */
    static SECURE_STRING: DataType;
    static STRING: DataType;
    private mongooseSchemaType;
    private typeScriptType;
    protected constructor(p: {
        name: string;
        mongooseSchemaType: string;
        typeScriptType: string | null;
    });
    getMongooseSchemaType(): string;
    getTypeScriptType(): string | null;
}
