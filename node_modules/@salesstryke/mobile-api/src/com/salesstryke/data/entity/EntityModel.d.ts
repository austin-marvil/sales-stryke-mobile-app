import { EntityType } from "./EntityType";
import { Attribute } from "./Attribute";
import { RelationshipBase } from "./relationship/RelationshipBase";
import { Import } from "./Import";
export declare class EntityModel {
    /**
     * All the Entity Attributes plus all 'extends' Entity Attributes.
     */
    private allAttributes_ary;
    /**
     * Identifies if this type of entity is allowed to be cascade deleted.
     */
    private allowCascadeDelete_b;
    /**
     * This is the crud @DAsyncAuthorization("<uuid>>", "<short description>")
     */
    private crudCreateAuthorizationUUID_s;
    private crudOverWriteSourceCode_b;
    private dataModelName_s;
    /**
     * The Attributes for the Entity. If the Entity extends another class, these are the Attributes
     * that are in the child class, all other Attributes are in the extends_em EntityModel.
     */
    private entityAttributes_ary;
    private entityType;
    private extends_em;
    private imports;
    /**
     * All updates will be included in a History Collection;
     */
    private includeInHistory_b;
    private isOrganizationRefRequired_b;
    /**
     * When saving data, identifies if able to update child data.
     * USStates are NOT graph updateable.
     */
    private isGraphUpdateable_b;
    /**
     * A secure entity does not allow direct HTTPMethod calls.
     */
    private isSecure_b;
    private relationship_ary;
    private namespace_s;
    private doPack_b;
    private uuid_s;
    constructor();
    addImport(p: {
        import: Import;
    }): EntityModel;
    /**
     * Identifies if this type of entity is allowed to be cascade deleted.
     */
    getAllowCascadeDelete(): boolean;
    getImports(): Array<Import>;
    /**
     * All updates will be included in a History Collection;
     */
    getIncludeInHistory(): boolean;
    getIsOrganizationRefRequired(): boolean;
    /**
     * A secure entity does not allow direct HTTPMethod calls.
     */
    getIsSecure(): boolean;
    addEntityAttribute(attribute: Attribute, mutatedFlagAttributeUUID_s?: string | null): EntityModel;
    /**
     *
     */
    doPack(): void;
    /**
     * Clears ONLY the Attributes that are unique to the Entity. Does not clear Attributes for the extends Entity.
     * @returns
     */
    clearEntityAttributes(): EntityModel;
    /**
     * All Entity and inherited Attributes.
     * @returns
     */
    getAllAttributes(): Array<Attribute>;
    /**
     * The <simpleName>Crud @DAsyncAuthorization("<uuid>>", "<short description>")
     * @returns
     */
    getCrudCreateAuthorizationUUID(): string | null;
    /**
     *
     * @returns
     */
    getCrudOverWriteSourceCode(): boolean;
    /**
     * The Attributes the are specifically defined for the Entity, does not include inherited Attributes.
     * @returns
     */
    getEntityAttributes(): Array<Attribute>;
    getDataModelName(): string;
    getEntityType(): EntityType;
    getExtends(): EntityModel | null;
    getIsGraphUpdateable(): boolean;
    getNamespace(): string;
    getRelationships(): Array<RelationshipBase>;
    getUUID(): string;
    /**
     * Identifies if this type of entity is allowed to be cascade deleted.
     */
    setAllowCascadeDelete(allowCascadeDelete_b: boolean): EntityModel;
    /**
     * The <simpleName>Crud @DAsyncAuthorization("<uuid>>", "<short description>")
     * @returns
     */
    setCrudCreateAuthorizationUUID(createCrudAuthorizationUUID_s: string): EntityModel;
    /**
     * If true will generate and overwrite the crud source code. If false, will generate the code and write the file with a .txt extension.
     * @param crudOverWriteSourceCode_b
     * @returns
     */
    setCrudOverWriteSourceCode(crudOverWriteSourceCode_b: boolean): EntityModel;
    setDataModelName(dataModelName: string): EntityModel;
    setEntityType(entityType: EntityType): EntityModel;
    setExtends(extends_em: EntityModel): EntityModel;
    /**
     * All updates will be included in a History Collection;
     */
    setIncludeInHistory(includeInHistory: boolean): EntityModel;
    setIsOrganizationRefRequired(isOrganizationRefRequired_b: boolean): EntityModel;
    setIsGraphUpdateable(isGraphUpdateable_b: boolean): EntityModel;
    setIsSecure(isSecure_b: boolean): EntityModel;
    setNamespace(modelName: string): EntityModel;
    setUUID(uuid_s: string): EntityModel;
}
