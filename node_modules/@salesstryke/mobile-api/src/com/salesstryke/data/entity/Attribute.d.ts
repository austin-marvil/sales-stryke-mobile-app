import { DataType } from "./DataType";
import { JsonApiPropertyType } from "../../jsonApi/JsonApiPropertyType";
import { RelationshipBase } from "./relationship/RelationshipBase";
import { UIDataType } from "./UIDataType";
import { TypeReference } from "./TypeReference";
import { ValidationBase } from "../../validation/ValidationBase";
import { ZodBoolean, ZodDate, ZodNumber, ZodString } from 'zod';
export declare class Attribute {
    private addListItemMethodName_s;
    private addListItemMethodParameterName_s;
    private callsSuperMethod_b;
    private dataType;
    private defaultValueAsString_s;
    private flagIfMutated_b;
    /**
     * All updates will be included in a History Collection;
     */
    private includeInHistory_b;
    private typeScriptGetterMethodName_s;
    private mongoAllowRefArrayDuplicate_b;
    private isMongoAttributeIndexed_b;
    private isMongoPersistable_b;
    private isMongoRequired_b;
    private mongoVirtualForeignField_s;
    private mongoVirtualLocalField_s;
    private mongoVirtualJustOne_b;
    private mongoVirtualName_s;
    private mongoVirtualRef_s;
    /**
     * Identifies the virtual array attribute.
     *
     * The attribute is not a direct persistable, it is a virtual attribute.
     *
     * Is the foreignField in:
     *
     * schemaName.virtual('virtualArray', {
     *   ref          : 'VirtualArrayModel',         // The model to use for populating the virtual
     *   localField   : '_id',                       // The local field used for matching documents in the target model
     *   foreignField : 'virtualArrayAttributeName'  // The field in the local model that references the target model
     * });
     */
    private isMongoVirtualArrayForeignField_b;
    private isMongoVirtualArrayJustOne_b;
    /**
     * DELETE THIS!!!!
     * If this is an input Attribute, the mutatedFlagAttributeUUID with identify the attribute that
     * hold the mutated status.
     */
    private mutatedFlagAttributeUUID_s;
    /**
     * Prevent the Attribute data from being part of a Response to an HTTP client.
     */
    private isSecure_b;
    /**
     * If isSystem, variable names and method names will have a leading underscore.
     * Example:
     *      foriegnKey:
     *
     *          private _foriegnKey_s: string | null = null;
     *
     *          public _getForiegnKey(): string | null {
     *              return(...);
     *          }
     *
     */
    private isSystem_b;
    private isTypeAlias_b;
    private isTypeAliasOptional_b;
    private javaScriptRegExValidation_s;
    private jsonApiPropertyType;
    private jsonAttributeName_s;
    private comment_s;
    private mongoAttributeName_s;
    private mongoIsUnique_b;
    private omitClassVariable_b;
    private foreignRefEntityNamespace_s;
    private foreignField_s;
    private relationshipBase;
    private typeReference;
    private typeScriptAttributeName_s;
    private typeScriptSetterMethodName_s;
    private typeScriptAddItemMethodName_s;
    private uiDefaultLabel_s;
    private uiDataType;
    private uiI18nKey_s;
    /**
     * If true show UI attribute
     */
    private uiIsVisible_b;
    /**
     * -1 indicates no view order set
     */
    private uiViewOrder_i;
    private typeScriptValidations_ary;
    private zodValidator;
    /**
     * Useful for validating unique ui elements and easily showing the validation error to the correct component.
     */
    private uiUUID_s;
    /**
     * Unique uuid for the Attribute.
     */
    private uuid_s;
    private variableType;
    addTypeScriptValidation(validation: ValidationBase): Attribute;
    getAddListItemMethodName(): string;
    getAddListItemMethodParameterName(): string;
    getCallsSuperMethod(): boolean;
    /**
     * Returns the dataModelAttributeName if set, otherwise returns the attributeName.
     * @returns
     */
    getMongoAttributeName(): string;
    getMutatedFlagAttributeUUID(): string | null;
    /**
     * Used for relationships: ManyToOne, OneToMany, etc. For when there is both a class getter value and DataModelGetter in the same attribute.
     * @returns
     */
    getDataModelGetterMethodName(): string;
    getDataModelSetterMethodName(): string;
    getDataType(): DataType | null;
    /**
     *
     * @returns
     */
    getDefaultValueAsString(): string | null;
    getForeignField(): string | null;
    getIsFlaggedIfMutated(): boolean;
    /**
     * Prevent the Attribute data from being part of a Response to an HTTP client.
     */
    getIsSecure(): boolean;
    getIsSystem(): boolean;
    /**
     * Identifies if the attribute is to be part of a TypeAlias definition.
     * @returns
     */
    getIsTypeAlias(): boolean;
    /**
     * Identifies if the attribute is optional as part of a TypeAlias definition.
     * @returns
     */
    getIsTypeAliasOptional(): boolean;
    getTypeScriptAttributeName(): string;
    getMongoIsUnique(): boolean;
    /**
     * If the class variable is omitted, it indicates that it exists in a parent class.
     * @returns
     */
    getOmitClassVariable(): boolean;
    getJavaScriptRegExValidation(): string;
    getJsonApiPropertyType(): JsonApiPropertyType | null;
    /**
     * Returns the jsonAttributeName if set, otherwise returns the attributeName.
     * @returns string
     */
    getJsonAttributeName(): string;
    getComment(): string;
    /**
     * If true, allow a Mongo Reference Array to have duplicates. If false do not allow duplicates.
     * @returns
     */
    getMongoRefArrayAllowDuplicate(): boolean;
    getIsMongoAttributeIndexed(): boolean;
    getIsMongoPersistable(): boolean;
    getIsMongoRequired(): boolean;
    getForeignRefEntityNamespace(): string | null;
    getIsMongoVirtualArrayForeignField(): boolean;
    getIsMongoVirtualArrayJustOne(): boolean;
    getMongoVirtualForeignField(): string | null;
    getMongoVirtualLocalField(): string | null;
    getMongoVirtualJustOne(): boolean;
    getMongoVirtualName(): string | null;
    getMongoVirtualRef(): string | null;
    getRelationship(): RelationshipBase | null;
    getTypeScriptAddItemMethodName(): string | null;
    /**
     * Returns the getterMethodName if set, otherwise returns the `get${attributeName}` where the first character of attributeName is upper case.
     * @returns
     */
    getTypeScriptGetterMethodName(): string;
    /**
     * Returns the setterMethodName if set, otherwise returns the `set${attributeName}` where the first character of attributeName is upper case.
     * @returns
     */
    getTypeScriptSetterMethodName(): string;
    getUIDataType(): UIDataType | null;
    getUIDefaultLabel(): string | null;
    getUII18nKey(): string | null;
    /**
     * If true show UI attribute
     * @returns
     */
    getUIIsVisible(): boolean;
    getUIViewOrder(): number;
    getUIUUID(): string;
    getUUID(): string;
    getValidations(): Array<ValidationBase>;
    getValidator(): ZodBoolean | ZodDate | ZodNumber | ZodString | undefined;
    getVariableType(): DataType | TypeReference | null;
    isValid(value_any: any): boolean;
    setAddListItemMethodName(addListItemMethodName_s: string): Attribute;
    /**
     * This is also the singular name of the attribute.
     * @param addListItemMethodParameterName_s
     * @returns
     */
    setAddListItemMethodParameterName(addListItemMethodParameterName_s: string): Attribute;
    setCallsSuperMethod(callsSuperMethod: boolean): Attribute;
    setComment(comment_s: string): Attribute;
    /**
     * The MongoDB data attribute name.
     */
    setMongoAttributeName(mongoAttributeName_s: string): Attribute;
    setMutatedFlagAttributeUUID(mutatedFlagAttributeUUID_s: string): Attribute;
    setDataType(dataType: DataType): Attribute;
    setDefaultValueAsString(defaultValueAsString_s: string | null): Attribute;
    setForeignField(foreignField_s: string): Attribute;
    /**
     * Identifies the foreign reference for a relationship.
     * @param foreignRefEntityNamespace_s
     * @returns
     */
    setForeignRefEntityNamespace(foreignRefEntityNamespace_s: string): Attribute;
    setIsFlaggedIfMutated(flagIfMutated_b: boolean): Attribute;
    /**
     * If true, allow a Mongo Reference Array to have duplicates. If false do not allow duplicates.
     * @returns
     */
    setMongoRefArrayAllowDuplicate(mongoAllowRefArrayDuplicate: boolean): Attribute;
    setMongoIsIndexed(isIndexed: boolean): Attribute;
    setMongoIsPersistable(isPersistable_b: boolean): Attribute;
    setMongoIsRequired(isRequired: boolean): Attribute;
    setOmitClassVariable(omitClassVariable_b: boolean): Attribute;
    /**
     * All updates will be included in a History Collection;
     */
    setIncludeInHistory(includeInHistory: boolean): Attribute;
    /**
     * Prevent the Attribute data from being part of a Response to an HTTP client.
     */
    setIsSecure(isSecure: boolean): Attribute;
    setIsMongoVirtualArrayForeignField(isMongoVirtualArrayForeignField: boolean): Attribute;
    setIsMongoVirtualArrayJustOne(isMongoVirtualArrayJustOne: boolean): Attribute;
    /**
     * Identifies if the attribute is to be part of a TypeAlias definition.
     * @returns
     */
    setIsTypeAlias(isTypeAlias: boolean): Attribute;
    /**
     * Identifies if the attribute is optional as part of a TypeAlias definition.
     * @returns
     */
    setIsTypeAliasOptional(isTypeAliasOptional: boolean): Attribute;
    setJavaScriptRegExValidation(javaScriptRegExValidation_s: string): Attribute;
    setJsonApiPropertyType(jsonApiPropertyType: JsonApiPropertyType): Attribute;
    setJsonAttributeName(jsonAttributeName: string): Attribute;
    setIsSystem(isSystem_b: boolean): Attribute;
    setMongoIsUnique(isUnique: boolean): Attribute;
    setTypeScriptAddItemMethodName(typeScriptAddItemMethodName: string): Attribute;
    setMongoVirtualForeignField(mongoVirtualForeignField: string): Attribute;
    setMongoVirtualLocalField(mongoVirtualLocalField: string): Attribute;
    setMongoVirtualJustOne(mongoVirtualJustOne: boolean): Attribute;
    setMongoVirtualName(mongoVirtualName: string): Attribute;
    setMongoVirtualRef(mongoVirtualRef: string): Attribute;
    setTypeScriptAttributeName(attributeName: string): Attribute;
    setTypeScriptGetterMethodName(getterMethodName: string): Attribute;
    setTypeScriptSetterMethodName(setterMethodName: string): Attribute;
    setUIDataType(uiDataType: UIDataType | null): Attribute;
    setUIDefaultLabel(uiDefaultLabel_s: string): Attribute;
    setUII18nKey(uiI18nKey_s: string): Attribute;
    /**
     * If true show UI attribute
     * @returns
     */
    setUIIsVisible(uiIsVisible_b: boolean): Attribute;
    setUIViewOrder(uiViewOrder_i: number): Attribute;
    setUUID(uuid_s: string): Attribute;
    setUIUUID(uiUUID_s: string): Attribute;
    setValidator(zodValidator: ZodBoolean | ZodDate | ZodNumber | ZodString | undefined): Attribute;
    setVariableType(p: {
        variableType: DataType | TypeReference | null;
    }): Attribute;
}
