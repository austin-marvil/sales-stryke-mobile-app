"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityBase = void 0;
const DataType_1 = require("./DataType");
const Attribute_1 = require("./Attribute");
const EntityModel_1 = require("./EntityModel");
const JsonApiPropertyType_1 = require("../../jsonApi/JsonApiPropertyType");
const StringUtils_1 = require("../../utils/StringUtils");
const EntityType_1 = require("./EntityType");
const Organization_1 = require("../../entity/classes/persistable/Organization");
class EntityBase {
    constructor() {
        this.addInitializationDataKeyAttribute_b = false;
        this.addPersistableAttributes_b = false;
        this.doPack_b = true;
        this.doPostInit = true;
        this.entityType = EntityType_1.EntityType.JSONAPI;
        //private extends_em:                             EntityModel | null  = null;
        this.isOrganizationRefRequired_b = false;
        this.entityModel = new EntityModel_1.EntityModel();
    }
    addOrganizationRefAttribute() {
        let dataModelName_s = null;
        let mongoDataModelName_s = Organization_1.Organization.metaDataForOrganization.mongDataModeName;
        if (mongoDataModelName_s !== null) {
            dataModelName_s = EntityBase.organizationDataModelRefName; //`${StringUtils.firstCharToLowerCase(mongoDataModelName_s)}Ref`;
            this.getEntityModel().setIsOrganizationRefRequired(true);
            this.getEntityModel().addEntityAttribute(new Attribute_1.Attribute()
                .setTypeScriptAttributeName(dataModelName_s)
                .setDataType(DataType_1.DataType.MONGO_REF)
                .setMongoIsPersistable(true)
                .setMongoIsIndexed(true)
                .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS)
                .setJsonAttributeName(dataModelName_s)
                .setMongoAttributeName(dataModelName_s)
                .setForeignRefEntityNamespace(Organization_1.Organization.metaDataForOrganization.namespace));
        }
        return (this);
    }
    // public getIncludesOrganization(): boolean {
    //     return(this.includeOrganizationRef_b);
    // }
    setIsOrganizationRefRequired(isOrganizationRefRequired_b) {
        this.isOrganizationRefRequired_b = isOrganizationRefRequired_b;
        return (this);
    }
    // public setAddInitializationDataKey(addInitializationDataKey_b: boolean): EntityBase {
    //     this.addInitializationDataKeyAttribute_b = addInitializationDataKey_b;
    //     return(this);
    // }
    /**
     * DEPRECATED: REMOVE
     * @param addPersistableAttributes_b
     * @returns
     */
    setAddPersistableAttributes(addPersistableAttributes_b) {
        this.addPersistableAttributes_b = addPersistableAttributes_b;
        return (this);
    }
    setExtends(extends_em) {
        this.entityModel.setExtends(extends_em);
        return (this);
    }
    doPack() {
        if (this.doPack_b) {
            // if(this.getEntityModel().getNamespace() === "packages.common.com.salesstryke.entity.classes.record.Authentication") {
            //     let noop_b: boolean = false;
            // }
            // if(this.getEntityModel().getEntityType() === EntityType.PERSISTABLE) {
            //     this.setAddPersistableAttributes(true);
            // }
            // this.postInit();
            // if(this.getEntityModel().getNamespace() !== null) {
            //     this.addJsonType();
            // }
            // if(this.addPersistableAttributes_b) {
            //     this.addPersistableAttributes();
            //     this.addInitializedDataKeyAttribute();
            // }
            let entityAttributes_ary = this.getEntityModel().getEntityAttributes();
            entityAttributes_ary.forEach((attribute) => {
                this.entityModel.getAllAttributes().push(attribute);
            });
            this.getEntityModel().doPack();
            this.doPack_b = false;
        }
    }
    getEntityModel() {
        return (this.entityModel);
    }
    setEntityType(entityType) {
        this.entityType = entityType;
        return (this);
    }
}
exports.EntityBase = EntityBase;
//private _entityState: Attribute | null          = null;
/**
 * // TODO: REMOVE THIS, use: organizationEntityModelAttributeName
 * For any Persistable that requires an organizationRef Schema name, use this value.
 */
EntityBase.organizationDataModelRefName = `${StringUtils_1.StringUtils.firstCharToLowerCase(Organization_1.Organization.metaDataForOrganization.mongDataModeName)}Ref`;
EntityBase.organizationEntityModelAttributeName = 'organization';
//# sourceMappingURL=EntityBase.js.map