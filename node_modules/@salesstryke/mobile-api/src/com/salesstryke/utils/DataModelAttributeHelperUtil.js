"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataModelAttributeHelper = void 0;
const Attribute_1 = require("../data/entity/Attribute");
const DataType_1 = require("../data/entity/DataType");
const TypeReference_1 = require("../data/entity/TypeReference");
const UIDataType_1 = require("../data/entity/UIDataType");
const JsonApiPropertyType_1 = require("../jsonApi/JsonApiPropertyType");
const StringUtils_1 = require("./StringUtils");
const IsBoolean_1 = require("./object/IsBoolean");
function getInterfaceBooleanOrDefault(p) {
    let return_b = p.default;
    if (p.value !== undefined && p.value !== null && (0, IsBoolean_1.default)(p.value)) {
        return_b = p.value;
    }
    return (return_b);
}
class AddToRelationship {
    constructor() {
        this.attributeName = "_isAddToRelationship";
        this.getterMethodName = "_getIsAddToRelationship";
        this.setterMethodName = "_setIsAddToRelationship";
    }
}
class CreatedDate {
    constructor() {
        this.attributeName = "createdDate";
        this.getterMethodName = "getCreatedDate";
        this.setterMethodName = "setCreatedDate";
    }
}
class RemoveFromRelationship {
    constructor() {
        this.attributeName = "_isRemoveFromRelationship";
        this.getterMethodName = "_getIsRemoveFromRelationship";
        this.setterMethodName = "_setIsRemoveFromRelationship";
    }
}
class EntityState {
    constructor() {
        this.attributeName = "_entityState";
        this.getterMethodName = "_getEntityState";
        this.setterMethodName = "_setEntityState";
    }
}
class InitializedDataKey {
    constructor() {
        this.attributeName = "_initializedDataKey";
        this.getterMethodName = "_getInitializedDataKey";
        this.setterMethodName = "_setInitializedDataKey";
    }
}
class JsonStateStr {
    constructor() {
        this.attributeName = "_jsonStateStr";
        this.getterMethodName = "_getJsonStateStr";
        this.setterMethodName = "_setJsonStateStr";
    }
}
class ModifiedDate {
    constructor() {
        this.attributeName = "modifiedDate";
        this.getterMethodName = "getModifiedDate";
        this.setterMethodName = "setModifiedDate";
    }
}
/**
 * ```
 * _relationshipPersistableType:
 * For relationships:
 *    MONGO_REF,
 *    MONGO_REF_ARRAY,
 *    MANY_TO_MANY,
 *    MANY_TO_ONE,
 *    ONE_TO_MANY,
 *    ONE_TO_ONE, identifies if the value is to be:
 *
 *    ATTACH         = 10:  identifies to attach an existing Entity by id to a MONGO_REF_ARRAY
 *    CREATE         = 20:  identifies to create a MONGO_REF is it does not contain an ObjectId.
 *    UPDATE         = 30:  identifies if the system is to update a MONGO_REF that is a member of an Entity.
 *    DETACH         = 40:  identifies to detach an existing Entity by id from a MONGO_REF_ARRY.
 *    DELETE         = 50:  identifies to delete a MONGO_REF if allowed.
 *    DELETE_CASCADE = 60:  identifies to cascase delete MONGO_REF items if allowed.
 * ```
 */
class RelationshipPersistableType {
    constructor() {
        this.attributeName = "_relationshipPersistableType"; // 1 - save, 2 - update, 3 - remove from relationship but not the database, 4 - remove from the database.
        this.getterMethodName = "_getRelationshipPersistableType";
        this.setterMethodName = "_setRelationshipPersistableType";
    }
}
class DataModelAttributeHelper {
    /**
     * _entityState : SystemAttribute
     * @param uuid_s
     * @returns
     */
    static getEntityState(uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setComment("CREATE, DELETE, UPDATE")
            .setDataType(DataType_1.DataType.STRING)
            .setIsSystem(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(DataModelAttributeHelper._entityState.attributeName)
            .setTypeScriptAttributeName(DataModelAttributeHelper._entityState.attributeName)
            .setTypeScriptGetterMethodName(DataModelAttributeHelper._entityState.getterMethodName)
            .setTypeScriptSetterMethodName(DataModelAttributeHelper._entityState.setterMethodName)
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     * The entity persistable type: CREATE, DELETE, UPDATE
     * @param iEntityPersistableType
     * @returns
     */
    static getEntityPersistableType(iEntityPersistableType) {
        let attribute = new Attribute_1.Attribute()
            .setComment("CREATE, DELETE, UPDATE")
            .setDataType(DataType_1.DataType.STRING)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(DataModelAttributeHelper._entityState.attributeName)
            .setMutatedFlagAttributeUUID(iEntityPersistableType.mutatedFlagAttributeUUID)
            .setTypeScriptAttributeName(DataModelAttributeHelper._entityState.attributeName)
            .setTypeScriptGetterMethodName(DataModelAttributeHelper._entityState.getterMethodName)
            .setTypeScriptSetterMethodName(DataModelAttributeHelper._entityState.setterMethodName)
            .setUUID(iEntityPersistableType.attributeUUID);
        return (attribute);
    }
    // _relationshipPersistableType
    // public static getRelationshipPersistableType(uuid_s: string): Attribute {
    //     let attribute: Attribute = new Attribute()     
    //         .setTypeScriptAttributeName("_idSetBySystem")
    //         .setComment("Indicates if the ID was set by the system and that the ID is used to create the documet.")
    //         .setDataType(DataType.BOOLEAN)
    //         .setIsSystem(true)
    //         .setTypeScriptGetterMethodName("_getIsIdSetBySystem")
    //         .setJsonApiPropertyType(JsonApiPropertyType.FIELD)
    //         .setJsonAttributeName("_setIsIdSetBySystem")
    //         .setTypeScriptSetterMethodName("_setIsIdSetBySystem")
    //         .setUUID(uuid_s);
    //     return(attribute);
    // }    
    /**
     * _idSetBySystem : SystemAttribute
     * @param uuid_s
     * @returns
     */
    static getIdSetBySystem(uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setTypeScriptAttributeName("_idSetBySystem")
            .setComment("Indicates if the ID was set by the system and that the ID is used to create the documet.")
            .setDataType(DataType_1.DataType.BOOLEAN)
            .setIsSystem(true)
            .setTypeScriptGetterMethodName("_getIsIdSetBySystem")
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName("_setIsIdSetBySystem")
            .setTypeScriptSetterMethodName("_setIsIdSetBySystem")
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     * _initializedDataKey : SystemAttribute
     * @param uuid_s
     * @returns
     */
    static getIntializedDataKey(uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setTypeScriptAttributeName(DataModelAttributeHelper._initializedDataKey.attributeName)
            .setMongoAttributeName(DataModelAttributeHelper._initializedDataKey.attributeName)
            .setDataType(DataType_1.DataType.STRING)
            .setIsFlaggedIfMutated(true)
            .setIsSystem(true)
            .setTypeScriptGetterMethodName(DataModelAttributeHelper._initializedDataKey.getterMethodName)
            .setTypeScriptSetterMethodName(DataModelAttributeHelper._initializedDataKey.setterMethodName)
            .setMongoIsIndexed(true)
            .setMongoIsPersistable(true)
            .setComment("This is a key that is used to initialize data one time. Example: setting the USState information.")
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(DataModelAttributeHelper._initializedDataKey.attributeName)
            .setUUID(uuid_s);
        return (attribute);
    }
    static getJsonStateStr(uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setComment("Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'")
            .setDataType(DataType_1.DataType.STRING)
            .setIsSystem(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(DataModelAttributeHelper._jsonState.attributeName)
            .setOmitClassVariable(true)
            .setTypeScriptAttributeName(DataModelAttributeHelper._jsonState.attributeName)
            .setTypeScriptGetterMethodName(DataModelAttributeHelper._jsonState.getterMethodName)
            .setTypeScriptSetterMethodName(DataModelAttributeHelper._jsonState.setterMethodName)
            .setUUID(uuid_s);
        return (attribute);
    }
    /*
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getAddToRelationship(
            "" // uuid
        ));
    */
    /**
     * Record: Indicates if a child record is to be added to a parent.
     * DataType.BOOLEAN
     *
     * @param uuid_s
     * @returns
     */
    static getAddToRelationship(uuid_s) {
        let attribute = DataModelAttributeHelper.getRecordBoolean(DataModelAttributeHelper.addToRelationship.attributeName, uuid_s)
            .setIsSystem(true)
            .setTypeScriptGetterMethodName(DataModelAttributeHelper.addToRelationship.getterMethodName)
            .setTypeScriptSetterMethodName(DataModelAttributeHelper.addToRelationship.setterMethodName)
            .setUIDataType(null);
        return (attribute);
    }
    /**
     * createdDate
     * @param uuid_s
     * @returns
     */
    static getCreatedDate(uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setTypeScriptAttributeName(this.createdDate.attributeName)
            .setDataType(DataType_1.DataType.DATE)
            .setMongoIsIndexed(true)
            .setMongoIsPersistable(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setUUID(uuid_s);
        return (attribute);
    }
    static getCreatedDate2(iCreatedTimestamp) {
        let attribute = new Attribute_1.Attribute()
            .setTypeScriptAttributeName(this.createdDate.attributeName)
            .setDataType(DataType_1.DataType.DATE)
            .setMongoIsIndexed(true)
            .setMongoIsPersistable(true)
            .setMutatedFlagAttributeUUID(iCreatedTimestamp.mutatedFlagAttributeUUID)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setUUID(iCreatedTimestamp.attributeUUID);
        return (attribute);
    }
    /**
     * id
     * @param uuid_s
     * @returns
     */
    static getId(uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setDataType(DataType_1.DataType.ID)
            .setMongoAttributeName("_id")
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.ID)
            .setJsonAttributeName("id")
            .setMongoIsPersistable(true)
            .setMongoIsRequired(false)
            .setTypeScriptAttributeName("id")
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     * ```
     * Persistable STRING
     *      attributeName:  string, required
     *      uuid:           string, required
     *      comment:        string, optional
     *
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.STRING,
     *      UIDataType.TEXT_FIELD
     * ```
     * @param uuid_s
     * @returns
     */
    /*
    DEPRECATED
    public static getPersistableJsonString(
        attributeName_s:    string,
        uuid_s:             string,
        comment_s:          string | null       = null,
        uiViewOrder_i:      number              = -1,
        uiDefaultLabel_s:   string | null       = null,
        uiDataType:         UIDataType | null   = null
    ): Attribute {

        let attribute: Attribute = new Attribute()
        .setComment(comment_s || '')
        .setDataType(DataType.JSON_STRING)
        .setIsFlaggedIfMutated(true)
        .setJsonApiPropertyType(JsonApiPropertyType.FIELD)
        .setJsonAttributeName(attributeName_s)
        .setMongoAttributeName(attributeName_s)
        .setMongoIsPersistable(true)
        .setMongoIsRequired(true)
        .setMongoIsIndexed(true)
        .setTypeScriptAttributeName(attributeName_s)
        .setUUID(uuid_s);

        if(uiViewOrder_i > -1) {
        attribute.setUIViewOrder(uiViewOrder_i);

        if(uiDataType === null) {
            uiDataType = UIDataType.TEXT_FIELD;
        }

        if(uiDataType !== null) {
            attribute.setUIDataType(uiDataType);
        }

        if(uiDefaultLabel_s === null) {
            uiDefaultLabel_s = StringUtils.firstCharToUpperCase(attributeName_s);
        }

        if(uiDefaultLabel_s !== null) {
            attribute.setUIDefaultLabel(uiDefaultLabel_s);
        }
        }

        return(attribute);

    }
    */
    /**
     * ```
     * defaults
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     *   isMongoIndexed      : true
     *   isMongoRequired     : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableJsonString2(p
    // attributeName_s:    string, 
    // uuid_s:             string,
    // comment_s:          string | null       = null
    ) {
        let attribute = new Attribute_1.Attribute()
            .setComment(p.comment || '')
            .setDataType(DataType_1.DataType.JSON_STRING)
            .setIsFlaggedIfMutated(true)
            .setIsTypeAlias(getInterfaceBooleanOrDefault({ value: p.isTypeAlias, default: true }))
            .setIsTypeAliasOptional(getInterfaceBooleanOrDefault({ value: p.isTypeAliasOptional, default: true }))
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(p.attributeName)
            .setMongoAttributeName(p.attributeName)
            .setMongoIsPersistable(true)
            .setMongoIsIndexed(getInterfaceBooleanOrDefault({ value: p.isMongoIndexed, default: true }))
            .setMongoIsRequired(getInterfaceBooleanOrDefault({ value: p.isMongoRequired, default: true }))
            .setTypeScriptAttributeName(p.attributeName)
            .setVariableType({ variableType: p.variableType })
            .setUUID(p.attributeUUID);
        if (p.validator) {
            attribute.setValidator(p.validator);
        }
        return (attribute);
    }
    // .setVariableType({ 
    //     variableType : new TypeReference({ 
    //         typeName : 'Array', 
    //         typeArguments : [ DataType.STRING ] 
    //     })
    // });
    /**
     * jsonType
     * @param uuid_s
     * @returns
     */
    static getJsonType(namespace_s, uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setTypeScriptAttributeName("jsonType")
            .setMongoAttributeName("jsonType")
            .setDataType(DataType_1.DataType.STRING)
            .setDefaultValueAsString(StringUtils_1.StringUtils.getAsQuotedString(namespace_s))
            .setIsSystem(true)
            .setTypeScriptGetterMethodName("getJsonType")
            .setTypeScriptSetterMethodName("setJsonType")
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.TYPE)
            .setJsonAttributeName("type")
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     * modifiedDate
     * @param uuid_s
     * @returns
     */
    static getModifiedDate(uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setComment("The modified date of the document")
            .setDataType(DataType_1.DataType.DATE)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setMongoIsIndexed(true)
            .setMongoIsPersistable(true)
            .setTypeScriptAttributeName(this.modifiedDate.attributeName)
            .setUUID(uuid_s);
        return (attribute);
    }
    // /**
    //  * _entityState : SystemAttribute
    //  * @param uuid_s 
    //  * @returns 
    //  */
    // public static getRelationShipPersistableType(uuid_s: string): Attribute {
    //     let attribute: Attribute = new Attribute()     
    //         .setComment("CREATE, DELETE, UPDATE")   
    //         .setCallsSuperMethod(true)
    //         .setDataType(DataType.STRING)
    //         .setJsonApiPropertyType(JsonApiPropertyType.FIELD)
    //         .setJsonAttributeName(DataModelAttributeHelper._relationshipPersistableType.attributeName)
    //         .setTypeScriptAttributeName(DataModelAttributeHelper._relationshipPersistableType.attributeName)
    //         .setTypeScriptGetterMethodName(DataModelAttributeHelper._relationshipPersistableType.getterMethodName)
    //         .setTypeScriptSetterMethodName(DataModelAttributeHelper._relationshipPersistableType.setterMethodName)
    //         .setUUID(uuid_s);
    //     return(attribute);
    // }
    /**
     * ```
     * type TGetMongoVirtualArrayAttribute =
     * {
     *     attributeName        :    string;
     *     attributeNameAsArray :    string;
     *     attributeNamespace   :    string;
     *     comment              :    string;
     *     virtualForeignField  :    string;
     *     virtualLocalField    :    string;
     *     virtualJustOne       :    boolean;
     *     virtualName          :    string;
     *     virtualRef           :    string;
     *     uuid                 :    string;
     * }
     * ```
     */
    static getMongoVirtualArrayAttribute(p) {
        let addListItemMethodName_s = `add${StringUtils_1.StringUtils.firstCharToUpperCase(p.attributeName)}`;
        let attribute = new Attribute_1.Attribute()
            .setAddListItemMethodName(addListItemMethodName_s)
            .setAddListItemMethodParameterName(p.attributeName)
            .setComment(p.comment || '')
            .setDataType(DataType_1.DataType.MONGO_VIRTUAL_ARRAY)
            .setForeignField(p.virtualForeignField)
            .setForeignRefEntityNamespace(p.attributeNamespace)
            .setMongoIsPersistable(true)
            .setIsFlaggedIfMutated(true)
            .setIsMongoVirtualArrayForeignField(true)
            .setIsMongoVirtualArrayJustOne(p.virtualJustOne)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS)
            .setMongoAttributeName(p.attributeName)
            .setMongoVirtualForeignField(p.virtualForeignField)
            .setMongoVirtualLocalField(p.virtualLocalField)
            .setMongoVirtualJustOne(p.virtualJustOne)
            .setMongoVirtualName(p.virtualName)
            .setMongoVirtualRef(p.virtualRef)
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.uuid);
        return (attribute);
    }
    static getRelationshipPersistableType(uuid_s) {
        let attribute = new Attribute_1.Attribute()
            .setCallsSuperMethod(true)
            .setComment("A system attribute to identify the relationship persisable type.")
            .setDataType(DataType_1.DataType.INTEGER)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setMongoIsIndexed(false)
            .setMongoIsPersistable(false)
            .setOmitClassVariable(true)
            .setTypeScriptAttributeName(this._relationshipPersistableType.attributeName)
            .setTypeScriptGetterMethodName(this._relationshipPersistableType.getterMethodName)
            .setTypeScriptSetterMethodName(this._relationshipPersistableType.setterMethodName)
            .setUUID(uuid_s);
        return (attribute);
    }
    static getRelationshipPersistableType2(p) {
        let attribute = new Attribute_1.Attribute()
            .setCallsSuperMethod(true)
            .setComment("A system attribute to identify the relationship persisable type.")
            .setDataType(DataType_1.DataType.INTEGER)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setMongoIsIndexed(false)
            .setMongoIsPersistable(false)
            .setOmitClassVariable(true)
            .setTypeScriptAttributeName(this._relationshipPersistableType.attributeName)
            .setTypeScriptGetterMethodName(this._relationshipPersistableType.getterMethodName)
            .setTypeScriptSetterMethodName(this._relationshipPersistableType.setterMethodName)
            .setUUID(p.uuid);
        return (attribute);
    }
    // public _setRelationshipPersistableType(relationshipPersistableType: number): JsonApiPersistableBase
    // {
    //     this._relationshipPersistableType = relationshipPersistableType;
    //     return(this);
    // }
    /**
     * ```
     * Persistable BOOLEAN
     *      attributeName:  string, required
     *      uuid:           string, required
     *      comment:        string, optional
     *
     * Defaults:
     *      DataType.BOOLEAN,
     *      UIDataType.CHECKBOX
     * ```
     * @param uuid_s
     * @returns
     */
    static getPersistableBoolean(attributeName_s, uuid_s, comment_s = null, uiViewOrder_i = -1, uiDataType = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || "")
            .setDataType(DataType_1.DataType.BOOLEAN)
            .setIncludeInHistory(true)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setMongoAttributeName(attributeName_s)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(true)
            .setMongoIsIndexed(true)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        if (uiViewOrder_i > -1) {
            attribute.setUIViewOrder(uiViewOrder_i);
            if (uiDataType === null) {
                uiDataType = UIDataType_1.UIDataType.CHECKBOX;
            }
            if (uiDataType !== null) {
                attribute.setUIDataType(uiDataType);
            }
        }
        return (attribute);
    }
    /**
     * ```
     * defaults:
     *   isMongoIndexed      : true
     *   isMongoRequired     : true
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableBoolean2(p) {
        let attribute = new Attribute_1.Attribute()
            .setComment(p.comment)
            .setDataType(DataType_1.DataType.BOOLEAN)
            .setIncludeInHistory(true)
            .setIsFlaggedIfMutated(true)
            .setIsTypeAlias(getInterfaceBooleanOrDefault({ value: p.isTypeAlias, default: true }))
            .setIsTypeAliasOptional(getInterfaceBooleanOrDefault({ value: p.isTypeAliasOptional, default: true }))
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(p.attributeName)
            .setMongoAttributeName(p.attributeName)
            .setMongoIsPersistable(true)
            .setMongoIsIndexed(getInterfaceBooleanOrDefault({ value: p.isMongoIndexed, default: true }))
            .setMongoIsRequired(getInterfaceBooleanOrDefault({ value: p.isMongoRequired, default: true }))
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.attributeUUID);
        return (attribute);
    }
    static getPersistableCurrency(attributeName_s, uuid_s, comment_s = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || "")
            .setDataType(DataType_1.DataType.CURRENCY)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setMongoAttributeName(attributeName_s)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(false)
            .setMongoIsIndexed(true)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     * ```
     * Persistable DATE
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     *      attributeName:  string, required
     *      uuid:           string, required
     *      comment:        string, optional
     *
     * Defaults:
     *      DataType.DATE
     * ```
     * @param uuid_s
     * @returns
     */
    static getPersistableDate(attributeName_s, uuid_s, comment_s = null, uiViewOrder_i = -1, uiDefaultLabel_s = null, uiDataType = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || '')
            .setDataType(DataType_1.DataType.DATE)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setMongoAttributeName(attributeName_s)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(false)
            .setMongoIsIndexed(true)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        if (uiViewOrder_i > -1) {
            attribute.setUIViewOrder(uiViewOrder_i);
            if (uiDataType === null) {
                uiDataType = UIDataType_1.UIDataType.TEXT_FIELD;
            }
            if (uiDataType !== null) {
                attribute.setUIDataType(uiDataType);
            }
            if (uiDefaultLabel_s === null) {
                uiDefaultLabel_s = StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s);
            }
            if (uiDefaultLabel_s !== null) {
                attribute.setUIDefaultLabel(uiDefaultLabel_s);
            }
        }
        return (attribute);
    }
    /**
     * ```
     * defaults:
     *   isMongoIndexed      : true
     *   isMongoRequired     : true
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableDate2(p) {
        let attribute = new Attribute_1.Attribute()
            .setComment(p.comment)
            .setDataType(DataType_1.DataType.DATE)
            .setIsFlaggedIfMutated(true)
            .setIsTypeAlias(getInterfaceBooleanOrDefault({ value: p.isTypeAlias, default: true }))
            .setIsTypeAliasOptional(getInterfaceBooleanOrDefault({ value: p.isTypeAliasOptional, default: true }))
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(p.attributeName)
            .setMongoAttributeName(p.attributeName)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(getInterfaceBooleanOrDefault({ value: p.isMongoRequired, default: true }))
            .setMongoIsIndexed(getInterfaceBooleanOrDefault({ value: p.isMongoIndexed, default: true }))
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.attributeUUID);
        if (p.validator) {
            attribute.setValidator(p.validator);
        }
        return (attribute);
    }
    static getPersistableInteger(attributeName_s, uuid_s, comment_s = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || "")
            .setDataType(DataType_1.DataType.INTEGER)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setMongoAttributeName(attributeName_s)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(false)
            .setMongoIsIndexed(true)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        return (attribute);
    }
    static getPersistableInteger2(p) {
        var _a;
        let attribute = new Attribute_1.Attribute()
            .setComment((_a = p.comment) !== null && _a !== void 0 ? _a : "")
            .setDataType(DataType_1.DataType.INTEGER)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(p.attributeName)
            .setMongoAttributeName(p.attributeName)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(false)
            .setMongoIsIndexed(true)
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.attributeUUID)
            .setIncludeInHistory(p.includeInHistory !== undefined ? p.includeInHistory : false);
        return (attribute);
    }
    /**
     * ```
     * defaults:
     *   isMongoIndexed   : true
     *   isMongoRequired  : false
     * ```
     * @param p
     * @returns
     */
    static getPersistableMongoRefArray(p) {
        let addName_s = `add${StringUtils_1.StringUtils.firstCharToUpperCase(p.attributeNameSingular)}`;
        let attribute = new Attribute_1.Attribute()
            .setAddListItemMethodName(addName_s)
            .setAddListItemMethodParameterName(p.attributeNameSingular)
            .setComment(p.comment || '')
            .setDataType(DataType_1.DataType.MONGO_REF_ARRAY)
            .setForeignRefEntityNamespace(p.foreignRefEntityNamespace)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS)
            .setJsonAttributeName(p.attributeName)
            .setMongoAttributeName(p.attributeName)
            .setMongoIsPersistable(true)
            .setMongoIsIndexed(getInterfaceBooleanOrDefault({ value: p.mongoIsIndexed, default: true }))
            .setMongoIsRequired(getInterfaceBooleanOrDefault({ value: p.mongoIsRequired, default: false }))
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.attributeUUID);
        return (attribute);
    }
    /*
        Example:

        this.getEntityModel().addEntityAttribute(
            DataModelAttributeHelper.getPersistableManyToOne(
                "organization",
                Organization.metaDataForOrganization.namespace,
                "",
                "The organization."
            )
            .setMongoAttributeName("organizationRef")
        );
    */
    /**
     * Persistable STRING
     * UIDataType is only added if uiViewOrder is greater than -1.
     * Mongo References by default are set as not required in the schema.
     *
     * Defaults:
     *      DataType.STRING,
     *      UIDataType.TEXT_FIELD
     *
     * @param uuid_s
     * @returns
     */
    static getPersistableMongoRef(attributeName_s, foreignRefEntityNamespace_s, uuid_s, comment_s = null, uiViewOrder_i = -1, uiDefaultLabel_s = null, uiDataType = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || "")
            .setDataType(DataType_1.DataType.MONGO_REF)
            .setForeignRefEntityNamespace(foreignRefEntityNamespace_s)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS)
            .setJsonAttributeName(attributeName_s)
            .setMongoAttributeName(attributeName_s)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(false)
            .setMongoIsIndexed(true)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        if (uiViewOrder_i > -1) {
            attribute.setUIViewOrder(uiViewOrder_i);
            if (uiDataType === null) {
                uiDataType = UIDataType_1.UIDataType.ENTITY;
            }
            if (uiDataType !== null) {
                attribute.setUIDataType(uiDataType);
            }
            if (uiDefaultLabel_s === null) {
                uiDefaultLabel_s = StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s);
            }
            if (uiDefaultLabel_s !== null) {
                attribute.setUIDefaultLabel(uiDefaultLabel_s);
            }
        }
        return (attribute);
    }
    /**
     * ```
     * defaults:
     *   isMongoIndexed   : false
     *   isMongoRequired  : false
     * ```
     * @param p
     * @returns
     */
    static getPersistableMongoRef2(p) {
        let attribute = new Attribute_1.Attribute()
            .setComment(p.comment)
            .setDataType(DataType_1.DataType.MONGO_REF)
            .setForeignRefEntityNamespace(p.foreignRefEntityNamespace)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS)
            .setJsonAttributeName(p.attributeName)
            .setMongoAttributeName(p.attributeName)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(getInterfaceBooleanOrDefault({ value: p.isMongoRequired, default: false }))
            .setMongoIsIndexed(getInterfaceBooleanOrDefault({ value: p.isMongoIndexed, default: false }))
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.attributeUUID);
        if (p.validator) {
            attribute.setValidator(p.validator);
        }
        return (attribute);
    }
    /**
     * Intended as a general JavaScript number.
     * @param attributeName_s
     * @param uuid_s
     * @param comment_s
     * @returns
     */
    static getPersistableNumber(attributeName_s, uuid_s, comment_s = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || "")
            .setDataType(DataType_1.DataType.REAL)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setMongoAttributeName(attributeName_s)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(false)
            .setMongoIsIndexed(true)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     * ```
     * defaults
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     *   mongoIsIndexed      : true
     *   mongoIsRequired     : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableNumber2(p) {
        let attribute = new Attribute_1.Attribute()
            .setComment(p.comment)
            .setDataType(DataType_1.DataType.REAL)
            .setIsFlaggedIfMutated(true)
            .setIsTypeAlias(getInterfaceBooleanOrDefault({ value: p.isTypeAlias, default: true }))
            .setIsTypeAliasOptional(getInterfaceBooleanOrDefault({ value: p.isTypeAliasOptional, default: true }))
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(p.attributeName)
            .setMongoAttributeName(p.attributeName)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(getInterfaceBooleanOrDefault({ value: p.isMongoRequired, default: true }))
            .setMongoIsIndexed(getInterfaceBooleanOrDefault({ value: p.isMongoIndexed, default: true }))
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.attributeUUID);
        if (p.validator) {
            attribute.setValidator(p.validator);
        }
        return (attribute);
    }
    /*
        Example:
         this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableOneToMany(
            "addresses",                            // attributeName
            "address",                              // attributeName as Singular
            Address.metaDataForAddress.namespace,   // foreignRefEntityNamespace
            "<uuid>",                               // uuid
            "The Employees first name.",            // comment
            1
        ));
    */
    /**
     * ```
     * OneToMany
     * attributeName_s:                string
     * attributeNameSingular_s:        string
     * foreignRefEntityNamespace_s:    string
     * foreignField_s:                 string
     * uuid_s:                         string
     * comment_s:                      string | null       = null
     * ```
     * @param attributeName_s
     * @param attributeNameSingular_s
     * @param foreignRefEntityNamespace_s
     * @param uuid_s
     * @param uiViewOrder_i
     * @param uiDefaultLabel_s
     * @param uiDataType
     * @returns
     */
    static getPersistableMongoVirtualArray(attributeName_s, attributeNameSingular_s, foreignRefEntityNamespace_s, foreignField_s, uuid_s, comment_s = null, uiViewOrder_i = -1, uiDefaultLabel_s = null, uiDataType = null) {
        let addListItemMethodName_s = `add${StringUtils_1.StringUtils.firstCharToUpperCase(attributeNameSingular_s)}`;
        let localComment_s = "";
        if (comment_s !== null) {
            localComment_s = comment_s;
        }
        let attribute = new Attribute_1.Attribute()
            .setAddListItemMethodName(addListItemMethodName_s)
            .setAddListItemMethodParameterName(attributeNameSingular_s)
            .setComment(localComment_s)
            .setDataType(DataType_1.DataType.MONGO_VIRTUAL_ARRAY)
            .setMongoAttributeName(attributeName_s)
            .setForeignField(foreignField_s)
            .setForeignRefEntityNamespace(foreignRefEntityNamespace_s)
            .setIsFlaggedIfMutated(true)
            .setMongoIsPersistable(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS)
            .setTypeScriptAttributeName(attributeName_s)
            .setTypeScriptGetterMethodName(`get${StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s)}`)
            .setTypeScriptSetterMethodName(`set${StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s)}`)
            .setUIDataType(UIDataType_1.UIDataType.SELECT)
            .setUIDefaultLabel(`${StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s)}`)
            .setUUID(uuid_s);
        if (uiViewOrder_i > -1) {
            attribute.setUIViewOrder(uiViewOrder_i);
            if (uiDataType === null) {
                uiDataType = UIDataType_1.UIDataType.SELECT;
            }
            if (uiDataType !== null) {
                attribute.setUIDataType(uiDataType);
            }
            if (uiDefaultLabel_s === null) {
                uiDefaultLabel_s = StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s);
            }
            if (uiDefaultLabel_s !== null) {
                attribute.setUIDefaultLabel(uiDefaultLabel_s);
            }
        }
        return (attribute);
    }
    /**
     * ```
     * Persistable STRING
     *      attributeName:  string, required
     *      uuid:           string, required
     *      comment:        string, optional
     *
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.STRING,
     *      UIDataType.TEXT_FIELD
     * ```
     * @param uuid_s
     * @returns
     */
    static getPersistableString(attributeName_s, uuid_s, comment_s = null, uiViewOrder_i = -1, uiDefaultLabel_s = null, uiDataType = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || '')
            .setDataType(DataType_1.DataType.STRING)
            .setIncludeInHistory(true)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setMongoAttributeName(attributeName_s)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(true)
            .setMongoIsIndexed(true)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        if (uiViewOrder_i > -1) {
            attribute.setUIViewOrder(uiViewOrder_i);
            if (uiDataType === null) {
                uiDataType = UIDataType_1.UIDataType.TEXT_FIELD;
            }
            if (uiDataType !== null) {
                attribute.setUIDataType(uiDataType);
            }
            if (uiDefaultLabel_s === null) {
                uiDefaultLabel_s = StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s);
            }
            if (uiDefaultLabel_s !== null) {
                attribute.setUIDefaultLabel(uiDefaultLabel_s);
            }
        }
        return (attribute);
    }
    // export interface IPersistableString
    // {
    //     attributeName:              string;
    //     attributeUUID:              string;
    //     comment:                    string;
    //     mongoIsIndex?:              boolean;
    //     mongoIsPersistable?:        boolean;
    //     mongoIsRequired?:           boolean;
    // }
    /**
     * ```
     * defaults
     *   isMongoIndexed      : true
     *   isMongoRequired     : true
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableString2(p) {
        let attribute = new Attribute_1.Attribute()
            .setComment(p.comment)
            .setDataType(DataType_1.DataType.STRING)
            .setIsFlaggedIfMutated(true)
            .setIsTypeAlias(getInterfaceBooleanOrDefault({ value: p.isTypeAlias, default: true }))
            .setIsTypeAliasOptional(getInterfaceBooleanOrDefault({ value: p.isTypeAliasOptional, default: true }))
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(p.attributeName)
            .setMongoIsIndexed(getInterfaceBooleanOrDefault({ value: p.isMongoIndexed, default: true }))
            .setMongoAttributeName(p.attributeName)
            .setMongoIsPersistable(true)
            .setMongoIsRequired(getInterfaceBooleanOrDefault({ value: p.isMongoRequired, default: true }))
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.attributeUUID)
            .setIncludeInHistory(p.includeInHistory !== undefined ? p.includeInHistory : false);
        if (p.validator) {
            attribute.setValidator(p.validator);
        }
        return (attribute);
    }
    static getRecordArrayOfStrings(p) {
        let attribute = new Attribute_1.Attribute()
            .setComment(p.comment || '')
            .setDataType(DataType_1.DataType.STRING)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(p.attributeName)
            .setTypeScriptAddItemMethodName(p.typeScriptAddItemMethodName)
            .setTypeScriptAttributeName(p.attributeName)
            .setUUID(p.uuid)
            .setVariableType({
            variableType: new TypeReference_1.TypeReference({
                typeName: 'Array',
                typeArguments: [DataType_1.DataType.STRING]
            })
        });
        return (attribute);
    }
    /**
     * Record BOOLEAN
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.BOOLEAN,
     *      UIDataType.CHECKBOX
     *
     * @param uuid_s
     * @returns
     */
    static getRecordBoolean(attributeName_s, uuid_s, comment_s = null, uiViewOrder_i = -1, uiDefaultLabel_s = null, uiDataType = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || '')
            .setDataType(DataType_1.DataType.BOOLEAN)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        if (uiViewOrder_i > -1) {
            attribute.setUIViewOrder(uiViewOrder_i);
            if (uiDataType === null) {
                uiDataType = UIDataType_1.UIDataType.CHECKBOX;
            }
            if (uiDataType !== null) {
                attribute.setUIDataType(uiDataType);
            }
            if (uiDefaultLabel_s === null) {
                uiDefaultLabel_s = StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s);
            }
            if (uiDefaultLabel_s !== null) {
                attribute.setUIDefaultLabel(uiDefaultLabel_s);
            }
        }
        return (attribute);
    }
    static getRecordManyToOne(attributeName_s, foreignRefEntityNamespace_s, uuid_s, comment_s = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || "")
            .setDataType(DataType_1.DataType.MANY_TO_ONE)
            .setForeignRefEntityNamespace(foreignRefEntityNamespace_s)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS)
            .setJsonAttributeName(attributeName_s)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     *
     * @param attributeName_s
     * @param attributeNameSingular_s
     * @param foreignRefEntityNamespace_s
     * @param uuid_s
     * @param uiViewOrder_i
     * @param uiDefaultLabel_s
     * @param uiDataType
     * @returns
     */
    static getRecordOneToMany(attributeName_s, attributeNameSingular_s, foreignRefEntityNamespace_s, uuid_s, comment_s = null) {
        let addListItemMethodName_s = `add${StringUtils_1.StringUtils.firstCharToUpperCase(attributeNameSingular_s)}`;
        let localComment_s = "";
        if (comment_s !== null) {
            localComment_s = comment_s;
        }
        let attribute = new Attribute_1.Attribute()
            .setAddListItemMethodName(addListItemMethodName_s)
            .setAddListItemMethodParameterName(attributeNameSingular_s)
            .setComment(localComment_s)
            .setDataType(DataType_1.DataType.ONE_TO_MANY)
            .setForeignRefEntityNamespace(foreignRefEntityNamespace_s)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS)
            .setTypeScriptAttributeName(attributeName_s)
            .setTypeScriptGetterMethodName(`get${StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s)}`)
            .setTypeScriptSetterMethodName(`set${StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s)}`)
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     * Persistable NUMBER
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.NUMBER
     *
     * @param uuid_s
     * @returns
     */
    static getRecordCurrency(attributeName_s, uuid_s, comment_s = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || '')
            .setDataType(DataType_1.DataType.CURRENCY)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        return (attribute);
    }
    /**
     * ```
     * attributeName_s:    string,
     * uuid_s:             string,
     * comment_s:          string | null       = null
     * ```
     * @param attributeName_s
     * @param uuid_s
     * @param comment_s
     * @returns
     */
    static getRecordDate(attributeName_s, uuid_s, comment_s = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || '')
            .setDataType(DataType_1.DataType.DATE)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        return (attribute);
    }
    static getRecordInteger(attributeName_s, uuid_s, comment_s = null, uiViewOrder_i = -1, uiDefaultLabel_s = null, uiDataType = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || '')
            .setDataType(DataType_1.DataType.INTEGER)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        if (uiViewOrder_i > -1) {
            attribute.setUIViewOrder(uiViewOrder_i);
            if (uiDataType === null) {
                uiDataType = UIDataType_1.UIDataType.TEXT_FIELD;
            }
            if (uiDataType !== null) {
                attribute.setUIDataType(uiDataType);
            }
            if (uiDefaultLabel_s === null) {
                uiDefaultLabel_s = StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s);
            }
            if (uiDefaultLabel_s !== null) {
                attribute.setUIDefaultLabel(uiDefaultLabel_s);
            }
        }
        return (attribute);
    }
    static getRecordNumber(attributeName_s, uuid_s, comment_s = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || '')
            .setDataType(DataType_1.DataType.INTEGER)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        return (attribute);
    }
    /*
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getRecordString(
                "name",
                "",  // uuid
                1
            ));
    */
    /**
     * ```
     * attributeName_s:    string,
     * uuid_s:             string,
     * comment_s:          string | null       = null,
     * ```
     * Persistable STRING
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.STRING,
     *      UIDataType.TEXT_FIELD
     *
     * @param uuid_s
     * @returns
     */
    static getRecordString(attributeName_s, uuid_s, comment_s = null, uiViewOrder_i = -1, uiDefaultLabel_s = null, uiDataType = null) {
        let attribute = new Attribute_1.Attribute()
            .setComment(comment_s || '')
            .setDataType(DataType_1.DataType.STRING)
            .setIsFlaggedIfMutated(true)
            .setJsonApiPropertyType(JsonApiPropertyType_1.JsonApiPropertyType.FIELD)
            .setJsonAttributeName(attributeName_s)
            .setTypeScriptAttributeName(attributeName_s)
            .setUUID(uuid_s);
        if (uiViewOrder_i > -1) {
            attribute.setUIViewOrder(uiViewOrder_i);
            if (uiDataType === null) {
                uiDataType = UIDataType_1.UIDataType.TEXT_FIELD;
            }
            if (uiDataType !== null) {
                attribute.setUIDataType(uiDataType);
            }
            if (uiDefaultLabel_s === null) {
                uiDefaultLabel_s = StringUtils_1.StringUtils.firstCharToUpperCase(attributeName_s);
            }
            if (uiDefaultLabel_s !== null) {
                attribute.setUIDefaultLabel(uiDefaultLabel_s);
            }
        }
        return (attribute);
    }
    /**
     * Identifies if an Entity is to be removed from an MONGO_REF_ARRAY when doing Transaction.save(entity);
     * @param uuid_s
     * @returns
     */
    static getRemoveFromRelationship(uuid_s) {
        let attribute = DataModelAttributeHelper.getRecordBoolean(DataModelAttributeHelper.removeFromRelationship.attributeName, uuid_s)
            .setTypeScriptGetterMethodName(DataModelAttributeHelper.removeFromRelationship.getterMethodName)
            .setTypeScriptSetterMethodName(DataModelAttributeHelper.removeFromRelationship.setterMethodName)
            .setUIDataType(null);
        return (attribute);
    }
}
exports.DataModelAttributeHelper = DataModelAttributeHelper;
DataModelAttributeHelper._entityState = new EntityState();
DataModelAttributeHelper._initializedDataKey = new InitializedDataKey();
DataModelAttributeHelper._jsonState = new JsonStateStr();
DataModelAttributeHelper.addToRelationship = new AddToRelationship();
DataModelAttributeHelper.createdDate = new CreatedDate();
DataModelAttributeHelper.modifiedDate = new ModifiedDate();
DataModelAttributeHelper.removeFromRelationship = new RemoveFromRelationship();
DataModelAttributeHelper._relationshipPersistableType = new RelationshipPersistableType();
/**
 * ```
 * type TGetPersistableMongoRefArray =
 * {
 *     attributeName: string;
 *     attributeNameSingular: string;
 *     comment: string | null;
 *     foreignRefEntityNamespace: string;
 *     uuid: string;
 * }
 * ```
 */
//# sourceMappingURL=DataModelAttributeHelperUtil.js.map