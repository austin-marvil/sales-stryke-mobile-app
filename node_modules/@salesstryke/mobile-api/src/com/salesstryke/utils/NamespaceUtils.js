"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamespaceUtils = void 0;
class NamespaceUtils {
    static eatFirstSubNamespace(namespace_s) {
        let name_s = '';
        let indexOfDot_i = namespace_s.indexOf('.');
        if (indexOfDot_i > -1) {
            name_s = namespace_s.substring(indexOfDot_i + 1, namespace_s.length);
        }
        return (name_s);
    }
    /**
     * Give 'com.foo.bar', returns 'com'.
     * @param namespace_s
     * @returns
     */
    static getFirstSubNamespaceName(namespace_s) {
        let name_s = '';
        let indexOfDot_i = namespace_s.indexOf('.');
        if (indexOfDot_i > -1) {
            name_s = namespace_s.substring(0, indexOfDot_i);
        }
        return (name_s);
    }
    /**
     * com.foo.Bar returns 2, com and foo are subnamespaces, Bar is the ClassName.
     * @param namespace_s
     * @returns
     */
    static getSubNamespaceLevelCount(namespace_s) {
        let levelCount = 0;
        let tempNamespace_s = namespace_s;
        if (namespace_s !== undefined && namespace_s !== null && namespace_s.length > 0) {
            while ((tempNamespace_s = NamespaceUtils.eatFirstSubNamespace(tempNamespace_s)) !== '') {
                levelCount++;
            }
        }
        return (levelCount);
    }
    /**
     * 'com.some.path.Foo' returns 'com.some.path'
     * @param namespace
     * @returns
     */
    static namespaceToPackageName(namespace) {
        // Find the index of the last period
        const lastPeriodIndex = namespace.lastIndexOf('.');
        // Check if a period is found
        if (lastPeriodIndex !== -1) {
            // Extract the substring before the last period
            const result = namespace.substring(0, lastPeriodIndex);
            return result;
        }
        else {
            // If no period is found, return the original string
            return namespace;
        }
    }
    /**
     * 'com.some.path.Foo' returns 'Foo'
     * @param namespace
     * @returns
     */
    static namespaceToSimpleName(namespace) {
        let simpleName = "";
        let index = namespace.lastIndexOf(".");
        if (index != -1) {
            simpleName = namespace.substring(index + 1);
        }
        else {
            simpleName = namespace;
        }
        return (simpleName);
    }
}
exports.NamespaceUtils = NamespaceUtils;
//# sourceMappingURL=NamespaceUtils.js.map