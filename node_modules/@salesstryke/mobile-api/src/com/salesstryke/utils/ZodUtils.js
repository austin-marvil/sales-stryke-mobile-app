"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemaData = exports.zodResolver = void 0;
const tslib_1 = require("tslib");
const zod_1 = require("zod");
const zodResolver = (schema) => (values) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const result = schema.safeParse(values);
    let tempData = Object.assign({}, result.data);
    try {
        for (const key in values) {
            if (!Object.prototype.hasOwnProperty.call(tempData, key)) {
                // Do something if the key is not an own property of tempData
                tempData[key] = values[key];
            }
        }
        result.data = tempData;
    }
    catch (error_any) {
        // log error
    }
    if (result.success) {
        return {
            values: result.data,
            errors: {},
        };
    }
    else {
        const formErrors = result.error.format();
        const errors = Object.keys(formErrors).reduce((acc, key) => {
            var _a, _b;
            const fieldError = (_b = (_a = formErrors[key]) === null || _a === void 0 ? void 0 : _a._errors) === null || _b === void 0 ? void 0 : _b[0];
            if (fieldError) {
                acc[key] = {
                    message: fieldError,
                    type: 'manual',
                };
            }
            return acc;
        }, {});
        return {
            values: {},
            errors,
        };
    }
});
exports.zodResolver = zodResolver;
const schemaData = (attributes) => {
    // schema
    const schema = attributes.reduce((acc, { key, schemaType }) => {
        if (key) {
            acc[key] = schemaType.create();
        }
        return acc;
    }, {});
    // pick attributes
    const pickAttributes = attributes.reduce((acc, { key }) => {
        if (key) {
            acc[key] = true;
        }
        return acc;
    }, {});
    // default values for form
    const defaultValues = attributes.reduce((acc, { key, schemaType }) => {
        if (key) {
            if (schemaType === zod_1.z.ZodString) {
                acc[key] = ''; // Default for strings
            }
            else if (schemaType === zod_1.z.ZodBoolean) {
                acc[key] = false; // Default for booleans
            }
            else if (schemaType === zod_1.z.ZodDate) {
                acc[key] = new Date();
            }
        }
        return acc;
    }, {});
    return {
        schema,
        pickAttributes,
        defaultValues,
    };
};
exports.schemaData = schemaData;
//# sourceMappingURL=ZodUtils.js.map