"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CsvUtils = void 0;
class CsvUtils {
    /**
     * Give csvString 'Name,Age,Occupation\nJohn Doe,30,Software Engineer\nJane Smith,25,Data Scientist',
     * returns [ 'Name', 'Age', 'Occupation' ].
     */
    static getCSVHeader(csvString) {
        const rows = csvString.split('\n');
        if (rows.length === 0) {
            throw new Error('The CSV string is empty.');
        }
        const header = rows[0].split(',');
        return header;
    }
    /**
     * Give csvString 'Name,Age,Register Date\nJohn Doe,30,1-1-2000\nJane Smith,25,2-3-2004',
     * returns [ 'Register Date' ].
     */
    static getCSVDateHeader(csvString) {
        const rows = csvString.split('\n');
        if (rows.length === 0) {
            throw new Error('The CSV string is empty.');
        }
        const dateHeader = rows[0].split(',').filter(str => str.includes('Date'));
        return dateHeader;
    }
    static getCSVColumnListByName(contents, attributeName) {
        const rows = contents.split('\n');
        const header = rows[0].split(','); // csv row 0 should be header
        const columnTitle = attributeName;
        const columnIndex = header.indexOf(columnTitle);
        if (columnIndex === -1) {
            return [];
        }
        const columnData = rows.slice(1).map(row => {
            const columns = row.split(',');
            return columns[columnIndex];
        });
        return columnData;
    }
}
exports.CsvUtils = CsvUtils;
//# sourceMappingURL=CsvUtils.js.map