import { CalendarRecurringTypeEnum } from '../types/Calendar.type';
import { RRule, RRuleSet } from 'rrule';
import { CalendarItem } from '../entity/classes/persistable';
interface TReccurence {
    frequency: CalendarRecurringTypeEnum;
    interval: number;
    nth: number;
}
/**
 * Configuration options for generating RRule
 */
interface TRRuleGeneratorOptions {
    /** The recurrence option as an object or stringified JSON */
    recurrence: TReccurence | string;
    /** The start date of the recurrence */
    startDate: Date;
    /** The end date for the recurrence */
    endDate: Date;
    /**
     * Optional dates to exclude from the recurrence pattern.
     * Can be:
     * - An array of Date objects
     * - A JSON string of ISO date strings (from calendar item)
     * - An object with a data property containing date strings
     */
    excludeDates?: Date[] | string | {
        data: string[];
    } | any;
    /**
     * Optional date to override RRule's dtstart parameter.
     * If not provided, startDate will be used.
     */
    dtstart?: Date;
    /**
     * Optional date to override RRule's until parameter.
     * If not provided, endDate will be used.
     */
    until?: Date;
}
/**
 * Utility class for calendar-specific date operations
 */
export declare class CalendarUtils {
    /**
     * Determines which occurrence of the weekday a specific date represents in its month.
     * For example, "the first Monday", "the third Friday", etc.
     *
     * @param date The date to check
     * @returns A number representing the occurrence (1 for first, 2 for second, etc.), or -1 for last
     */
    static getWeekdayOccurrenceInMonth(date: Date): number;
    /**
     * Gets a formatted string for the occurrence position in the month
     *
     * @param date The date to format
     * @param t Translation function
     * @returns A string like "first", "second", "third", "fourth", or "last"
     */
    static getFormattedOccurrence(date: Date, t: any): {
        interval: number;
        label: string;
    };
    /**
     * Gets the day of week name for a given date
     *
     * @param date The date to get the day name for
     * @param t Translation function
     * @returns Localized day name
     */
    static getDayOfWeekName(date: Date, t: any): string;
    /**
     * Gets the start and end dates for a calendar view based on the given date
     *
     * @param date The reference date
     * @param fullCalendarView If true, returns dates to fill a complete calendar grid (typically 35 days),
     *                         including days from adjacent months if needed. If false, returns just the current month range.
     * @returns An object with start and end dates for the calendar view
     */
    static getCalendarViewDates(date: Date, fullCalendarView?: boolean): {
        startDate: Date;
        endDate: Date;
    };
    /**
     * Creates dynamic occurrence options for calendar events
     *
     * @param date The selected date
     * @param t Translation function
     * @returns Array of options for the occurrence dropdown
     */
    static getRecurrenceOptions(date: Date, t: any): Array<{
        label: string;
        value: any;
    }>;
    /**
     * Generates RRule and associated dates based on recurrence options
     *
     * @param options Object containing all parameters for rule generation {@link TRRuleGeneratorOptions}
     *        - recurrence: The recurrence configuration (frequency, interval, etc.)
     *        - startDate: Start date for the recurrence range to calculate (Date object or date string)
     *        - endDate: End date for the recurrence range to calculate (Date object or date string)
     *        - excludeDates: Optional dates to exclude from recurrence pattern (Date objects, date strings, or array of either)
     *        - dtstart: Optional date to override RRule's dtstart (Date object or date string, defaults to startDate if not provided)
     *        - until: Optional date to override RRule's until (Date object or date string, defaults to endDate if not provided)
     * @returns Object containing RRule instance, RRuleSet (if exclusions exist), and generated dates
     *
     * All date inputs are automatically validated and converted to Date objects if they aren't already.
     * If startDate or endDate are invalid, they will default to the current date.
     * The dtstart and until parameters preserve null/undefined values if provided that way.
     */
    static generateRRule(options: TRRuleGeneratorOptions): {
        rule: RRule | null;
        ruleSet: RRuleSet | null;
        dates: Date[];
    };
    /**
     * Combines date and time fields from a CalendarItem into DateTime objects
     *
     * @param calendarItem The calendar item containing date and time fields
     * @returns Object containing eventStartDateTime and eventEndDateTime as Date objects
     */
    static getEventDateTimes(calendarItem: CalendarItem): {
        eventStartDateTime: Date | null;
        eventEndDateTime: Date | null;
    };
    /**
     * Creates a stringified recurrence object from a CalendarItem
     *
     * @param calendarItem The calendar item containing recurrence information
     * @returns Stringified JSON object containing recurrence configuration
     */
    static getRecurrenceValueFromCalendarItem(calendarItem: CalendarItem): string;
    /**
     * Generates RRule and associated dates for a CalendarItem
     *
     * This function is a wrapper around generateRRule that accepts a CalendarItem instance
     * instead of individual parameters. It extracts the necessary data from the CalendarItem
     * and calls the original generateRRule method.
     *
     * @param calendarItem The calendar item to generate RRule for
     * @param options Optional overrides for dtstart, until, etc.
     * @returns Object containing RRule instance, RRuleSet (if exclusions exist), and generated dates
     */
    static generateRRuleFromCalendarItem(calendarItem: CalendarItem, options?: {
        dtstart?: Date;
        until?: Date;
    }): {
        rule: RRule | null;
        ruleSet: RRuleSet | null;
        dates: Date[];
    };
}
export {};
