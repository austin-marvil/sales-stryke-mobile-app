import { Kml, KmlGeometry } from '../entity/classes/persistable';
export type TKmlGeometryJson = {
    id?: string;
    name?: string;
    description?: string;
    geometryType?: string;
    isActive?: boolean;
    kmlType?: string;
    geometryData?: {
        coordinates?: {
            lat: number;
            lng: number;
        }[];
        center?: {
            lat: number;
            lng: number;
        };
        radius?: number;
        bounds?: {
            north: number;
            south: number;
            east: number;
            west: number;
        };
    };
};
export type TKmlLayerJson = {
    id?: string;
    name?: string;
    description?: string;
    kmlType?: string;
    isActive?: boolean;
    kmlGeometries?: TKmlGeometryJson[];
};
export type TKmlJson = {
    id?: string;
    name?: string;
    description?: string;
    kmlType?: string;
    isActive?: boolean;
    kmlLayers?: TKmlLayerJson[];
    organizationId?: string;
    organizationName?: string;
};
export declare class KmlUtil {
    /**
     * Parses a KML coordinates string into an array of {lat, lng, alt?} objects.
     */
    private static parseCoordinatesString;
    /**
     * Recursively flattens all #text fields in the KML JSON to their proper values.
     * Also splits strings with \n into arrays, and parses 'coordinates' fields.
     */
    private static flattenKmlJsonTextFields;
    /**
     * Parses a single Placemark object into one or more KmlGeometry entities.
     */
    private static parsePlacemarkToKmlGeometry;
    /**
     * Helper to find all Placemark objects in the parsed KML JSON.
     * Handles multiple Folders and Folders containing Documents.
     */
    private static findPlacemarks;
    /**
     * Converts a KML XML object to an array of KmlGeometry entities.
     * Each kmlGeometry contains at least: name, type, coordinates, and properties.
     */
    static kmlXmlObjectToGeometryArray(xmlRecord: Record<string, unknown>, types?: string[]): Promise<KmlGeometry[]>;
    /**
     * Converts an array of KmlGeometry objects to a JSON.
     * Each geometry is represented as an object with its properties.
     */
    private static kmlGeometryToJson;
    /**
     * Converts an array of KmlLayer objects to a JSON.
     * Each layer is represented as an object with its properties.
     */
    private static kmlLayerToJson;
    /**
     * Converts a Kml object to a JSON representation.
     * The Kml object is represented as an object with its properties.
     */
    static kmlToJson(kml: Kml): TKmlJson | null;
    /**
     * Reads and parses the output from kmlToJson (array of KML geometries as JSON string or object).
     * Returns an array of KmlGeometry entity class objects.
     */
    private static parseKmlGeometryJsonToEntity;
    /**
     * Reads and parses the output from kmlToJson (array of KML layers as JSON string or object).
     * Returns an array of KmlLayer entity class objects.
     */
    private static parseKmlLayerJsonToEntity;
    /**
     * Reads and parses the output from kmlToJson (array of KML objects as JSON string or object).
     * Returns an array of Kml entity class objects.
     */
    static parseKmlJsonToEntity(json: string | Record<string, unknown>[]): Kml[];
    static createS3FileName(kml: Kml): string | null;
    static parseS3FileName(fileName: string): {
        organizationName: string;
        workspaceName: string;
        kmlId: string;
    } | null;
}
