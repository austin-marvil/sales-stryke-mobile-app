"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timer = void 0;
class Timer extends Object {
    constructor() {
        super();
        //public static CLASS : Class = ClassManager.getInstance().register({ clazz : Timer, reflection : ''});
        this.end_dt = undefined;
        this.start_dt = undefined;
        this.init();
    }
    end() {
        this.end_dt = new Date();
        return (this);
    }
    /**
     * ```
     * Returns the difference between start and end in milliseconds. -1 if .start not called. will call .end if not called.
     * type TGetTime =
     * {
     *     newEnd? : boolean; // force set new end time.
     * }
     * ```
     */
    getTime(p = {}) {
        let result_i = -1;
        if (this.start_dt) {
            if (!this.end_dt) {
                this.end();
            }
            if (p && p.newEnd) {
                this.end();
            }
            if (this.end_dt) {
                result_i = this.end_dt.getTime() - this.start_dt.getTime();
            }
        }
        return (result_i);
    }
    init() {
        this.start();
    }
    start() {
        this.start_dt = new Date();
        return (this);
    }
}
exports.Timer = Timer;
//# sourceMappingURL=TimerUtil.js.map