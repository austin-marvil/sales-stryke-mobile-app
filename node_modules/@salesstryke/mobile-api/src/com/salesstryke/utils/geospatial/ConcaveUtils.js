"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConcaveUtils = void 0;
const tslib_1 = require("tslib");
// Import dependencies
const helpers_1 = require("@turf/helpers");
// We'll use dynamic imports for the concaveman module
/**
 * Utility functions for creating concave polygons from points
 */
class ConcaveUtils {
}
exports.ConcaveUtils = ConcaveUtils;
_a = ConcaveUtils;
/**
 * Creates a concave hull (polygon) from a set of points
 *
 * @param points - Array of [x, y] points (longitude, latitude) or LatLngLiteral
 * @param concavity - Concavity factor, between 0 and infinity.
 *                    Lower values mean a more detailed shape, higher means more convex.
 *                    Default is 2.
 * @param lengthThreshold - Maximum segment length. Default is 0.
 * @returns A GeoJSON Feature<Polygon>
 */
ConcaveUtils.createConcavePolygon = (points, concavity, lengthThreshold) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    // Dynamically import concaveman
    const concavemanModule = yield Promise.resolve().then(() => require('concaveman'));
    // @ts-ignore - we know concaveman is a function
    const concaveman = concavemanModule.default;
    let pointsArray = [];
    if (Array.isArray(points) && points.length > 0 && 'lat' in points[0] && 'lng' in points[0]) {
        // Convert LatLngLiteral to [x, y] format (longitude, latitude)
        // @ts-ignore - we know points are LatLngLiteral
        pointsArray = points.map(coord => [coord.lng, coord.lat]);
    }
    else {
        pointsArray = points;
    }
    // Run concaveman algorithm on the points
    const concaveHull = concaveman(pointsArray, concavity || 2, lengthThreshold || 0);
    // Create a Turf.js Polygon feature from the concave hull
    return (0, helpers_1.polygon)([concaveHull]);
});
//# sourceMappingURL=ConcaveUtils.js.map