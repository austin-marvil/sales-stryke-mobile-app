"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionUtils = void 0;
/**
 * Utility functions for converting between different coordinate formats
 */
class ConversionUtils {
}
exports.ConversionUtils = ConversionUtils;
/**
 * Convert a LatLng object to a LatLngLiteral object
 */
ConversionUtils.convertLatLngToLatLngLiteral = (latLng) => {
    return {
        lat: latLng.lat(),
        lng: latLng.lng(),
    };
};
/**
 * Convert an MVC Array path to an array of LatLngLiteral
 */
ConversionUtils.convertGeometryPathToLatLngLiteralArray = (path) => {
    return path.getArray().map(ConversionUtils.convertLatLngToLatLngLiteral);
};
/**
 * Get the Southwest and Northeast corners from two points
 */
ConversionUtils.getSWandNE = ({ point1, point2, }) => {
    const SW = {
        lat: Math.min(point1.lat(), point2.lat()),
        lng: Math.min(point1.lng(), point2.lng()),
    };
    const NE = {
        lat: Math.max(point1.lat(), point2.lat()),
        lng: Math.max(point1.lng(), point2.lng()),
    };
    return { SW, NE };
};
/**
 * Calculate the haversine distance between two points in kilometers
 */
ConversionUtils.haversine = (point1, point2) => {
    const R = 6371; // Radius of the Earth in kilometers
    const lat1 = point1.lat();
    const lon1 = point1.lng();
    const lat2 = point2.lat();
    const lon2 = point2.lng();
    const dLat = (lat2 - lat1) * (Math.PI / 180);
    const dLon = (lon2 - lon1) * (Math.PI / 180);
    const a = Math.pow(Math.sin(dLat / 2), 2) +
        Math.cos(lat1 * (Math.PI / 180)) *
            Math.cos(lat2 * (Math.PI / 180)) *
            Math.pow(Math.sin(dLon / 2), 2);
    const c = 2 * Math.asin(Math.sqrt(a));
    return R * c; // Distance in kilometers
};
//# sourceMappingURL=ConversionUtils.js.map