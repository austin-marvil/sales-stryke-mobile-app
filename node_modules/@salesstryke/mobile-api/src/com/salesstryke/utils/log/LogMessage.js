"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogMessage = void 0;
/**
 * DO NOT USE, TO BE DELETED.
 */
class LogMessage {
    constructor(arg0, // message
    arg1 = null, // namespace
    arg2 = null, // methodName
    arg3 = null, // errorUUID
    arg4 = null // originalError
    ) {
        this.error = null;
        this.message_s = "";
        this.methodName_s = null;
        this.namespace_s = null;
        this.uuid_s = null;
        if (typeof arg0 === 'string') {
            this.message_s = arg0;
            this.namespace_s = arg1;
            this.methodName_s = arg2;
            this.uuid_s = arg3;
            this.error = arg4;
        }
        else {
            this.message_s = arg0.message;
            this.namespace_s = arg0.namespace || null;
            this.methodName_s = arg0.methodName || null;
            this.uuid_s = arg0.errorUUID || null;
            this.error = arg0.originalError || null;
        }
        // this.error          = originalError;
        // this.message_s      = message_s;
        // this.methodName_s   = methodName_s;
        // this.namespace_s    = namespace_s;
        // this.uuid_s         = errorUUID_s;
    }
    getMethodName() {
        return (this.methodName_s);
    }
    /**
     * Returns the errorMessage, namespace, methodname, and error uuid.
     * @returns
     */
    getFullMessage() {
        let message_s = "";
        if (this.namespace_s !== null) {
            message_s += ` ${this.namespace_s}`;
        }
        if (this.methodName_s !== null) {
            message_s += `.${this.methodName_s}`;
        }
        message_s += ` ${this.message_s} `;
        if (this.uuid_s) {
            message_s += ` log uuid:${this.uuid_s}`;
        }
        return (message_s);
    }
    /**
     * Returns the error message and the error uuid.
     * @returns
     */
    getMessage() {
        let message_s = "";
        message_s += ` ${this.message_s} `;
        if (this.uuid_s) {
            message_s += `[log uuid:${this.uuid_s}]`;
        }
        return (message_s);
    }
    getNamespace() {
        return (this.namespace_s);
    }
    getOriginalError() {
        return (this.error);
    }
    getErrorUUID() {
        return (this.uuid_s);
    }
}
exports.LogMessage = LogMessage;
//# sourceMappingURL=LogMessage.js.map