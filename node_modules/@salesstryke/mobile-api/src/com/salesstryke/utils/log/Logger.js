"use strict";
/*
 * Copyright (C) OmniStation, Inc - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Martin C. Euerle, <meuerle@omnistation.com>,  2019.10.14
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const ErrorBase_1 = require("../../lang/ErrorBase");
const LogLevel_1 = require("./LogLevel");
const LOG_DEFAULT_CSS = "color: green;"; //"#FFFFFF";  //     "color: #000000;";  // black font
const LOG_SEVERE_CSS = "color: red;";
const LOG_WARNING_CSS = "color: yellow;";
const TimeStampFormat = () => {
    const date = new Date();
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    const milliseconds = String(date.getMilliseconds()).padStart(3, '0');
    const formattedDate = `${year}.${month}.${day}:${hours}.${minutes}.${seconds}-${milliseconds}`;
    return formattedDate;
};
/**
 * ```
 * The Logger class.
 *
 * Examples when used in a class in path: src/com/salesstryke/utils/Foo.ts
 *
 * const   NAMESPACE:          string      = 'com.salesstryke.utils.Foo';
 * const   LOGGER:             Logger      = LogManager.getLogger(NAMESPACE);
 *
 * function sum(a: number, b: number): number
 * {
 *    // Add 'uuid' when used inside a function
 *    LOGGER.logFine({ message : `sum for ${a}+${b}`, functionName : 'sum', uuid : 'c8487f58-657f-464e-ace0-d8bfd32cf517' })
 *    return(a + b);
 * }
 *
 * export class Foo
 * {
 *
 *   publid doBar()
 *   {
 *     try
 *     {
 *       // Add 'methodName' when used inside a method
 *       // Add 'uuid' if there are a lot (more than 5) logging events inside a single method call.
 *       LOGGER.logFine({ message : `some message`, methodName : this.doBar.name, uuid : '' });
 *
 *       let index_i     : number = 0;
 *       let size_i      : number = 100;
 *       for(index_i = 0; index_i < size_i; index_i++)
 *       {
 *          // Performance optimization
 *          if(LOGGER.isInfoEnabled()) { LOGGER.logInfo({ message : ``, methodName : this.doBar.name }); }
 *       }
 *
 *     }
 *     catch(error_any : any)
 *     {
 *       let error:      Error       = (error_any as Error);
 *       LOGGER.logError({ message : error.message, methodName : this.doBar.name, uuid : '', error : error });
 *       throw(error);
 *     }

 * }
 *
 * ```
 */
class Logger {
    constructor(namespace_s, logLevel) {
        this.namespace_s = namespace_s;
        this.logLevel = logLevel;
    }
    logErrorBase(errorBase) {
        let methodName_s = errorBase.getMethodName() || "";
        let errorMessage_s = errorBase.getFullMessage();
        if (errorBase.stack) {
            errorMessage_s += ` ${errorBase.stack}`;
        }
        this.log(LogLevel_1.Level.ERROR, methodName_s, errorMessage_s);
    }
    /**
     * @deprecated use isLogLevel instead
     */
    isFinestEnabled() {
        let isEnabled_b = false;
        if (this.logLevel.getLevelIndex() >= LogLevel_1.Level.FINEST.getLevelIndex()) {
            isEnabled_b = true;
        }
        return (isEnabled_b);
    }
    /**
    * @deprecated use isLogLevel instead
    */
    isInfoEnabled() {
        let isEnabled_b = false;
        if (this.logLevel.getLevelIndex() >= LogLevel_1.Level.INFO.getLevelIndex()) {
            isEnabled_b = true;
        }
        return (isEnabled_b);
    }
    /**
    * @deprecated use isLogLevel instead
    */
    isWarningEnabled() {
        let isEnabled_b = false;
        if (this.logLevel.getLevelIndex() >= LogLevel_1.Level.WARNING.getLevelIndex()) {
            isEnabled_b = true;
        }
        return (isEnabled_b);
    }
    /**
    * @deprecated use isLogLevel instead
    */
    isErrorEnabled() {
        let isEnabled_b = false;
        if (this.logLevel.getLevelIndex() >= LogLevel_1.Level.ERROR.getLevelIndex()) {
            isEnabled_b = true;
        }
        return (isEnabled_b);
    }
    /**
    * @deprecated use isLogLevel instead
    */
    isSevereEnabled() {
        let isEnabled_b = false;
        if (this.logLevel.getLevelIndex() >= LogLevel_1.Level.SEVERE.getLevelIndex()) {
            isEnabled_b = true;
        }
        return (isEnabled_b);
    }
    log(level_p, methodName_s_p = null, message_s_p = null, error_p = null) {
        let logLevelCSS_s_m = LOG_DEFAULT_CSS;
        let logDate_s_m = "";
        let logLevel_s_m = "";
        let logMessage_s_m = "";
        let logLocation_s_m = "";
        if ((level_p.getLevelIndex() <= this.logLevel.getLevelIndex())) {
            if (level_p === LogLevel_1.Level.SEVERE) {
                logLevelCSS_s_m = LOG_SEVERE_CSS;
            }
            else if (level_p === LogLevel_1.Level.WARNING) {
                logLevelCSS_s_m = LOG_WARNING_CSS;
            }
            logDate_s_m = `[${TimeStampFormat()}]`; //"[" + new Date().getTime() + "]";
            logLevel_s_m = " " + level_p.getName();
            logLocation_s_m = " " + this.namespace_s + "." + methodName_s_p;
            if (message_s_p !== null) {
                logMessage_s_m = "%c" + logDate_s_m + logLevel_s_m + logLocation_s_m + " " + message_s_p;
                console.log(logMessage_s_m, logLevelCSS_s_m);
            }
        }
    }
    logEvent(p) {
        // Check if should be logged.
        // if the logger level index is less then the log event level index
        if (this.logLevel.getLevelIndex() < p.level.getLevelIndex()) {
            return;
        }
        let functionName_s = (p.functionName ? p.functionName : '');
        let logLevelCSS_s_m = LOG_DEFAULT_CSS;
        let logDate_s_m = '';
        let logEventMessage_s = '';
        let logLevel_s_m = '';
        let logMessage_s_m = '';
        let logLocation_s_m = '';
        let methodName_s = p.methodName || '';
        let namespace_s = (this.namespace_s ? this.namespace_s : '');
        let message_s = (p.message ? p.message : '');
        let stackTrace_s = '';
        if (p.error && p.error.stack) {
            if (p.error instanceof ErrorBase_1.ErrorBase) {
                const errorBase = p.error;
                const message = errorBase.getMessage();
                const methodName = errorBase.getMethodName();
                const namespace = errorBase.getNamespace();
                if (message) {
                    message_s = message;
                }
                if (methodName) {
                    methodName_s = methodName;
                }
                if (namespace) {
                    namespace_s = namespace;
                }
            }
            stackTrace_s = `\nstack trace: ${p.error.stack}`;
        }
        logEventMessage_s = `[${TimeStampFormat()}]`;
        logEventMessage_s += ` ${p.level.getName()}`;
        if (namespace_s) {
            logEventMessage_s += ` ${namespace_s}`;
        }
        if (functionName_s && (functionName_s !== '')) {
            logEventMessage_s += ` function ${functionName_s}`;
        }
        if (methodName_s && (methodName_s !== '')) {
            logEventMessage_s += `.${methodName_s}`;
        }
        logEventMessage_s += ` ${message_s}`;
        if (p.uuid) {
            logEventMessage_s += ` UUID: ${p.uuid}`;
        }
        logEventMessage_s += stackTrace_s;
        // console.log(logEventMessage_s);
    }
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logError
     * @param p
     */
    logError(p) {
        if (this.logLevel.getLevelIndex() >= LogLevel_1.Level.ERROR.getLevelIndex()) {
            this.logEvent({
                error: (p.error ? p.error : undefined),
                functionName: (p.functionName ? p.functionName : undefined),
                level: LogLevel_1.Level.ERROR,
                message: p.message,
                methodName: (p.methodName ? p.methodName : undefined),
                uuid: (p.uuid ? p.uuid : undefined)
            });
        }
    }
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logFine
     * @param p
     */
    logFine(p) {
        this.logEvent({
            error: (p.error ? p.error : undefined),
            functionName: (p.functionName ? p.functionName : undefined),
            level: LogLevel_1.Level.FINE,
            message: p.message,
            methodName: (p.methodName ? p.methodName : undefined),
            uuid: (p.uuid ? p.uuid : undefined)
        });
    }
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logFiner
     * @param p
     */
    logFiner(p) {
        this.logEvent({
            error: (p.error ? p.error : undefined),
            functionName: (p.functionName ? p.functionName : undefined),
            level: LogLevel_1.Level.FINER,
            message: p.message,
            methodName: (p.methodName ? p.methodName : undefined),
            uuid: (p.uuid ? p.uuid : undefined)
        });
    }
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logFinest
     * @param p
     */
    logFinest(p) {
        this.logEvent({
            error: (p.error ? p.error : undefined),
            functionName: (p.functionName ? p.functionName : undefined),
            level: LogLevel_1.Level.FINEST,
            message: p.message,
            methodName: (p.methodName ? p.methodName : undefined),
            uuid: (p.uuid ? p.uuid : undefined)
        });
    }
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logInfo
     * @param p
     */
    logInfo(p) {
        this.logEvent({
            error: (p.error ? p.error : undefined),
            functionName: (p.functionName ? p.functionName : undefined),
            level: LogLevel_1.Level.INFO,
            message: p.message,
            methodName: (p.methodName ? p.methodName : undefined),
            uuid: (p.uuid ? p.uuid : undefined)
        });
    }
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logSevere
     * @param p
     */
    logSevere(p) {
        this.logEvent({
            error: (p.error ? p.error : undefined),
            functionName: (p.functionName ? p.functionName : undefined),
            level: LogLevel_1.Level.SEVERE,
            message: p.message,
            methodName: (p.methodName ? p.methodName : undefined),
            uuid: (p.uuid ? p.uuid : undefined)
        });
    }
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logSevere
     * @param p
     */
    logWarning(p) {
        this.logEvent({
            error: (p.error ? p.error : undefined),
            functionName: (p.functionName ? p.functionName : undefined),
            level: LogLevel_1.Level.WARNING,
            message: p.message,
            methodName: (p.methodName ? p.methodName : undefined),
            uuid: (p.uuid ? p.uuid : undefined)
        });
    }
    isLogLevel(level) {
        return this.logLevel.getLevelIndex() >= level.getLevelIndex();
    }
    setLogLevel(level) {
        this.logLevel = level;
        return this;
    }
    getLogLevel() {
        return this.logLevel;
    }
}
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map