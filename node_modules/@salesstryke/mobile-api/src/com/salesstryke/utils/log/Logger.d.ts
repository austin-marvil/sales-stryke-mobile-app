import { ErrorBase } from "../../lang/ErrorBase";
import { Level } from "./LogLevel";
/**
 * ```
 * The Logger class.
 *
 * Examples when used in a class in path: src/com/salesstryke/utils/Foo.ts
 *
 * const   NAMESPACE:          string      = 'com.salesstryke.utils.Foo';
 * const   LOGGER:             Logger      = LogManager.getLogger(NAMESPACE);
 *
 * function sum(a: number, b: number): number
 * {
 *    // Add 'uuid' when used inside a function
 *    LOGGER.logFine({ message : `sum for ${a}+${b}`, functionName : 'sum', uuid : 'c8487f58-657f-464e-ace0-d8bfd32cf517' })
 *    return(a + b);
 * }
 *
 * export class Foo
 * {
 *
 *   publid doBar()
 *   {
 *     try
 *     {
 *       // Add 'methodName' when used inside a method
 *       // Add 'uuid' if there are a lot (more than 5) logging events inside a single method call.
 *       LOGGER.logFine({ message : `some message`, methodName : this.doBar.name, uuid : '' });
 *
 *       let index_i     : number = 0;
 *       let size_i      : number = 100;
 *       for(index_i = 0; index_i < size_i; index_i++)
 *       {
 *          // Performance optimization
 *          if(LOGGER.isInfoEnabled()) { LOGGER.logInfo({ message : ``, methodName : this.doBar.name }); }
 *       }
 *
 *     }
 *     catch(error_any : any)
 *     {
 *       let error:      Error       = (error_any as Error);
 *       LOGGER.logError({ message : error.message, methodName : this.doBar.name, uuid : '', error : error });
 *       throw(error);
 *     }

 * }
 *
 * ```
 */
export declare class Logger {
    private namespace_s;
    logLevel: Level;
    constructor(namespace_s: string, logLevel: Level);
    logErrorBase(errorBase: ErrorBase): void;
    /**
     * @deprecated use isLogLevel instead
     */
    isFinestEnabled(): boolean;
    /**
    * @deprecated use isLogLevel instead
    */
    isInfoEnabled(): boolean;
    /**
    * @deprecated use isLogLevel instead
    */
    isWarningEnabled(): boolean;
    /**
    * @deprecated use isLogLevel instead
    */
    isErrorEnabled(): boolean;
    /**
    * @deprecated use isLogLevel instead
    */
    isSevereEnabled(): boolean;
    private log;
    private logEvent;
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logError
     * @param p
     */
    logError(p: {
        error?: Error | undefined;
        functionName?: string | undefined;
        message: string;
        methodName?: string | undefined;
        uuid?: string | undefined;
    }): void;
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logFine
     * @param p
     */
    logFine(p: {
        error?: Error | undefined;
        functionName?: string | undefined;
        message: string;
        methodName?: string | undefined;
        uuid?: string | undefined;
    }): void;
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logFiner
     * @param p
     */
    logFiner(p: {
        error?: Error | undefined;
        functionName?: string | undefined;
        message: string;
        methodName?: string | undefined;
        uuid?: string | undefined;
    }): void;
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logFinest
     * @param p
     */
    logFinest(p: {
        error?: Error | undefined;
        functionName?: string | undefined;
        message: string;
        methodName?: string | undefined;
        uuid?: string | undefined;
    }): void;
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logInfo
     * @param p
     */
    logInfo(p: {
        error?: Error | undefined;
        functionName?: string | undefined;
        message: string;
        methodName?: string | undefined;
        uuid?: string | undefined;
    }): void;
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logSevere
     * @param p
     */
    logSevere(p: {
        error?: Error | undefined;
        functionName?: string | undefined;
        message: string;
        methodName?: string | undefined;
        uuid?: string | undefined;
    }): void;
    /**
     * ```
     * 'error'        : Add an error to the logger.
     * 'functionName' : Use when inside a function.
     * 'message'      : The message to be added to the log.
     * 'methodName'   : Use when inside a method.
     * 'uuid'         : Use when inside a function, or when needing to easily identify one of many values in a method.
     * ```
     * logSevere
     * @param p
     */
    logWarning(p: {
        error?: Error | undefined;
        functionName?: string | undefined;
        message: string;
        methodName?: string | undefined;
        uuid?: string | undefined;
    }): void;
    isLogLevel(level: Level): boolean;
    setLogLevel(level: Level): Logger;
    getLogLevel(): Level;
}
