import { JsonApiBase } from "../../jsonApi";
import { JsonApiPersistableBase } from "../../jsonApi/JsonApiPersistableBase";
import { ZodBoolean, ZodDate, ZodNumber, ZodObject, ZodRawShape, ZodString } from 'zod';
declare class MetaData {
    namespace: string;
}
export declare class EntityUtils {
    static metaDataForEntityUtils: MetaData;
    /**
     * Sets the mutated flag for each attribute that is not null.
     * @param p
     * @returns
     */
    static getAsMutated<T>(p: {
        entity: JsonApiPersistableBase;
    }): T | null;
    static getAsZodSchema<T extends ZodRawShape>(p: {
        entity: JsonApiBase;
    }): ZodObject<T>;
    static getZodValidator<T>(p: {
        attributeName: string;
        entity: JsonApiBase;
    }): ZodBoolean | ZodDate | ZodNumber | ZodString | undefined;
    /**
     * Takes a string and turns it into an Object of type any.
     */
    static jsonStringParser(p: {
        value: string;
    }): any;
    /**
     * Takes a string, returns an object.
     * @param p
     * @returns
     */
    static jsonStringGetter(p: {
        value: string;
    }): any;
    static isListEqual(list1: JsonApiPersistableBase[], list2: JsonApiPersistableBase[]): boolean;
    /**
     * Takes an object, returns a string
     * @param p
     */
    static jsonStringSetter(p: {
        value: any;
    }): string;
}
export {};
