"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurePermissionUtils = void 0;
const SecurityPermissionEnum_1 = require("../../entity/enums/SecurityPermissionEnum");
class SecurePermissionUtils {
    /**
     * ```
     * requiredPermissions - The requrired permissions. Only one need to match!
     * secureIdentity      - The SecureIdentity that is check against for the required permission
     * ```
     */
    static hasSecurityPermission(p) {
        const { requiredPermissions, secureIdentity } = p;
        if (requiredPermissions.length === 0) {
            return true; // no permission was required.
        }
        const securityPermissionEnumList = requiredPermissions;
        for (let index = 0; index < securityPermissionEnumList.length; index++) {
            const currentSecurityPermission = securityPermissionEnumList[index].getPermission();
            if (this.hasRequriedSecurityPermission({
                requriedSecurityPermission: currentSecurityPermission,
                secureIdentity: secureIdentity,
            })) {
                return true;
            }
        }
        return false;
    }
    static hasRequriedSecurityPermission(p) {
        const { requriedSecurityPermission, secureIdentity } = p;
        const secureIdentitySecurityPermissionList = secureIdentity.getSecurityPermissions();
        const secureIdentitySecurityRoleList = secureIdentity.getRoles();
        if (this.hasSecurityPermissonInSecurityPermissionList({ requriedSecurityPermission: requriedSecurityPermission, securityPermissionList: secureIdentitySecurityPermissionList })) {
            return true;
        }
        if (this.hasSecurityPermissonInSecurityRoleList({ requriedSecurityPermission: requriedSecurityPermission, securityRoleList: secureIdentitySecurityRoleList })) {
            return true;
        }
        return false;
    }
    static hasSecurityPermissonInSecurityPermissionList(p) {
        const { requriedSecurityPermission, securityPermissionList } = p;
        for (let index = 0; index < securityPermissionList.length; index++) {
            const currentSecurityPermission = securityPermissionList[index];
            if (requriedSecurityPermission.getId() === currentSecurityPermission.getId()
                || this.isRootUser(currentSecurityPermission) // is a root user
            ) {
                return true;
            }
        }
        return false;
    }
    static hasSecurityPermissonInSecurityRoleList(p) {
        const { requriedSecurityPermission, securityRoleList } = p;
        for (let index = 0; index < securityRoleList.length; index++) {
            const currentSecurityRole = securityRoleList[index];
            const currentSecurityPermissionList = currentSecurityRole.getSecurityPermissions();
            if (this.hasSecurityPermissonInSecurityPermissionList({ requriedSecurityPermission: requriedSecurityPermission, securityPermissionList: currentSecurityPermissionList })) {
                return true;
            }
        }
        return false;
    }
}
exports.SecurePermissionUtils = SecurePermissionUtils;
SecurePermissionUtils.isRootUser = (securityPermission) => {
    if (securityPermission.getId() === SecurityPermissionEnum_1.SecurityPermissionEnum.ROOT_USER.getPermission().getId()) {
        return true;
    }
    return false;
};
//# sourceMappingURL=SecurityPermissionUtils.js.map