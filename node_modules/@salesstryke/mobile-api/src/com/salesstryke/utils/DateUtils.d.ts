export declare class DateUtils {
    /**
     * Helper function to ensure input is a valid Date object
     * @param input Input that may or may not be a Date object
     * @returns Valid Date object from input, or null if invalid
     */
    static ensureValidDate(input: any): Date | null;
    /**
     * Takes in a valid Date object and returns a string 'YYYY-MM-DD'
     * @param date_dt_p
     */
    static dateObjectToDashedYYYYMMDD(date_dt_p: Date): string | null;
    static dateToString(p: {
        date: Date;
    }): string | null;
    static getDateAs12HHColonMM(date_dt_p: Date, showAmPm_b_p?: boolean): string | null;
    /**
     * Given a Date object, returns HH:MM
     * @param date_dt_p
     */
    static getDateAs24HHColonMM(date_dt_p: Date, showAmPm_b_p?: boolean): string | null;
    static isISO8601(dateString: string): boolean;
    static isTimeWithin(p: {
        time1: Date;
        time2: Date;
        isWithinMinutes: number;
    }): boolean;
    static stringToZonedDateTime(ISODateString: string): Date | null;
    /**
     * convert Date to ISO 8601 formatted datetime string
     *
     * use Intl.DateTimeFormat().resolvedOptions().timeZone to local timezone
     */
    static zonedDateTimeToString(object_p: Date, timeZone?: string): string;
    static stringToDate(p: {
        dateAsString: string;
    }): Date;
    /**
     * Returns: YYYY-MM-DDTHH:mm:ss
     * @param date
     * @returns
     */
    static dateToYYYYMMDDTHHMMSS(date: Date | null): string;
    static daysAgo(date: Date, daysAgo: number): Date;
    static isDateExipred(date: Date): boolean;
    static displayFormat(date: string | Date): string;
    /**
     * Format a date using date-fns format patterns.
     *
     * @param date The date to format (can be a Date object or a string that can be parsed to a Date)
     * @param format The format string pattern to apply
     * @returns The formatted date string
     *
     * @example
     * // Returns "September 23, 2025"
     * DateUtils.format(new Date(), 'MMMM d, yyyy')
     *
     * Common format patterns:
     * - 'MM/dd/yyyy' -> 09/23/2025 (US date format)
     * - 'dd/MM/yyyy' -> 23/09/2025 (European date format)
     * - 'yyyy-MM-dd' -> 2025-09-23 (ISO date format)
     * - 'MMMM d, yyyy' -> September 23, 2025
     * - 'MMM d, yyyy' -> Sep 23, 2025
     * - 'EEEE, MMMM d, yyyy' -> Monday, September 23, 2025
     * - 'h:mm a' -> 2:30 PM (12-hour time)
     * - 'HH:mm' -> 14:30 (24-hour time)
     * - 'MMMM d' -> September 23
     *
     * Full pattern reference:
     * Year: y (25), yy (25), yyyy (2025)
     * Month: M (9), MM (09), MMM (Sep), MMMM (September)
     * Day: d (1), dd (01), D (day of year)
     * Weekday: E (day number), EEEE (Monday), EEEEE (M)
     * Hour: H (0-23), HH (00-23), h (1-12), hh (01-12)
     * Minute/Second: m, mm, s, ss
     * AM/PM: a (AM/PM)
     */
    static format(date: string | Date, format: string): string;
    static setTimeFromDate(targetDate: Date, referenceDate: Date): Date;
}
