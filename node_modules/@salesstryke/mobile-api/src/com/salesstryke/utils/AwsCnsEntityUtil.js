"use strict";
// TRANSLATE | CONVERT ENTITY TO AWS AND BACK
Object.defineProperty(exports, "__esModule", { value: true });
exports.CNSEntityUtil = void 0;
class CNSEntityUtil {
    /**
     * return endpoint object for aws
     * @param CnsEndpoint
     * @returns
     */
    static endpointToAwsEndpoint(cnsEndpoint) {
        var _a, _b, _c, _d;
        // TODO quick and dirty
        // fix for reusablility
        // let channelType: string | null | undefined = cnsEndpoint.getCnsEndPointChannelType()?.getName();
        let channelType = "EMAIL";
        let endpointAddress = "";
        if (channelType === "EMAIL") {
            endpointAddress = (_a = cnsEndpoint.getBillingEmailAddress()) !== null && _a !== void 0 ? _a : "";
        }
        else if (channelType === "PHONE") {
            endpointAddress = (_b = cnsEndpoint.getBillingCellPhone()) !== null && _b !== void 0 ? _b : "";
        }
        else if (channelType === "APP") {
            // TODO APP once app is impletemented
        }
        let UserAttributes = {};
        let endpointId = cnsEndpoint.getId();
        let endpointUserId = (_c = cnsEndpoint.getImportData()) === null || _c === void 0 ? void 0 : _c.getId();
        let endpointBillingAddress = cnsEndpoint.getBillingAddress();
        let endpointBillingCity = cnsEndpoint.getBillingCity();
        let endpointBillingFirstName = cnsEndpoint.getBillingFirstName();
        let endpointBillingLastName = cnsEndpoint.getBillingLastName();
        let endpointBillingPhoneNumber = cnsEndpoint.getBillingCellPhone();
        let endpointBillingState = cnsEndpoint.getBillingState();
        let endpointBillingZipCode = cnsEndpoint.getBillingZipCode();
        let endpointBillingEmailAddress = cnsEndpoint.getBillingEmailAddress();
        let endpointServiceAddress = cnsEndpoint.getServiceAddress();
        let endpointServiceCity = cnsEndpoint.getServiceCity();
        let endpointServiceFirstName = cnsEndpoint.getServiceFirstName();
        let endpointServiceLastName = cnsEndpoint.getServiceLastName();
        let endpointServicePhoneNumber = cnsEndpoint.getServiceCellPhone();
        let endpointServiceState = cnsEndpoint.getServiceState();
        let endpointServiceZipCode = cnsEndpoint.getServiceZipCode();
        let endpointServiceEmailAddress = cnsEndpoint.getServiceEmailAddress();
        let endpointClientUUID = cnsEndpoint.getClientUUID();
        if (!endpointId || !endpointAddress) {
            return null;
        }
        if (endpointBillingAddress) {
            UserAttributes.BillingAddress = [endpointBillingAddress];
        }
        if (endpointBillingCity) {
            UserAttributes.BillingCity = [endpointBillingCity];
        }
        if (endpointBillingFirstName) {
            UserAttributes.BillingFirstName = [endpointBillingFirstName];
        }
        if (endpointBillingLastName) {
            UserAttributes.BillingLastName = [endpointBillingLastName];
        }
        if (endpointBillingPhoneNumber) {
            UserAttributes.BillingPhoneNumber = [endpointBillingPhoneNumber];
        }
        if (endpointBillingState) {
            UserAttributes.BillingState = [endpointBillingState];
        }
        if (endpointBillingZipCode) {
            UserAttributes.BillingZipCode = [endpointBillingZipCode];
        }
        if (endpointBillingEmailAddress) {
            UserAttributes.BillingEmailAddress = [endpointBillingEmailAddress];
        }
        if (endpointServiceAddress) {
            UserAttributes.ServiceAddress = [endpointServiceAddress];
        }
        if (endpointServiceCity) {
            UserAttributes.ServiceCity = [endpointServiceCity];
        }
        if (endpointServiceFirstName) {
            UserAttributes.ServiceFirstName = [endpointServiceFirstName];
        }
        if (endpointServiceLastName) {
            UserAttributes.ServiceLastName = [endpointServiceLastName];
        }
        if (endpointServicePhoneNumber) {
            UserAttributes.ServicePhoneNumber = [endpointServicePhoneNumber];
        }
        if (endpointServiceState) {
            UserAttributes.ServiceState = [endpointServiceState];
        }
        if (endpointServiceZipCode) {
            UserAttributes.ServiceZipCode = [endpointServiceZipCode];
        }
        if (endpointServiceEmailAddress) {
            UserAttributes.ServiceEmailAddress = [endpointServiceEmailAddress];
        }
        if (endpointClientUUID) {
            UserAttributes.ClientUUID = [endpointClientUUID];
        }
        let optOutStatus = (_d = cnsEndpoint.getCnsEndPointSignupStatusType()) === null || _d === void 0 ? void 0 : _d.getName();
        if (optOutStatus && optOutStatus === "OPT_OUT") {
            optOutStatus = "ALL";
        }
        else {
            optOutStatus = "NONE";
        }
        return {
            Address: endpointAddress,
            ChannelType: channelType,
            EndpointStatus: "ACTIVE",
            Id: endpointId,
            OptOut: optOutStatus,
            User: {
                UserId: endpointUserId !== null && endpointUserId !== void 0 ? endpointUserId : "", // salesstryke ID customerId
                UserAttributes: UserAttributes
            }
        };
    }
    static entityToEmail(p) {
        var _a, _b;
        const addresses = {};
        for (let index = 0; index < p.cnsEndpoint.length; index++) {
            const endpoint = p.cnsEndpoint[index];
            const endpointId = endpoint.getId();
            if (!endpointId) {
                continue;
            }
            addresses[endpointId] = {
                // ChannelType: "EMAIL",
                Substitutions: {
                    "firstName": [
                        (_a = endpoint.getBillingFirstName()) !== null && _a !== void 0 ? _a : "",
                    ],
                    "lastName": [
                        (_b = endpoint.getBillingLastName()) !== null && _b !== void 0 ? _b : "",
                    ],
                },
            };
        }
        return addresses;
    }
}
exports.CNSEntityUtil = CNSEntityUtil;
//# sourceMappingURL=AwsCnsEntityUtil.js.map