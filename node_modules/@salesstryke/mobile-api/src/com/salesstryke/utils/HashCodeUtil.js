"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HashCodeUtil = void 0;
const IsArray_1 = require("./object/IsArray");
const IsBoolean_1 = require("./object/IsBoolean");
const IsDate_1 = require("./object/IsDate");
const IsNumber_1 = require("./object/IsNumber");
const IsString_1 = require("./object/IsString");
class MetaData {
    constructor() {
        this.namespace = 'com.salesstryke.utils.HashCodeUtil';
    }
}
class HashCodeUtil {
    /**
     * Return the value as a hashcode, handles the following types: array, boolean, Date, map, number, string
     * @param value_any
     * @returns
     */
    static toHashCode(value_any) {
        let hashCode_n = 29;
        if ((0, IsBoolean_1.default)(value_any)) {
            //hash = 31 * hash + (int) id;
            hashCode_n = 31 * hashCode_n;
            let value_b = value_any;
            if (value_b) {
                hashCode_n += 1;
            }
        }
        else if ((0, IsDate_1.default)(value_any)) {
            let value_date = value_any;
            let dateAsString_s = value_date.toDateString();
            let dataHashCode_n = this.toHashCode(dateAsString_s);
            hashCode_n += dataHashCode_n;
        }
        else if ((0, IsNumber_1.default)(value_any)) {
            let value_n = value_any;
            hashCode_n = 31 * hashCode_n + value_n;
        }
        else if ((0, IsString_1.default)(value_any)) {
            // s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
            let value_s = value_any;
            let char_ary = value_s.split('');
            let size_i = char_ary.length;
            for (let index_i = 0; index_i < size_i; index_i++) {
                let charCode_n = char_ary[index_i].charCodeAt(0);
                hashCode_n += charCode_n * 31;
            }
        }
        return (hashCode_n);
    }
    static getHashCodeFromValue(value) {
        let hashCode = -1;
        if (value === undefined) {
            return (-17);
        }
        if (value === null) {
            return (-23);
        }
        if ((0, IsBoolean_1.default)(value)) {
            hashCode = value ? 1 : 0;
            return (hashCode);
        }
        if ((0, IsNumber_1.default)(value)) {
            hashCode = Math.floor(value);
            return (hashCode);
        }
        if ((0, IsString_1.default)(value)) {
            for (let i = 0; i < value.length; i++) {
                const char = value.charCodeAt(i);
                hashCode = (hashCode << 5) - hashCode + char; // hash * 31 + char
                hashCode |= 0; // Convert to 32-bit integer
            }
            return (hashCode);
        }
        if ((0, IsArray_1.IsArray)(value)) {
            let index = 0;
            let size = value.length;
            for (index = 0; index < size; index++) {
                let japb = value[index];
                hashCode += (japb.getHashCode() << 5) + japb.getHashCode();
            }
        }
        return (hashCode);
    }
}
exports.HashCodeUtil = HashCodeUtil;
HashCodeUtil.metaDataForHashCodeUtil = new MetaData();
//# sourceMappingURL=HashCodeUtil.js.map