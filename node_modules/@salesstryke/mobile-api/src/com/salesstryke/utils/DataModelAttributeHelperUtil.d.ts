import { Attribute } from "../data/entity/Attribute";
import { DataType } from "../data/entity/DataType";
import { TypeReference } from "../data/entity/TypeReference";
import { UIDataType } from "../data/entity/UIDataType";
import { ZodBoolean, ZodDate, ZodNumber, ZodString } from 'zod';
/**
 * Creates an attribute of datatype: Date, that is a Persistable.
 * ```
 * attributeUUID:               required
 * mutatedFlagAttributeUUID:    required
 * ```
 */
export interface ICreatedTimestamp {
    attributeUUID: string;
    mutatedFlagAttributeUUID: string;
}
/**
 * Creates an attribute of for the MongoDB _id, that is a Persistable.
 * ```
 * attributeUUID:               required
 * ```
 */
export interface IPersistableMongoID {
    attributeUUID: string;
}
/**
 * Creates an attribute of datatype: string, that is a Persistable that represent the
 * entity state: CREATE, DELETE, UPDATE.
 * ```
 * attributeUUID:               required
 * mutatedFlagAttributeUUID:    required
 * ```
 */
export interface IEntityPersistableType {
    attributeUUID: string;
    mutatedFlagAttributeUUID: string;
}
/**
 * Creates an attribute of datatype: string, that is a Persistable.
 * ```
 * attributeName:               required
 * attributeUUID:               required
 * comment:                     required
 * mongoIsIndexed:              optional, method will default to true
 * mongoIsRequired:             optional, method will default to true
 * mutatedFlagAttributeUUID:    required
 * ```
 */
export interface IPersistableString {
    attributeName: string;
    attributeUUID: string;
    comment: string;
    mongoIsIndexed?: boolean;
    mongoIsPersistable?: boolean;
    mongoIsRequired?: boolean;
}
declare class AddToRelationship {
    attributeName: string;
    getterMethodName: string;
    setterMethodName: string;
}
declare class CreatedDate {
    attributeName: string;
    getterMethodName: string;
    setterMethodName: string;
}
declare class RemoveFromRelationship {
    attributeName: string;
    getterMethodName: string;
    setterMethodName: string;
}
declare class EntityState {
    attributeName: string;
    getterMethodName: string;
    setterMethodName: string;
}
declare class InitializedDataKey {
    attributeName: string;
    getterMethodName: string;
    setterMethodName: string;
}
declare class JsonStateStr {
    attributeName: string;
    getterMethodName: string;
    setterMethodName: string;
}
declare class ModifiedDate {
    attributeName: string;
    getterMethodName: string;
    setterMethodName: string;
}
/**
 * ```
 * _relationshipPersistableType:
 * For relationships:
 *    MONGO_REF,
 *    MONGO_REF_ARRAY,
 *    MANY_TO_MANY,
 *    MANY_TO_ONE,
 *    ONE_TO_MANY,
 *    ONE_TO_ONE, identifies if the value is to be:
 *
 *    ATTACH         = 10:  identifies to attach an existing Entity by id to a MONGO_REF_ARRAY
 *    CREATE         = 20:  identifies to create a MONGO_REF is it does not contain an ObjectId.
 *    UPDATE         = 30:  identifies if the system is to update a MONGO_REF that is a member of an Entity.
 *    DETACH         = 40:  identifies to detach an existing Entity by id from a MONGO_REF_ARRY.
 *    DELETE         = 50:  identifies to delete a MONGO_REF if allowed.
 *    DELETE_CASCADE = 60:  identifies to cascase delete MONGO_REF items if allowed.
 * ```
 */
declare class RelationshipPersistableType {
    attributeName: string;
    getterMethodName: string;
    setterMethodName: string;
}
export declare class DataModelAttributeHelper {
    static _entityState: EntityState;
    static _initializedDataKey: InitializedDataKey;
    static _jsonState: JsonStateStr;
    static addToRelationship: AddToRelationship;
    static createdDate: CreatedDate;
    static modifiedDate: ModifiedDate;
    static removeFromRelationship: RemoveFromRelationship;
    static _relationshipPersistableType: RelationshipPersistableType;
    /**
     * _entityState : SystemAttribute
     * @param uuid_s
     * @returns
     */
    static getEntityState(uuid_s: string): Attribute;
    /**
     * The entity persistable type: CREATE, DELETE, UPDATE
     * @param iEntityPersistableType
     * @returns
     */
    static getEntityPersistableType(iEntityPersistableType: IEntityPersistableType): Attribute;
    /**
     * _idSetBySystem : SystemAttribute
     * @param uuid_s
     * @returns
     */
    static getIdSetBySystem(uuid_s: string): Attribute;
    /**
     * _initializedDataKey : SystemAttribute
     * @param uuid_s
     * @returns
     */
    static getIntializedDataKey(uuid_s: string): Attribute;
    static getJsonStateStr(uuid_s: string): Attribute;
    /**
     * Record: Indicates if a child record is to be added to a parent.
     * DataType.BOOLEAN
     *
     * @param uuid_s
     * @returns
     */
    static getAddToRelationship(uuid_s: string): Attribute;
    /**
     * createdDate
     * @param uuid_s
     * @returns
     */
    static getCreatedDate(uuid_s: string): Attribute;
    static getCreatedDate2(iCreatedTimestamp: ICreatedTimestamp): Attribute;
    /**
     * id
     * @param uuid_s
     * @returns
     */
    static getId(uuid_s: string): Attribute;
    /**
     * ```
     * Persistable STRING
     *      attributeName:  string, required
     *      uuid:           string, required
     *      comment:        string, optional
     *
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.STRING,
     *      UIDataType.TEXT_FIELD
     * ```
     * @param uuid_s
     * @returns
     */
    /**
     * ```
     * defaults
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     *   isMongoIndexed      : true
     *   isMongoRequired     : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableJsonString2(p: {
        attributeName: string;
        attributeUUID: string;
        comment: string;
        isTypeAlias?: boolean;
        isTypeAliasOptional?: boolean;
        isMongoIndexed?: boolean;
        isMongoRequired?: boolean;
        validator?: ZodBoolean | ZodDate | ZodNumber | ZodString;
        variableType: DataType | TypeReference;
    }): Attribute;
    /**
     * jsonType
     * @param uuid_s
     * @returns
     */
    static getJsonType(namespace_s: string, uuid_s: string): Attribute;
    /**
     * modifiedDate
     * @param uuid_s
     * @returns
     */
    static getModifiedDate(uuid_s: string): Attribute;
    /**
     * ```
     * type TGetMongoVirtualArrayAttribute =
     * {
     *     attributeName        :    string;
     *     attributeNameAsArray :    string;
     *     attributeNamespace   :    string;
     *     comment              :    string;
     *     virtualForeignField  :    string;
     *     virtualLocalField    :    string;
     *     virtualJustOne       :    boolean;
     *     virtualName          :    string;
     *     virtualRef           :    string;
     *     uuid                 :    string;
     * }
     * ```
     */
    static getMongoVirtualArrayAttribute(p: TGetMongoVirtualArrayAttribute): Attribute;
    static getRelationshipPersistableType(uuid_s: string): Attribute;
    static getRelationshipPersistableType2(p: {
        uuid: string;
    }): Attribute;
    /**
     * ```
     * Persistable BOOLEAN
     *      attributeName:  string, required
     *      uuid:           string, required
     *      comment:        string, optional
     *
     * Defaults:
     *      DataType.BOOLEAN,
     *      UIDataType.CHECKBOX
     * ```
     * @param uuid_s
     * @returns
     */
    static getPersistableBoolean(attributeName_s: string, uuid_s: string, comment_s?: string | null, uiViewOrder_i?: number, uiDataType?: UIDataType | null): Attribute;
    /**
     * ```
     * defaults:
     *   isMongoIndexed      : true
     *   isMongoRequired     : true
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableBoolean2(p: {
        attributeName: string;
        attributeUUID: string;
        comment: string;
        isMongoIndexed?: boolean;
        isMongoRequired?: boolean;
        isTypeAlias?: boolean;
        isTypeAliasOptional?: boolean;
    }): Attribute;
    static getPersistableCurrency(attributeName_s: string, uuid_s: string, comment_s?: string | null): Attribute;
    /**
     * ```
     * Persistable DATE
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     *      attributeName:  string, required
     *      uuid:           string, required
     *      comment:        string, optional
     *
     * Defaults:
     *      DataType.DATE
     * ```
     * @param uuid_s
     * @returns
     */
    static getPersistableDate(attributeName_s: string, uuid_s: string, comment_s?: string | null, uiViewOrder_i?: number, uiDefaultLabel_s?: string | null, uiDataType?: UIDataType | null): Attribute;
    /**
     * ```
     * defaults:
     *   isMongoIndexed      : true
     *   isMongoRequired     : true
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableDate2(p: {
        attributeName: string;
        attributeUUID: string;
        comment: string;
        isTypeAlias?: boolean;
        isTypeAliasOptional?: boolean;
        isMongoIndexed?: boolean;
        isMongoRequired?: boolean;
        validator?: ZodBoolean | ZodDate | ZodNumber | ZodString;
    }): Attribute;
    static getPersistableInteger(attributeName_s: string, uuid_s: string, comment_s?: string | null): Attribute;
    static getPersistableInteger2(p: {
        attributeName: string;
        attributeUUID: string;
        comment: string;
        includeInHistory?: boolean;
    }): Attribute;
    /**
     * ```
     * defaults:
     *   isMongoIndexed   : true
     *   isMongoRequired  : false
     * ```
     * @param p
     * @returns
     */
    static getPersistableMongoRefArray(p: {
        attributeName: string;
        attributeNameSingular: string;
        attributeUUID: string;
        comment: string | null;
        foreignRefEntityNamespace: string;
        mongoIsIndexed?: boolean;
        mongoIsRequired?: boolean;
    }): Attribute;
    /**
     * Persistable STRING
     * UIDataType is only added if uiViewOrder is greater than -1.
     * Mongo References by default are set as not required in the schema.
     *
     * Defaults:
     *      DataType.STRING,
     *      UIDataType.TEXT_FIELD
     *
     * @param uuid_s
     * @returns
     */
    static getPersistableMongoRef(attributeName_s: string, foreignRefEntityNamespace_s: string, uuid_s: string, comment_s?: string | null, uiViewOrder_i?: number, uiDefaultLabel_s?: string | null, uiDataType?: UIDataType | null): Attribute;
    /**
     * ```
     * defaults:
     *   isMongoIndexed   : false
     *   isMongoRequired  : false
     * ```
     * @param p
     * @returns
     */
    static getPersistableMongoRef2(p: {
        attributeName: string;
        attributeUUID: string;
        comment: string;
        foreignRefEntityNamespace: string;
        isMongoIndexed?: boolean;
        isMongoRequired?: boolean;
        validator?: ZodBoolean | ZodDate | ZodNumber | ZodString;
    }): Attribute;
    /**
     * Intended as a general JavaScript number.
     * @param attributeName_s
     * @param uuid_s
     * @param comment_s
     * @returns
     */
    static getPersistableNumber(attributeName_s: string, uuid_s: string, comment_s?: string | null): Attribute;
    /**
     * ```
     * defaults
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     *   mongoIsIndexed      : true
     *   mongoIsRequired     : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableNumber2(p: {
        attributeName: string;
        attributeUUID: string;
        comment: string;
        isMongoIndexed?: boolean;
        isMongoRequired?: boolean;
        isTypeAlias?: boolean;
        isTypeAliasOptional?: boolean;
        validator?: ZodBoolean | ZodDate | ZodNumber | ZodString;
    }): Attribute;
    /**
     * ```
     * OneToMany
     * attributeName_s:                string
     * attributeNameSingular_s:        string
     * foreignRefEntityNamespace_s:    string
     * foreignField_s:                 string
     * uuid_s:                         string
     * comment_s:                      string | null       = null
     * ```
     * @param attributeName_s
     * @param attributeNameSingular_s
     * @param foreignRefEntityNamespace_s
     * @param uuid_s
     * @param uiViewOrder_i
     * @param uiDefaultLabel_s
     * @param uiDataType
     * @returns
     */
    static getPersistableMongoVirtualArray(attributeName_s: string, attributeNameSingular_s: string, foreignRefEntityNamespace_s: string, foreignField_s: string, uuid_s: string, comment_s?: string | null, uiViewOrder_i?: number, uiDefaultLabel_s?: string | null, uiDataType?: UIDataType | null): Attribute;
    /**
     * ```
     * Persistable STRING
     *      attributeName:  string, required
     *      uuid:           string, required
     *      comment:        string, optional
     *
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.STRING,
     *      UIDataType.TEXT_FIELD
     * ```
     * @param uuid_s
     * @returns
     */
    static getPersistableString(attributeName_s: string, uuid_s: string, comment_s?: string | null, uiViewOrder_i?: number, uiDefaultLabel_s?: string | null, uiDataType?: UIDataType | null): Attribute;
    /**
     * ```
     * defaults
     *   isMongoIndexed      : true
     *   isMongoRequired     : true
     *   isTypeAlias         : true
     *   isTypeAliasOptional : true
     * ```
     * @param p
     * @returns
     */
    static getPersistableString2(p: {
        attributeName: string;
        attributeUUID: string;
        comment: string;
        includeInHistory?: boolean;
        isMongoIndexed?: boolean;
        isMongoRequired?: boolean;
        isTypeAlias?: boolean;
        isTypeAliasOptional?: boolean;
        validator?: ZodBoolean | ZodDate | ZodNumber | ZodString;
    }): Attribute;
    static getRecordArrayOfStrings(p: {
        attributeName: string;
        comment: string | null;
        typeScriptAddItemMethodName: string;
        uuid: string;
    }): Attribute;
    /**
     * Record BOOLEAN
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.BOOLEAN,
     *      UIDataType.CHECKBOX
     *
     * @param uuid_s
     * @returns
     */
    static getRecordBoolean(attributeName_s: string, uuid_s: string, comment_s?: string | null, uiViewOrder_i?: number, uiDefaultLabel_s?: string | null, uiDataType?: UIDataType | null): Attribute;
    static getRecordManyToOne(attributeName_s: string, foreignRefEntityNamespace_s: string, uuid_s: string, comment_s?: string | null): Attribute;
    /**
     *
     * @param attributeName_s
     * @param attributeNameSingular_s
     * @param foreignRefEntityNamespace_s
     * @param uuid_s
     * @param uiViewOrder_i
     * @param uiDefaultLabel_s
     * @param uiDataType
     * @returns
     */
    static getRecordOneToMany(attributeName_s: string, attributeNameSingular_s: string, foreignRefEntityNamespace_s: string, uuid_s: string, comment_s?: string | null): Attribute;
    /**
     * Persistable NUMBER
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.NUMBER
     *
     * @param uuid_s
     * @returns
     */
    static getRecordCurrency(attributeName_s: string, uuid_s: string, comment_s?: string | null): Attribute;
    /**
     * ```
     * attributeName_s:    string,
     * uuid_s:             string,
     * comment_s:          string | null       = null
     * ```
     * @param attributeName_s
     * @param uuid_s
     * @param comment_s
     * @returns
     */
    static getRecordDate(attributeName_s: string, uuid_s: string, comment_s?: string | null): Attribute;
    static getRecordInteger(attributeName_s: string, uuid_s: string, comment_s?: string | null, uiViewOrder_i?: number, uiDefaultLabel_s?: string | null, uiDataType?: UIDataType | null): Attribute;
    static getRecordNumber(attributeName_s: string, uuid_s: string, comment_s?: string | null): Attribute;
    /**
     * ```
     * attributeName_s:    string,
     * uuid_s:             string,
     * comment_s:          string | null       = null,
     * ```
     * Persistable STRING
     * UIDataType is only added if uiViewOrder is greater than -1.
     *
     * Defaults:
     *      DataType.STRING,
     *      UIDataType.TEXT_FIELD
     *
     * @param uuid_s
     * @returns
     */
    static getRecordString(attributeName_s: string, uuid_s: string, comment_s?: string | null, uiViewOrder_i?: number, uiDefaultLabel_s?: string | null, uiDataType?: UIDataType | null): Attribute;
    /**
     * Identifies if an Entity is to be removed from an MONGO_REF_ARRAY when doing Transaction.save(entity);
     * @param uuid_s
     * @returns
     */
    static getRemoveFromRelationship(uuid_s: string): Attribute;
}
export type TGetMongoVirtualArrayAttribute = {
    attributeName: string;
    attributeNameAsArray: string;
    attributeNamespace: string;
    comment: string;
    virtualForeignField: string;
    virtualLocalField: string;
    virtualJustOne: boolean;
    virtualName: string;
    virtualRef: string;
    uuid: string;
};
export {};
/**
 * ```
 * type TGetPersistableMongoRefArray =
 * {
 *     attributeName: string;
 *     attributeNameSingular: string;
 *     comment: string | null;
 *     foreignRefEntityNamespace: string;
 *     uuid: string;
 * }
 * ```
 */
