import { PersistenceType } from "../data/PersistenceType";
import { DataType } from "../data/entity/DataType";
import { TypeReference } from "../data/entity/TypeReference";
import { JsonApiBase } from "./JsonApiBase";
declare class MongoAttributes {
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _id: string;
    jsonType: string;
    modifiedDate: string;
}
declare class MetaData {
    namespace: string;
    mongoAttributes: MongoAttributes;
}
export declare class JsonApiPersistableBase extends JsonApiBase {
    static metaDataForJsonApiPersistableBase: MetaData;
    protected _entityState: string | null;
    /**
     * Identifies if the given Entity has been persisted during the current save.
     */
    private _hasBeenPersisted_b;
    private _isUserSetId_b;
    private _isMutateSuppressed_b;
    /**
     * In a transaction, while persisting, we want to prevent an infinite loop of a child attempting to save the parent, that saves the child that saves the parent  ....
     *
     */
    private _isPersistTraversalComplete;
    private _savedMongoDoc_any;
    protected createdDate: Date | null;
    protected modifiedDate: Date | null;
    protected entityStateAuditor: EntityStateManager;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    _getHashCode2(): number;
    _getIsPersistTraversalComplete(): boolean;
    /**
     * Did the user set the id.
     * @returns
     */
    _getIsUserSetId(): boolean;
    /**
     * ```
     * For relationships:
     *    MONGO_REF,
     *    MONGO_REF_ARRAY,
     *    MANY_TO_MANY,
     *    MANY_TO_ONE,
     *    ONE_TO_MANY,
     *    ONE_TO_ONE, identifies if the value is to be:
     *
     *    ATTACH         = 10:  identifies to attach an existing Entity by id to a MONGO_REF_ARRAY
     *    CREATE         = 20:  identifies to create a MONGO_REF is it does not contain an ObjectId.
     *    UPDATE         = 30:  identifies if the system is to update a MONGO_REF that is a member of an Entity.
     *    DETACH         = 40:  identifies to detach an existing Entity by id from a MONGO_REF_ARRY.
     *    DELETE         = 50:  identifies to delete a MONGO_REF if allowed.
     *    DELETE_CASCADE = 60:  identifies to cascase delete MONGO_REF items if allowed.
     * ```
     */
    _getRelationshipPersistableType(): number;
    _getSavedMongoDoc(): any;
    /**
     * Sets all isMutated flags to be false.
     * @param isMutated_b
     * @returns
     */
    _clearIsMutated(): JsonApiPersistableBase;
    getClassName(): string;
    getCreatedDate(): Date | null;
    getId(): string | null;
    getModifiedDate(): Date | null;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    _getHasBeenPersisted(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     * If this Entity is in an array, setting this to true indicates that the value will be persisted as part of the
     * array, if false, will not be persisted as part of the array.
     * @returns
     */
    _getIsAddToRelationship(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     */
    _getIsIdSetBySystem(): boolean;
    _getIsMutateSuppressed(): boolean;
    _getIsRemoveFromRelationship(): boolean;
    static getSimpleName(): string;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): JsonApiPersistableBase;
    setCreatedDate(createdDate: Date | null): JsonApiPersistableBase;
    setModifiedDate(modifiedDate: Date | null): JsonApiPersistableBase;
    _setHasBeenPersisted(hasBeenPersisted_b: boolean): JsonApiPersistableBase;
    /**
     * Did the user set the id.
     * @returns
     */
    _setIsUserSetId(isUserSetId: boolean): JsonApiPersistableBase;
    setId(id: string | null): JsonApiPersistableBase;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     */
    _setInitializedDataKey(initializedDataKey: string | null): JsonApiPersistableBase;
    _isMutated(p: {
        obj0: any;
        obj1: any;
    }): boolean;
    _getInitialAttributeState(p: {
        name: string;
    }): any;
    _getIsMutatedFromMap(): boolean;
    _setInitialAttributesState(): JsonApiPersistableBase;
    /**
     * Used to track the initial state of an Attribute. Is used to identify if an attribute has mutated.
     * @param p
     * @returns
     */
    _setInitialAttributeState(p: {
        name: string;
        value: any;
    }): JsonApiPersistableBase;
    _setIsAddToRelationship(value_b: boolean): JsonApiPersistableBase;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): JsonApiPersistableBase;
    _setIsMutateSuppressed(_isMutateSuppressed_b: boolean): JsonApiPersistableBase;
    _setIsPersistTraversalComplete(isPersistTraversalComplete: boolean): JsonApiPersistableBase;
    _setIsRemoveFromRelationship(value_b: boolean): JsonApiPersistableBase;
    /**
     * ```
     * For relationships:
     *    MONGO_REF,
     *    MONGO_REF_ARRAY,
     *    MANY_TO_MANY,
     *    MANY_TO_ONE,
     *    ONE_TO_MANY,
     *    ONE_TO_ONE, identifies if the value is to be:
     *
     *    ATTACH         = 10:  identifies to attach an existing Entity by id to a MONGO_REF_ARRAY
     *    CREATE         = 20:  identifies to create a MONGO_REF is it does not contain an ObjectId.
     *    UPDATE         = 30:  identifies if the system is to update a MONGO_REF that is a member of an Entity.
     *    DETACH         = 40:  identifies to detach an existing Entity by id from a MONGO_REF_ARRY.
     *    DELETE         = 50:  identifies to delete a MONGO_REF if allowed.
     *    DELETE_CASCADE = 60:  identifies to cascase delete MONGO_REF items if allowed.
     * ```
     */
    _setRelationshipPersistableType(relationshipPersistableType: number): JsonApiPersistableBase;
    _setSavedMongoDoc(savedMongoDoc_any: any): JsonApiPersistableBase;
}
/**
 * TODO: deprecate this.
 * An entity can have many attributes. An Attribute can have a single value or an Array of values.
 */
export declare class EntityStateManager {
    /**
     * string is attributeName.
     */
    private attributeAuditByAttributeName_map;
    private entity;
    constructor(p: {
        entity: JsonApiPersistableBase;
    });
    private attributeExistsOrThrow;
    addRelationship(p: {
        attributeName: string;
        relation: JsonApiPersistableBase;
        persistanceType: PersistenceType;
    }): void;
    attachMongoRefItem(p: {
        attributeName: string;
        dataType?: DataType;
        initialActiveState: any;
        isMutateSuppresed: boolean;
        item: any;
        persistanceType: PersistenceType;
        typeReference?: TypeReference;
    }): void;
    clear(): void;
    clearIsMutated(): void;
    private initializeAttributeState;
}
export {};
