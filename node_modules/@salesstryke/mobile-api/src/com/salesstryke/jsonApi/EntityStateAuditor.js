"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityStateAuditor = void 0;
const debug_1 = require("debug");
const data_1 = require("../data");
const CloneUtils_1 = require("../utils/CloneUtils");
class ItemAudit {
    constructor(p) {
        this.initialState = p.itemValue;
        this.initialPersistenceType = p.persistenceType;
    }
    getInitialState() {
        return (this.initialState);
    }
    getInitialPersistenceType() {
        return (this.initialPersistenceType);
    }
}
class AttributeAudit {
    constructor(p) {
        // The attribute array at the begining of the audit. This is a clone
        this.initialAttributeValueAry = new Array();
        // The attribute array values 
        this.activeAttributeValueAry = new Array();
        this.itemAudit_map = new Map();
        this.attributeName = p.attributeName;
        if (p.attributeValueAry) {
            this.initialAttributeValueAry = CloneUtils_1.Clone.cloneEntityArray({ jsonApiBase: this.initialAttributeValueAry });
            this.activeAttributeValueAry = p.attributeValueAry;
        }
        debug_1.default;
    }
    getItemPreviousState(p) {
        let index_i = 0;
        let previousState = undefined;
        index_i = p.attributeValues.indexOf(p.entity);
        if (index_i >= 0) {
            previousState = p.attributeValues[index_i];
            return (previousState);
        }
        return (previousState);
    }
    setAttachOrDetach(p) {
        // Set the Relationship status of the item
        p.itemValue._setRelationshipPersistableType(p.persistenceType.getId());
        if (p.persistenceType === data_1.PersistenceType.ATTACH) {
            p.itemValue._setIsAddToRelationship(true);
            p.itemValue._setIsRemoveFromRelationship(false);
        }
        else if (p.persistenceType === data_1.PersistenceType.DETACH) {
            p.itemValue._setIsAddToRelationship(false);
            p.itemValue._setIsRemoveFromRelationship(true);
        }
    }
    setState(p) {
        let item = p.entity;
        let hashCode = item.getHashCode();
        //   let attributeValue_ary : Array<JsonApiPersistableBase> = this.initialAttributeValueAry as Array<JsonApiPersistableBase>;
        let initialItemState = this.getItemPreviousState({ attributeValues: this.initialAttributeValueAry, entity: p.entity });
        let activeItemState = this.getItemPreviousState({ attributeValues: this.activeAttributeValueAry, entity: p.entity });
        // let initialItemState   : JsonApiPersistableBase | undefined = this.initialAttributeValueAry.find(obj => { obj.getHashCode() === hashCode });
        // let activeItemState    : JsonApiPersistableBase | undefined = this.activeAttributeValueAry.find(obj => { obj.getHashCode() === hashCode });
        let inInitalData_b = this.initialAttributeValueAry.includes(p.entity);
        let inActiveData_b = this.activeAttributeValueAry.includes(p.entity);
        if (inInitalData_b) {
            if (!activeItemState) {
                let itemAudit = new ItemAudit({ itemValue: p.entity, persistenceType: p.persistenceType });
                this.itemAudit_map.set;
            }
        }
        else {
            if (!inActiveData_b) {
                let itemAudit = new ItemAudit({ itemValue: p.entity, persistenceType: p.persistenceType });
                //this.itemAudit_map
                this.activeAttributeValueAry.push(p.entity);
            }
        }
    }
}
/**
 * An entity can have many attributes. An Attribute can have a single value or an Array of values.
 */
class EntityStateAuditor {
    constructor() {
        /**
         * string is attributeName.
         */
        this.attributeAuditByAttributeName_map = new Map();
    }
    addRelationship(p) {
        let attributeAudit = undefined;
        attributeAudit = this.attributeAuditByAttributeName_map.get(p.attributeName);
        if (attributeAudit) {
            attributeAudit.setState({ entity: p.itemValue, persistenceType: p.persistanceType });
            return;
        }
        else {
            attributeAudit = new AttributeAudit({ attributeName: p.attributeName, attributeValueAry: p.attributeValueAry });
            attributeAudit.setState({ entity: p.itemValue, persistenceType: p.persistanceType });
            this.attributeAuditByAttributeName_map.set(p.attributeName, attributeAudit);
            return;
        }
    }
    clear() {
        this.attributeAuditByAttributeName_map.clear();
    }
}
exports.EntityStateAuditor = EntityStateAuditor;
//# sourceMappingURL=EntityStateAuditor.js.map