"use strict";
/*
 * Copyright (C) OmniStation, Inc - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Martin C. Euerle, <meuerle@omnistation.com>,  2019.10.14
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptToJsonApi = void 0;
const DataType_1 = require("../../data/entity/DataType");
const EntityManager_1 = require("../../data/EntityManager");
const ErrorBase_1 = require("../../lang/ErrorBase");
const LogManager_1 = require("../../utils/log/LogManager");
const JsonApiBase_1 = require("../JsonApiBase");
const JsonApiErrorMeta_1 = require("../JsonApiErrorMeta");
const JsonApiPropertyType_1 = require("../JsonApiPropertyType");
const JSONArray_1 = require("../util/JSONArray");
const JSONObject_1 = require("../util/JSONObject");
const EntityWebReflectionUtils_1 = require("../util/EntityWebReflectionUtils");
const JsonApiQuery_1 = require("../JsonApiQuery");
const QueryParam_1 = require("../util/QueryParam");
const QueryParamArray_1 = require("../util/QueryParamArray");
const LogLevel_1 = require("../../utils/log/LogLevel");
const debug_1 = require("debug");
/**
{
  "data": [],
  "errors": [],
  "query": {
    "pageNumber": 5,
    "pageSize": 20,
    "resultCount": 0,
    "queryParams": [
      {
        "dataType" : "STRING", // boolean, number, null, string
        "type" : "com.salesstryke.jsonapi.QueryParam",
        //"workspaceId": "62fd2289e3ff987898ed6538" change from this
        "name": "workspaceId",                  // this
        "value": "62fd2289e3ff987898ed6538"     // and this
      },
      {
        "dataType" : "STRING", // boolean, number, null, string
        "type" : "com.salesstryke.jsonapi.QueryParamArray",
        "name": "names"
        "data" : [
            'Monty',
            'James',
            ...
        ]
      }


    ]
  }
}
 */
const NAMESPACE = "com.salesstryke.jsonapi.transform.TypeScriptToJsonApi";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
LOGGER.setLogLevel(LogLevel_1.Level.ERROR);
// NOTE: not converting from entity to json properly.
class TypeScriptToJsonApi {
    typeScriptClassToJson(jsonApi) {
        let json_s = '';
        const jsonObject = this.mapJsonApiResourceObject(jsonApi);
        json_s = jsonObject.toString();
        return (json_s);
    }
    /**
     *
     */
    execute(jsonApiDocument_p) {
        let json_s_m = "";
        try {
            const jsonObject_m = this.getJSONObject(jsonApiDocument_p);
            json_s_m = jsonObject_m.toString();
        }
        catch (error_any) {
            const error = error_any;
            const errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, this.execute.name, "96966742-2e6d-4448-9aa0-34390c5e00b9", error);
            if (LOGGER.isErrorEnabled()) {
                LOGGER.logErrorBase(errorBase);
            }
        }
        return (json_s_m);
    }
    static entityToJson(entity) {
        let json_s = '';
        try {
            json_s = new TypeScriptToJsonApi().typeScriptClassToJson(entity);
        }
        catch (error_any) {
            const errorBase = new ErrorBase_1.ErrorBase('Failed', NAMESPACE, this.entityToJson.name, '86e0721c-f619-4604-a2a9-3925e771041b', error_any);
            if (LOGGER.isErrorEnabled()) {
                LOGGER.logErrorBase(errorBase);
            }
            throw (errorBase);
        }
        return (json_s);
    }
    /**
     *
     */
    getJSONObject(jsonApiDocument_p) {
        const jsonObject_m = new JSONObject_1.JSONObject();
        this.mapJsonApiDocument(jsonObject_m, jsonApiDocument_p);
        return (jsonObject_m);
    }
    /**
     *
     */
    mapJsonApiDocument(jsonObject_p, jsonApiDocument_p) {
        const data_ja = new JSONArray_1.JSONArray();
        const errors_ja = new JSONArray_1.JSONArray();
        // data
        const data_lst_m = jsonApiDocument_p.getData();
        let index_i_m = 0;
        for (index_i_m = 0; index_i_m < data_lst_m.length; index_i_m++) {
            const dataItem_m = data_lst_m[index_i_m];
            const persistableBase_m = dataItem_m;
            const jsonApiResourceObject_jo_m = this.mapJsonApiResourceObject(persistableBase_m);
            data_ja.put(jsonApiResourceObject_jo_m);
        }
        jsonObject_p.put("data", data_ja);
        // errors
        const errors_lst_m = jsonApiDocument_p.getErrors();
        for (index_i_m = 0; index_i_m < errors_lst_m.length; index_i_m++) {
            const jsonApiError_m = errors_lst_m[index_i_m];
            const jsonApiError_jo_m = this.mapJsonApiError(jsonApiError_m);
            errors_ja.put(jsonApiError_jo_m);
        }
        jsonObject_p.put("errors", errors_ja);
        // pagination
        const pagination = jsonApiDocument_p.getQuery();
        if (pagination) {
            const pagination_jo = this.mapPagination(pagination);
            jsonObject_p.put(JsonApiQuery_1.JsonApiQuery.metadata.jsonName, pagination_jo);
        }
    }
    /**
     *
     */
    mapJsonApiError(jsonError) {
        const error_jo = new JSONObject_1.JSONObject();
        const code_s = jsonError.getCode();
        const detail_s = jsonError.getDetail();
        const id_s = jsonError.getId();
        const meta = jsonError.getMeta();
        const status_s = jsonError.getStatus();
        const title_s = jsonError.getTitle();
        if (code_s !== null) {
            error_jo.put("code", code_s);
        }
        if (detail_s !== null) {
            error_jo.put("detail", detail_s);
        }
        if (id_s !== null) {
            error_jo.put("id", id_s);
        }
        if (meta !== null) {
            const meta_jo = new JSONObject_1.JSONObject();
            const endPoint_s = meta.getEndPoint() || '';
            const jsonApiErrorMetaErrorType = meta.getErrorType();
            const jsonApiErrorMetaErrorType_s = jsonApiErrorMetaErrorType.toString();
            const i18nKey_s = meta.getI18nKey();
            const methodName_s = meta.getMethodName() || "";
            const namespace_s = meta.getNamespace() || "";
            const securityAttributeUUID_s = meta.getSecurityAttributeUUID();
            const uiUUID_s = meta.getUIUUID();
            //JsonApiErrorMeta.metaData.jsonAttribute
            meta_jo.put(JsonApiErrorMeta_1.JsonApiErrorMeta.metaData.jsonAttribute.endPoint, endPoint_s);
            meta_jo.put(JsonApiErrorMeta_1.JsonApiErrorMeta.metaData.jsonAttribute.errorType, jsonApiErrorMetaErrorType_s);
            meta_jo.put(JsonApiErrorMeta_1.JsonApiErrorMeta.metaData.jsonAttribute.i18nKey, i18nKey_s);
            meta_jo.put(JsonApiErrorMeta_1.JsonApiErrorMeta.metaData.jsonAttribute.methodName, methodName_s);
            meta_jo.put(JsonApiErrorMeta_1.JsonApiErrorMeta.metaData.namespace, namespace_s);
            meta_jo.put(JsonApiErrorMeta_1.JsonApiErrorMeta.metaData.jsonAttribute.securityAttributeUUID, securityAttributeUUID_s);
            meta_jo.put(JsonApiErrorMeta_1.JsonApiErrorMeta.metaData.jsonAttribute.uiUUID, uiUUID_s);
            error_jo.put("meta", meta_jo);
        }
        if (status_s != null) {
            error_jo.put("status", status_s);
        }
        if (title_s !== null) {
            error_jo.put("title", title_s);
        }
        return (error_jo);
    }
    mapPagination(query) {
        const query_jo = new JSONObject_1.JSONObject();
        const queryParam_ja = new JSONArray_1.JSONArray();
        const pageNumber_i = query.getPageNumber();
        const pageSize_i = query.getPageSize();
        const queryParam_ary = query.getQueryParams(); // QueryParamBase
        const resultCount_i = query.getResultCount();
        query_jo.put(JsonApiQuery_1.JsonApiQuery.metadata.attributes.pageNumber, pageNumber_i);
        query_jo.put(JsonApiQuery_1.JsonApiQuery.metadata.attributes.pageSize, pageSize_i);
        query_jo.put(JsonApiQuery_1.JsonApiQuery.metadata.attributes.resultCount, resultCount_i);
        queryParam_ary.forEach((queryParam) => {
            const queryParam_jo = new JSONObject_1.JSONObject();
            queryParam_jo.put('name', queryParam.getName());
            queryParam_jo.put('entity', queryParam.getEntityType());
            queryParam_jo.put('dataType', queryParam.getDataType());
            if (queryParam instanceof QueryParam_1.QueryParam) {
                queryParam_jo.put('value', queryParam.getValue());
            }
            else if (queryParam instanceof QueryParamArray_1.QueryParamArray) {
                queryParam_jo.put('values', new JSONArray_1.JSONArray(queryParam.getArrayValue()));
            }
            queryParam_ja.put(queryParam_jo);
        });
        query_jo.put(JsonApiQuery_1.JsonApiQuery.metadata.attributes.queryParams, queryParam_ja);
        return (query_jo);
    }
    /**
     *
     */
    mapJsonApiRelation(persistableBase_p, attribute /*ObjectMapElement*/) {
        const relationships_ja_m = new JSONArray_1.JSONArray();
        const objectListRef_m = null; //objectMapElement_p.getObjectRefArray();
        const getterName_s_m = attribute.getTypeScriptGetterMethodName(); //null; //objectMapElement_p.getGetterFunctionName();
        const relations_obj_m = EntityWebReflectionUtils_1.EntityWebReflectionUtils.getPersistableBase(persistableBase_p, getterName_s_m);
        if (relations_obj_m == null) {
            return (relationships_ja_m);
        }
        else if (relations_obj_m instanceof JsonApiBase_1.JsonApiBase) {
            const entityBase_m = relations_obj_m;
            const jsonResourceObject_jo_m = this.mapJsonApiResourceObject(entityBase_m);
            relationships_ja_m.put(jsonResourceObject_jo_m);
        }
        else if (relations_obj_m instanceof Array) {
            const list_m = relations_obj_m;
            let index_i_m = 0;
            for (index_i_m = 0; index_i_m < list_m.length; index_i_m++) {
                const persistableBase_m = list_m[index_i_m];
                if (persistableBase_m != null) {
                    const listItem_jo_m = this.mapJsonApiResourceObject(persistableBase_m);
                    relationships_ja_m.put(listItem_jo_m);
                }
            }
        }
        return (relationships_ja_m);
    }
    mapJsonApiResourceObject(typeScriptBase_p) {
        let jab_any = typeScriptBase_p;
        if (jab_any._getJsonStateStr2) {
            jab_any._getJsonStateStr2();
        }
        const namespace = jab_any.getClassName();
        const jsonResourceObject_m = new JSONObject_1.JSONObject();
        const entityWrapper = EntityManager_1.EntityManager.getInstance().getEntityWrapperByNamespace(namespace);
        let attributes = null;
        const jsonAttribute_m = new JSONObject_1.JSONObject();
        const relationships_jo = new JSONObject_1.JSONObject();
        let relationships_ja = new JSONArray_1.JSONArray();
        let index_i_m = 0;
        let value_any = null;
        let value_s = null;
        if (entityWrapper) {
            attributes = entityWrapper.getAllAttributes();
        }
        else {
            const error = new Error(`namespace:${namespace} Missing EntityWrapper. Was this added to SalesStrykeEntityClientModule?`);
            throw error;
        }
        if (namespace.includes('ImportDataAttributeType')) {
            const noop_s = '';
        }
        if (attributes !== null) {
            for (index_i_m = 0; index_i_m < attributes.length; index_i_m++) {
                const attribute = attributes[index_i_m];
                const attributeName_s = attribute.getTypeScriptAttributeName();
                const dataType = attribute.getDataType();
                const jsonName_s = attribute.getJsonAttributeName();
                let jsonRelationship_s = null;
                const getterName_s = attribute.getTypeScriptGetterMethodName();
                const jsonApiPropertyType = attribute.getJsonApiPropertyType();
                if (attributeName_s.includes('_jsonStateStr2')) {
                    let noop = 0;
                }
                if (dataType === DataType_1.DataType.JSON_STRING) {
                    debug_1.default;
                }
                if (attributeName_s === 'ImportDataAttributeType') {
                    const noop_s = '';
                }
                if (jsonApiPropertyType === null) {
                    throw new Error(`${NAMESPACE}.${this.mapJsonApiResourceObject.name} JsonApiPropertyType MUST not be null. Namespace:${namespace}.${attributeName_s}`);
                }
                if (LOGGER.isInfoEnabled()) {
                    LOGGER.logInfo({ message: `attribute name: ${jsonName_s}`, methodName: this.mapJsonApiResourceObject.name, uuid: '131b01b5-59bc-4ad6-9837-f51e69595e8d' });
                }
                if (jsonName_s === "id") {
                    value_any = EntityWebReflectionUtils_1.EntityWebReflectionUtils.getValue(attribute, typeScriptBase_p, getterName_s);
                    value_s = null;
                    if (value_any !== null) {
                        value_s = value_any.toString();
                    }
                    jsonResourceObject_m.put("id", value_s);
                }
                else if (jsonName_s === "type") {
                    value_any = EntityWebReflectionUtils_1.EntityWebReflectionUtils.getValue(attribute, typeScriptBase_p, getterName_s);
                    value_s = namespace;
                    jsonResourceObject_m.put("type", value_s);
                }
                else if (jsonApiPropertyType === JsonApiPropertyType_1.JsonApiPropertyType.FIELD) {
                    if (jsonName_s != null) {
                        value_any = EntityWebReflectionUtils_1.EntityWebReflectionUtils.getValue(attribute, typeScriptBase_p, getterName_s);
                        if (value_any
                            && (dataType === DataType_1.DataType.JSON_STRING)) {
                            // value_any is an object, needs to be a string
                            value_any = JSON.stringify(value_any);
                            // need to encode the object
                            value_any = encodeURI(value_any);
                        }
                        jsonAttribute_m.put(jsonName_s, value_any);
                    }
                }
                else if (jsonApiPropertyType === JsonApiPropertyType_1.JsonApiPropertyType.RELATIONSHIPS) {
                    relationships_ja = this.mapJsonApiRelation(typeScriptBase_p, attribute);
                    jsonRelationship_s = jsonName_s;
                    const relationship_jo = new JSONObject_1.JSONObject();
                    relationship_jo.put("data", relationships_ja);
                    relationships_jo.put(jsonRelationship_s, relationship_jo);
                }
            }
        }
        jsonResourceObject_m.put("attributes", jsonAttribute_m);
        jsonResourceObject_m.put("relationships", relationships_jo);
        return (jsonResourceObject_m);
    }
}
exports.TypeScriptToJsonApi = TypeScriptToJsonApi;
//# sourceMappingURL=TypeScriptToJsonApi.js.map