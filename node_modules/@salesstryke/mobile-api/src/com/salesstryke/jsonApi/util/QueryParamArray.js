"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryParamArray = void 0;
const DataType_1 = require("../../data/entity/DataType");
const QueryParamBase_1 = require("../QueryParamBase");
class QueryParamArray extends QueryParamBase_1.QueryParamBase {
    constructor(name, dataType, values) {
        super(name, dataType);
        this.values = new Array();
        this.setEntityType(QueryParamArray.entityType);
        if (values) {
            this.values = values;
        }
    }
    addValue(value_any) {
        this.values.push(value_any);
        return (this);
    }
    getArrayValue() {
        return this.values;
    }
    /**
     * If dataType is not string return empty array
     * @returns Array<string>
     */
    getArrayValueAsString() {
        if (this.getDataType() === DataType_1.DataType.STRING.getId()) {
            return this.values;
        }
        return [];
    }
    /**
     * If dataType is not FLOAT return empty array
     * @returns Array<string>
     */
    getArrayValueAsNumber() {
        if (this.getDataType() === DataType_1.DataType.FLOAT.getId()) {
            return this.values;
        }
        return [];
    }
    /**
     * If dataType is not Date return empty array
     * @returns Array<string>
     */
    getArrayValueAsDate() {
        if (this.getDataType() === DataType_1.DataType.DATE.getId()) {
            return this.values.map(value => {
                if (value instanceof Date) {
                    return value;
                }
                // Date is converted to string when transforming form TypscriptToJsonApi
                else if (typeof value === 'string') {
                    return new Date(value);
                }
                return new Date();
            });
        }
        return [];
    }
    setValues(values) {
        this.values = values;
    }
}
exports.QueryParamArray = QueryParamArray;
QueryParamArray.entityType = 'com.salesstryke.jsonapi.QueryParamArray';
//# sourceMappingURL=QueryParamArray.js.map