import { Attribute } from "../../data/entity/Attribute";
import { JsonApiBase } from "../JsonApiBase";
import { JSONObject } from "./JSONObject";
import { EntityWrapper } from "../../data/EntityWrapper";
export declare class EntityWebReflectionUtils {
    #private;
    static getPersistableBase(object_p: any | null, getterName_s_p: string | null): Attribute | null;
    /**
     * Given an Object, an Attribute, return the number if it exists, otherwise return the default value.
     * @param attribute
     * @param object_any
     * @param defaultValue_n
     * @returns
     */
    static getValueAsNumber(attribute: Attribute, object_any: any, defaultValue_n: number): number;
    /**
     * ```
     * Return a value for attribute, if not found return null.
     * ```
     * @param attribute
     * @param object_any
     * @param getterName_s
     * @returns
     */
    static getValue(attribute: Attribute, object_any: any, getterName_s?: string | null): boolean | Date | null | number | object | string;
    static getValueFromMongoDB(entityWrapper: EntityWrapper, attribute: Attribute, object_any: any): boolean | Date | null | number | object | string;
    /**
     *
     * This sets the value of an Entity attribute by directly set the attribute value, not by calling a getter or setter.
     * @param p
     */
    static setEntityAttribute(p: {
        attribute: Attribute;
        instanceObj: any;
        value: boolean | Date | JsonApiBase | number | string;
    }): void;
    static setValueFromJsonObject(jsonApiBase: any, jsonObject_p: JSONObject, attribute: Attribute): void;
    static setValueFromAny(jsonApiBase: any, value_any: any, attribute: Attribute, persistenceType?: number | null): void;
    static setReference(root_p: any, reference_p: JsonApiBase, objectMapElement_p: Attribute): void;
    static setReferenceArray(root_p: any, reference_p: JsonApiBase, objectMapElement_p: Attribute): void;
}
