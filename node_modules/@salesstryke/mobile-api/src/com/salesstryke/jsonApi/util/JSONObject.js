"use strict";
var _a, _JSONObject_constructorFunctionName;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONObject = void 0;
const tslib_1 = require("tslib");
const ErrorBase_1 = require("../../lang/ErrorBase");
const LogManager_1 = require("../../utils/log/LogManager");
const JSONArray_1 = require("./JSONArray");
const Exists_1 = require("../../utils/object/Exists");
const IsBoolean_1 = require("../../utils/object/IsBoolean");
const IsNumber_1 = require("../../utils/object/IsNumber");
const IsString_1 = require("../../utils/object/IsString");
const ToBoolean_1 = require("../../utils/object/ToBoolean");
const ToNumber_1 = require("../../utils/object/ToNumber");
const NAMESPACE = "com.salesstryke.jsonapi.util.JSONObject";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class JSONObject {
    constructor(json_any = null) {
        // the output for toString
        this.json_s = "";
        this.jsonObject_map = new Map();
        try {
            if ((0, Exists_1.Exists)(json_any)) {
                if ((0, IsString_1.default)(json_any)) {
                    let json_s = "";
                    if (json_any !== null) {
                        json_s = json_any;
                    }
                    let json_obj = JSON.parse(json_s);
                    this.jsonObject_map = this.toMap(json_obj);
                }
                else if (json_any instanceof Map) {
                    this.jsonObject_map = this.toMap(json_any);
                }
                else {
                    this.jsonObject_map = this.toMap(json_any);
                }
            }
        }
        catch (error_any) {
            let error = error_any;
            let errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, tslib_1.__classPrivateFieldGet(_a, _a, "f", _JSONObject_constructorFunctionName), "c3e16022-7207-4b65-89e3-bc83fe4c68c3", error);
            if (LOGGER.isErrorEnabled()) {
                LOGGER.logErrorBase(errorBase);
            }
        }
    }
    toMap(json_any) {
        let toMap_map = new Map();
        let tempMap_map = new Map(Object.entries(json_any));
        let keys = Array.from(tempMap_map.keys());
        let value_any = null;
        keys.forEach((key) => {
            value_any = tempMap_map.get(key);
            if ((0, IsString_1.default)(value_any)
                || (0, IsBoolean_1.default)(value_any)
                || (0, IsNumber_1.default)(value_any)
                || (value_any === null)) {
                toMap_map.set(key, value_any);
            }
            else if (value_any instanceof Map) {
                let jsonObject = new _a(value_any);
                toMap_map.set(key, jsonObject);
            }
            else if (value_any instanceof Array) {
                let jsonArray = new JSONArray_1.JSONArray(value_any);
                toMap_map.set(key, jsonArray);
            }
            else {
                let jsonObject = new _a(value_any);
                toMap_map.set(key, jsonObject);
            }
        });
        return (toMap_map);
    }
    /**
     * If not found returns null.
     * @param key_s
     * @returns
     */
    get(key_s) {
        let value_any = this.jsonObject_map.get(key_s);
        if (value_any === undefined) {
            value_any = null;
        }
        return (value_any);
    }
    getBoolean(key_s, default_b = false) {
        let value_b = default_b;
        let value_any = this.get(key_s);
        if (value_any !== null && (0, IsBoolean_1.default)(value_any)) {
            value_b = (0, ToBoolean_1.default)(value_any);
        }
        return (value_b);
    }
    getJSONArray(key_s) {
        let jsonArray_m = null;
        let value_any = this.jsonObject_map.get(key_s);
        if (value_any !== undefined && value_any !== null) {
            if (value_any instanceof JSONArray_1.JSONArray) {
                jsonArray_m = value_any;
            }
        }
        return (jsonArray_m);
    }
    getJSONObject(key_s) {
        let jsonObject_m = new _a();
        if (this.jsonObject_map !== null) {
            let value_any = this.jsonObject_map.get(key_s);
            if (value_any !== undefined && value_any !== null) {
                if (value_any instanceof _a) {
                    jsonObject_m = value_any;
                }
                else {
                    jsonObject_m = new _a(value_any);
                }
            }
        }
        return (jsonObject_m);
    }
    getNames() {
        let keys_ary = Array.from(this.jsonObject_map.keys());
        let names_ary = new Array();
        for (let index_i = 0; index_i < keys_ary.length; index_i++) {
            let key_s = keys_ary[index_i];
            names_ary.push(key_s);
        }
        return (names_ary);
    }
    getNumber(key_s, default_n = 0) {
        let value_n = default_n;
        let value_any = this.get(key_s);
        if (value_any !== null && (0, IsNumber_1.default)(value_any)) {
            value_n = (0, ToNumber_1.default)(value_any);
        }
        return (value_n);
    }
    getString(key_s) {
        let value_s = null;
        let value_any = this.get(key_s);
        if (value_any !== null && (0, IsString_1.default)(value_any)) {
            value_s = value_any;
        }
        return (value_s);
    }
    put(key_s, value_any) {
        if (key_s !== null && value_any !== null) {
            this.jsonObject_map.set(key_s, value_any);
        }
        return (this);
    }
    size() {
        return (this.jsonObject_map.size);
    }
    quote(value_s_p) {
        if (value_s_p === null) {
            return "\"\"";
        }
        // Escape backslashes first, then double quotes
        const escaped = value_s_p.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
        return `"${escaped}"`;
    }
    toString() {
        try {
            this.json_s = "";
            let names_ary = Array.from(this.jsonObject_map.keys());
            let indexTemp_i = 0;
            let sizeTemp_i = 0;
            this.write("{");
            if (names_ary.length > 0) {
                let isFirstAttributeWritten_b = false;
                let index_n = 0;
                let value_s = null;
                for (index_n = 0; index_n < names_ary.length; index_n++) {
                    let name_s = names_ary[index_n];
                    let value_any = this.jsonObject_map.get(name_s);
                    if (name_s.includes('_relationshipPersistableType')) {
                        // name_s = name_s;
                    }
                    if (isFirstAttributeWritten_b) {
                        this.write(",");
                    }
                    if (value_any instanceof JSONArray_1.JSONArray) {
                        let object_ja_m = value_any;
                        value_s = object_ja_m.toString();
                        this.write(this.quote(name_s) + ":");
                        this.write(value_s);
                        isFirstAttributeWritten_b = true;
                    }
                    else if (value_any instanceof _a) {
                        let object_jo_m = value_any;
                        value_s = object_jo_m.toString();
                        this.write(this.quote(name_s) + ":");
                        this.write(value_s);
                        isFirstAttributeWritten_b = true;
                    }
                    else if ((0, IsString_1.default)(value_any)) {
                        this.write(this.quote(name_s) + ":" + this.quote(value_any));
                        isFirstAttributeWritten_b = true;
                    }
                    else if ((0, IsBoolean_1.default)(value_any)
                        || (0, IsNumber_1.default)(value_any)
                        || (value_any === null)) {
                        this.write(this.quote(name_s) + ":" + value_any);
                        isFirstAttributeWritten_b = true;
                    }
                    else if (Array.isArray(value_any)) {
                        let items = value_any;
                        if (items.length > 0) {
                            if ((0, IsString_1.default)(items[0])) {
                                // Array<string>
                                let array_s = '[';
                                indexTemp_i = 0;
                                sizeTemp_i = items.length;
                                for (indexTemp_i = 0; indexTemp_i < sizeTemp_i; indexTemp_i++) {
                                    if (indexTemp_i > 0) {
                                        array_s += ',';
                                    }
                                    array_s += `"${items[indexTemp_i]}"`;
                                }
                                array_s += ']';
                                this.write(this.quote(name_s) + ":" + array_s);
                            }
                            else {
                                throw new Error("Unhandled Array data type: name: " + name_s + ", value: " + value_any);
                            }
                        }
                    }
                    else {
                        throw new Error("Unhandled data type: name: " + name_s + ", value: " + value_any);
                    }
                }
            }
            this.write("}");
        }
        catch (error_any) {
            let error = error_any;
            let errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, this.toString.name, "5967d98d-9a63-4a69-91bd-f726a2307fc7", error);
            if (LOGGER.isErrorEnabled()) {
                LOGGER.logErrorBase(errorBase);
            }
            throw error;
        }
        return (this.json_s);
    }
    write(value_s_p) {
        this.json_s += value_s_p;
    }
}
exports.JSONObject = JSONObject;
_a = JSONObject;
_JSONObject_constructorFunctionName = { value: "constructor" };
//# sourceMappingURL=JSONObject.js.map