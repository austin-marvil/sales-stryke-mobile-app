"use strict";
/*
 * Copyright (C) OmniStation, Inc - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Martin C. Euerle, <meuerle@omnistation.com>,  2019.10.14
 */
var _a, _EntityWebReflectionUtils_getValueFromMongoDBMethodName_s, _EntityWebReflectionUtils_setValueFromJsonObjectFunctionName;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityWebReflectionUtils = void 0;
const tslib_1 = require("tslib");
const DateUtils_1 = require("../../utils/DateUtils");
const DataType_1 = require("../../data/entity/DataType");
const ToBoolean_1 = require("../../utils/object/ToBoolean");
const ToNumber_1 = require("../../utils/object/ToNumber");
const LogManager_1 = require("../../utils/log/LogManager");
const ErrorBase_1 = require("../../lang/ErrorBase");
const IsNumber_1 = require("../../utils/object/IsNumber");
const TypeReference_1 = require("../../data/entity/TypeReference");
const JSONArray_1 = require("./JSONArray");
const TypeReferenceType_1 = require("../../lang/TypeReferenceType");
const data_1 = require("../../data");
const log_1 = require("../../utils/log");
const NAMESPACE = "com.salesstryke.jsonapi.util.EntityWebReflectionUtils";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
LOGGER.setLogLevel(log_1.Level.SEVERE);
class EntityWebReflectionUtils {
    static getPersistableBase(object_p, getterName_s_p) {
        let object_m = null;
        if (object_p != null && getterName_s_p != null) {
            object_m = object_p[getterName_s_p]();
            /*
            if(object_m != null) {
                if(object_m instanceof PersistableBase) {
                    return_obj_m = object_m;
                }
                else if(object_m instanceof List) {
                    return_obj_m = object_m;
                }
            }
            */
        }
        return (object_m);
    }
    /**
     * Given an Object, an Attribute, return the number if it exists, otherwise return the default value.
     * @param attribute
     * @param object_any
     * @param defaultValue_n
     * @returns
     */
    static getValueAsNumber(attribute, object_any, defaultValue_n) {
        let value_any = null;
        let value_n = defaultValue_n;
        value_any = this.getValue(attribute, object_any);
        if (value_any) {
            if ((0, IsNumber_1.default)(value_any)) {
                value_n = value_any;
            }
        }
        return (value_n);
    }
    /**
     * ```
     * Return a value for attribute, if not found return null.
     * ```
     * @param attribute
     * @param object_any
     * @param getterName_s
     * @returns
     */
    static getValue(attribute, object_any, getterName_s = null) {
        const dataType = attribute.getDataType();
        const getterMethodName_s = attribute.getTypeScriptGetterMethodName();
        const methodFn = object_any[getterMethodName_s];
        let value_obj_m = null;
        if (methodFn === undefined) {
            LOGGER.logFine({ message: `getterMethodName is undefined: ${getterMethodName_s}`, methodName: this.getValue.name, uuid: 'f2d10afe-eac3-4c11-974b-4b281d134cb5' });
        }
        try {
            if (object_any !== null && getterMethodName_s !== null) {
                if (dataType !== null) {
                    if (dataType === DataType_1.DataType.DATE) {
                        value_obj_m = object_any[getterMethodName_s]();
                        if (value_obj_m && value_obj_m instanceof Date) {
                            value_obj_m = DateUtils_1.DateUtils.zonedDateTimeToString(value_obj_m);
                        }
                    }
                    // else if(dataType_s_m === DataType.JSON_STRING)
                    // {
                    //     value_s_m = object_any[getterMethodName_s]();
                    //     if(value_s_m)
                    //     {
                    //         value_obj_m = encodeURI(value_s_m);
                    //         //object_any[setterMethodName_s] = value_obj_m;
                    //     }
                    //     let noop_s : string = '';
                    // }
                    else if (dataType === DataType_1.DataType.JSON_STRING) {
                        // remember, the return for a JSON_STRING is an object.
                        value_obj_m = object_any[getterMethodName_s]();
                        //value_obj_m = JSON.stringify(value_obj_m);
                    }
                    else {
                        if (object_any[getterMethodName_s] === undefined || object_any[getterMethodName_s] === null) {
                            const noop = "";
                        }
                        value_obj_m = object_any[getterMethodName_s]();
                    }
                }
                else {
                    value_obj_m = object_any[getterMethodName_s]();
                }
            }
        }
        catch (error_any) {
            const error = error_any;
            const errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, this.getValue.name, "aa0b19e0-f25a-4d2e-a784-fa21f54eb676", error);
            if (LOGGER.isErrorEnabled()) {
                LOGGER.logErrorBase(errorBase);
            }
        }
        return (value_obj_m);
    }
    static getValueFromMongoDB(entityWrapper, attribute, object_any) {
        const attributeName_s = attribute.getTypeScriptAttributeName();
        const dataType = attribute.getDataType();
        const getterMethodName_s = attribute.getMongoAttributeName();
        const isPersistable_b = attribute.getIsMongoPersistable();
        const relationship = attribute.getRelationship();
        const value_s_m = null;
        let value_obj_m = null;
        if (attributeName_s === "_fkTestA_id") {
            const noop_b = false;
        }
        // let isManyToOne_b: boolean = AttributeUtils.getIsManyToOneRelationship(entityWrapper, attribute);
        // let isOneToMany_b: boolean = AttributeUtils.getIsOneToManyRelationship(entityWrapper, attribute);     
        // if(isManyToOne_b) {
        //     dataType = DataType.MANY_TO_ONE;
        // }
        // else if(isOneToMany_b) {
        //     dataType = DataType.ONE_TO_MANY;
        // }
        if (dataType !== null && (isPersistable_b || relationship !== null)) {
            switch (dataType) {
                case DataType_1.DataType.DATE:
                    value_obj_m = object_any[getterMethodName_s];
                    if (value_obj_m && value_obj_m instanceof Date) {
                        value_obj_m = DateUtils_1.DateUtils.zonedDateTimeToString(value_obj_m);
                    }
                    break;
                case DataType_1.DataType.ONE_TO_MANY:
                    break;
                case DataType_1.DataType.MONGO_REF_ARRAY:
                    value_obj_m = object_any[getterMethodName_s];
                    break;
                case DataType_1.DataType.JSON_STRING:
                    value_obj_m = object_any[getterMethodName_s];
                    break;
                case DataType_1.DataType.MANY_TO_ONE:
                case DataType_1.DataType.MONGO_REF:
                case DataType_1.DataType.BOOLEAN:
                case DataType_1.DataType.CURRENCY:
                case DataType_1.DataType.FLOAT:
                case DataType_1.DataType.FORIEGN_KEY:
                case DataType_1.DataType.ID:
                case DataType_1.DataType.INTEGER:
                case DataType_1.DataType.REAL:
                case DataType_1.DataType.STRING:
                    value_obj_m = object_any[getterMethodName_s];
                    break;
                // case DataType.MONGO_REF_ARRAY:
                //     let noop: number = 0;
                //     break;
                default: {
                    const errorBase = new ErrorBase_1.ErrorBase("DataType not found: " + dataType.getName(), NAMESPACE, tslib_1.__classPrivateFieldGet(_a, _a, "f", _EntityWebReflectionUtils_getValueFromMongoDBMethodName_s), "47d87345-cbf0-427d-a99d-0d27f3d3fd5e");
                    if (LOGGER.isErrorEnabled()) {
                        LOGGER.logErrorBase(errorBase);
                    }
                    throw errorBase;
                }
            }
        }
        return (value_obj_m);
    }
    /**
     *
     * This sets the value of an Entity attribute by directly set the attribute value, not by calling a getter or setter.
     * @param p
     */
    static setEntityAttribute(p) {
        if (p.attribute) {
            const attributeName_s = p.attribute.getTypeScriptAttributeName();
            const setterMethodName_s = p.attribute.getTypeScriptSetterMethodName();
            const dataType = p.attribute.getDataType();
            let array_any = new Array();
            const variableType = p.attribute.getVariableType();
            //let value_any : any             = attributes_jo.get(attributeName_s);
            let temp_s = '';
            const temp_dt = new Date();
            let json_obj = undefined;
            if (variableType
                && (dataType !== DataType_1.DataType.JSON_STRING)) {
                const variableType_s = '';
                throw new Error(`variableType not handled `);
            }
            else if (dataType) {
                switch (dataType) {
                    case DataType_1.DataType.BOOLEAN:
                    case DataType_1.DataType.CURRENCY:
                    case DataType_1.DataType.FLOAT:
                    case DataType_1.DataType.FORIEGN_KEY:
                    case DataType_1.DataType.ID:
                    case DataType_1.DataType.INTEGER:
                    case DataType_1.DataType.NUMBER:
                    case DataType_1.DataType.REAL:
                    case DataType_1.DataType.SECURE_STRING:
                    case DataType_1.DataType.STRING:
                        p.instanceObj[attributeName_s] = p.value;
                        break;
                    case DataType_1.DataType.DATE:
                        p.instanceObj[attributeName_s] = DateUtils_1.DateUtils.stringToDate({ dateAsString: p.value });
                        break;
                    case DataType_1.DataType.JSON_STRING:
                        if (p.value) {
                            // Going from TypeScript to JsonApi it was encoded via encodeURI, so need to decodeURI
                            temp_s = decodeURI(p.value);
                            json_obj = JSON.parse(temp_s);
                            // turn the Object into a string
                            // temp_s                         = JSON.stringify(p.value);
                            // set the attribute value
                            p.instanceObj[setterMethodName_s](json_obj);
                        }
                        break;
                    case DataType_1.DataType.MONGO_REF:
                    case DataType_1.DataType.MANY_TO_ONE:
                        p.instanceObj[attributeName_s] = p.value;
                        break;
                    case DataType_1.DataType.MONGO_REF_ARRAY:
                    case DataType_1.DataType.MONGO_VIRTUAL_ARRAY:
                    case DataType_1.DataType.ONE_TO_MANY:
                        array_any = p.instanceObj[attributeName_s];
                        if (!array_any) {
                            array_any = new Array();
                        }
                        if (p.instanceObj[attributeName_s]) {
                            p.instanceObj[attributeName_s].push(p.value);
                        }
                        break;
                    default:
                        throw new Error(`Unknown handled datatype : ${dataType.getName()}`);
                }
            }
        }
    }
    static setValueFromJsonObject(jsonApiBase, jsonObject_p, attribute) {
        const dataType = null;
        const jsonName_s = attribute.getJsonAttributeName();
        let value_any = null;
        if (jsonName_s === '"_relationshipPersistableType"') {
            const noop = null;
        }
        if (jsonName_s != null) {
            value_any = jsonObject_p.get(jsonName_s);
            if (value_any === undefined) {
                return;
            }
            if (value_any === 2) {
                const noop = '';
            }
            this.setValueFromAny(jsonApiBase, value_any, attribute);
            /*
            dataType = attribute.getDataType();

            switch(dataType) {

                case DataType.BOOLEAN:
                    let value_b_m : boolean = ToBoolean(valueObj);
                    valueObj = value_b_m;
                    break;
                case DataType.DATE:
                    valueObj = new Date(valueObj);
                    break;
                case DataType.CURRENCY:
                case DataType.FLOAT:
                case DataType.INTEGER:
                case DataType.REAL:
                    let value_n_m : number = ToNumber(valueObj);
                    valueObj = value_n_m;
                    break;
                case DataType.STRING:
                    let valueStr: string = (valueObj as string);
                    break;

                default:
                    let errorMsg: string = "DataType not found: " + DataType[dataType];
                    if(LOGGER.isErrorEnabled()) { LOGGER.logError("." + ReflectionUtils.#setValueFromJsonObjectFunctionName + " " + errorMsg); }
                    throw new Error(errorMsg)
                    break;

            }

            let setterName_s_m  : string | null         = attribute.getSetterMethodName();
            if(setterName_s_m != null) {
                jsonApiBase[setterName_s_m](valueObj);
            }
            */
        }
    }
    static setValueFromAny(jsonApiBase, value_any, attribute, persistenceType = null) {
        const dataType = attribute.getDataType();
        const jsonName_s = attribute.getJsonAttributeName();
        const variableType = attribute.getVariableType();
        let setterValue_any = null;
        let skipVariableTypeCheck = false;
        if (jsonName_s === "_relationshipPersistableType") {
            const noop_b = false;
        }
        if (value_any === undefined) {
            return;
        }
        let setterName_s_m = attribute.getTypeScriptSetterMethodName();
        if (LOGGER.isInfoEnabled()) {
            LOGGER.logInfo({ message: `setter name: ${setterName_s_m}`, methodName: this.setValueFromAny.name });
        }
        if (dataType === DataType_1.DataType.JSON_STRING) {
            // DataType.JSON_STRING is an JSON object that on calling the setter method is internally represented as a string.
            skipVariableTypeCheck = true;
        }
        if (variableType && !skipVariableTypeCheck) {
            if (variableType instanceof TypeReference_1.TypeReference) {
                const typeReference = variableType;
                const typeName = typeReference.getTypeName() || '';
                if (typeName === TypeReferenceType_1.TypeReferenceType.ARRAY.getTypeScriptName()) {
                    // this is an Array
                    const addItemMethodName = attribute.getTypeScriptAddItemMethodName();
                    const typeArguments = typeReference.getTypeArguments();
                    const typeArgument_any = typeArguments[0];
                    if (typeArgument_any instanceof TypeReference_1.TypeReference) {
                        throw new Error(`${NAMESPACE}.${this.setValueFromAny.name} variableType typeName Array, TypeReference else unhandled 3b133009-853f-46f3-a506-c2a9b48d776d`);
                    }
                    else {
                        let index_i = 0;
                        let size_i = 0;
                        let string_s = '';
                        let values;
                        let values_ja;
                        // DataType
                        const dataType_temp = typeArgument_any;
                        switch (dataType_temp) {
                            case DataType_1.DataType.STRING:
                                if (value_any instanceof JSONArray_1.JSONArray) {
                                    values_ja = value_any;
                                    size_i = values_ja.size();
                                    for (index_i = 0; index_i < size_i; index_i++) {
                                        string_s = values_ja.get(index_i);
                                        if (addItemMethodName) {
                                            jsonApiBase[addItemMethodName](string_s);
                                        }
                                    }
                                }
                                break;
                            default:
                                throw new Error(`${NAMESPACE}.${this.setValueFromAny.name} variableType typeName else unknown DataType : ${dataType_temp.getName()} f6b56006-c419-4b23-ac22-1aa4a3ae6ede`);
                        }
                    }
                }
                else {
                    throw new Error(`${NAMESPACE}.${this.setValueFromAny.name} variableType typeName else unhandled 37ca23de-9f8e-4300-9df8-6088cb676c6f`);
                }
            }
            else {
                throw new Error(`${NAMESPACE}.${this.setValueFromAny.name} variableType else unhandled fde11b4f-70e6-49cb-bf97-85dee9ae0871`);
            }
        }
        else if (jsonName_s !== null && dataType !== null) {
            if (setterName_s_m !== null) {
                if (setterName_s_m === "setUserType") {
                    const noop_b = false;
                }
            }
            //dataType = attribute.getDataType();
            switch (dataType) {
                case DataType_1.DataType.ID:
                    setterValue_any = value_any;
                    break;
                case DataType_1.DataType.BOOLEAN:
                    setterValue_any = (0, ToBoolean_1.default)(value_any);
                    break;
                case DataType_1.DataType.DATE:
                    setterValue_any = new Date(value_any);
                    break;
                case DataType_1.DataType.CURRENCY:
                case DataType_1.DataType.FLOAT:
                case DataType_1.DataType.INTEGER:
                case DataType_1.DataType.REAL:
                    setterValue_any = (0, ToNumber_1.default)(value_any);
                    break;
                // case DataType.FORIEGN_KEY:
                // case DataType.ID:
                //     if(value_any instanceof ObjectId) {
                //         let objectId_any: any = {
                //             id: value_any
                //         }
                //         let toString_s: string = JSON.stringify(objectId_any);
                //         let toObject:   any     = JSON.parse(toString_s);
                //         value_any = toObject.id;
                //     }
                //     value_any = value_any;
                //     break;
                case DataType_1.DataType.JSON_STRING:
                case DataType_1.DataType.STRING:
                    setterValue_any = value_any;
                    break;
                case DataType_1.DataType.MANY_TO_ONE:
                case DataType_1.DataType.MONGO_REF:
                    setterValue_any = value_any;
                    // value_any does not need to be changed
                    break;
                case DataType_1.DataType.ONE_TO_MANY:
                case DataType_1.DataType.MONGO_REF_ARRAY:
                case DataType_1.DataType.MONGO_VIRTUAL_ARRAY:
                    setterName_s_m = attribute.getAddListItemMethodName();
                    setterValue_any = value_any;
                    break;
                default: {
                    const errorMsg = "DataType not found: " + dataType.getName();
                    LOGGER.logSevere({ message: errorMsg, methodName: this.setValueFromAny.name, uuid: "10d6d31e-1a0d-4b14-992f-ea34179ec543" });
                    throw new Error(errorMsg);
                }
            }
            if (setterName_s_m !== null) {
                // if(persistenceType)
                // {
                //     setterName_s_m = setterName_s_m;
                // }
                if (((dataType === DataType_1.DataType.MONGO_REF)
                    || (dataType === DataType_1.DataType.MONGO_REF_ARRAY))
                    && (persistenceType && persistenceType === data_1.PersistenceType.ATTACH.getId())) {
                    jsonApiBase[setterName_s_m](setterValue_any, data_1.PersistenceType.ATTACH);
                    return;
                }
                jsonApiBase[setterName_s_m](setterValue_any);
            }
        }
    }
    static setReference(root_p, reference_p, objectMapElement_p) {
        const jsonName_s_m = objectMapElement_p.getJsonAttributeName();
        if (jsonName_s_m != null) {
            const setterName_s_m = objectMapElement_p.getTypeScriptSetterMethodName();
            if (setterName_s_m != null) {
                root_p[setterName_s_m](reference_p);
            }
        }
    }
    static setReferenceArray(root_p, reference_p, objectMapElement_p) {
        const jsonName_s_m = objectMapElement_p.getJsonAttributeName();
        if (jsonName_s_m != null) {
            const getterName_s_m = objectMapElement_p.getTypeScriptGetterMethodName();
            if (getterName_s_m != null) {
                let list_obj_m = root_p[getterName_s_m](); //.add(reference_p);
                if (list_obj_m == null) {
                    list_obj_m = new Array();
                    const setterName_s_m = objectMapElement_p.getTypeScriptSetterMethodName();
                    if (setterName_s_m != null) {
                        root_p[setterName_s_m](list_obj_m);
                    }
                }
                const list_m = list_obj_m;
                list_m.push(reference_p);
            }
        }
    }
}
exports.EntityWebReflectionUtils = EntityWebReflectionUtils;
_a = EntityWebReflectionUtils;
_EntityWebReflectionUtils_getValueFromMongoDBMethodName_s = { value: "getValueFromMongoDB" };
_EntityWebReflectionUtils_setValueFromJsonObjectFunctionName = { value: "setValueFromJsonObject" };
//# sourceMappingURL=EntityWebReflectionUtils.js.map