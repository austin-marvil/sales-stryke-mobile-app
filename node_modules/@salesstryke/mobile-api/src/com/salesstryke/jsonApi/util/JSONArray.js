"use strict";
var _a, _JSONArray_toArrayFunctionName, _JSONArray_toStringFunctionName;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONArray = void 0;
const tslib_1 = require("tslib");
const LogManager_1 = require("../../utils/log/LogManager");
const JSONObject_1 = require("./JSONObject");
const IsBoolean_1 = require("../../utils/object/IsBoolean");
const IsDate_1 = require("../../utils/object/IsDate");
const IsNumber_1 = require("../../utils/object/IsNumber");
const IsString_1 = require("../../utils/object/IsString");
const NAMESPACE = "com.salesstryke.jsonapi.util.JSONArray";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class JSONArray {
    constructor(data_ary = null) {
        // the output for toString
        this.json_s = "";
        this.data_ary = new Array();
        if (data_ary != null) {
            this.data_ary = this.toArray(data_ary);
        }
    }
    toArray(json_ary) {
        let to_ary = new Array();
        let temp_ary = json_ary;
        temp_ary.forEach((item) => {
            if ((0, IsString_1.default)(item) || (0, IsNumber_1.default)(item) || (0, IsBoolean_1.default)(item) || (0, IsDate_1.default)(item)) {
                to_ary.push(item);
            }
            else if (item instanceof Array) {
                let jsonArray = new _a(item);
                to_ary.push(jsonArray);
            }
            else if (item instanceof Object) {
                let jsonObject = new JSONObject_1.JSONObject(item);
                to_ary.push(jsonObject);
            }
            else {
                throw new Error(NAMESPACE + "." + tslib_1.__classPrivateFieldGet(_a, _a, "f", _JSONArray_toArrayFunctionName) + " Unhandled item: " + item);
            }
        });
        return (to_ary);
    }
    get(index_i) {
        let item_any = null;
        if (this.data_ary.length > 0) {
            item_any = this.data_ary[index_i];
        }
        return (item_any);
    }
    getJSONObject(index_i_p) {
        let jsonObject_m = null;
        let object_m = this.get(index_i_p);
        if (object_m instanceof JSONObject_1.JSONObject) {
            jsonObject_m = object_m;
        }
        else if (object_m != null) {
            jsonObject_m = new JSONObject_1.JSONObject(object_m);
        }
        return (jsonObject_m);
    }
    put(value_obj) {
        this.data_ary.push(value_obj);
    }
    quote(value_s) {
        if (value_s == null) {
            return ("\"\"");
        }
        let quoted_s = "\"";
        let value_ary = value_s.split('');
        let index_i = 0;
        for (index_i = 0; index_i < value_ary.length; index_i++) {
            let char_s_m = value_ary[index_i];
            if (char_s_m === "\\") {
                quoted_s += "\\" + char_s_m;
            }
            else {
                quoted_s += char_s_m;
            }
        }
        quoted_s += "\"";
        return (quoted_s);
    }
    size() {
        return (this.data_ary.length);
    }
    toString() {
        let index_i = 0;
        let value_s = "[";
        // this.write( "[");
        for (index_i = 0; index_i < this.data_ary.length; index_i++) {
            let value_any = this.data_ary[index_i];
            if ((0, IsString_1.default)(value_any)) {
                value_s += this.quote(value_any);
                // this.write(this.quote(value_any));
            }
            else if ((0, IsNumber_1.default)(value_any) || (0, IsBoolean_1.default)(value_any)) {
                // this.write(value_any);
                value_s += value_any;
            }
            else if ((0, IsDate_1.default)(value_any)) {
                let dateValue_d = value_any;
                value_s += this.quote(dateValue_d.toISOString());
                // this.write(this.quote(dateValue_d.toISOString()));
            }
            else if (value_any instanceof _a) {
                //LOGGER.log(Level.FINE, "toString", "JSONArray");
            }
            else if (value_any instanceof JSONObject_1.JSONObject) {
                let object_jo = value_any;
                value_s += object_jo.toString();
                // this.write(value_s);
            }
            if (index_i < this.data_ary.length - 1) {
                // this.write(",");
                value_s += ",";
            }
        }
        // this.write("]");
        value_s += "]";
        this.setJsonString(value_s);
        return (this.json_s);
    }
    // private write(value_s_p: string) {
    //     this.json_s += value_s_p;
    // }
    setJsonString(value_s_p) {
        this.json_s = value_s_p;
    }
}
exports.JSONArray = JSONArray;
_a = JSONArray;
_JSONArray_toArrayFunctionName = { value: "toArray" };
_JSONArray_toStringFunctionName = { value: "toString" };
//# sourceMappingURL=JSONArray.js.map