"use strict";
var _a, _EntityServerReflectionUtils_setValueMethodName_s, _EntityServerReflectionUtils_setMongoDBValue_s;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityServerReflectionUtils = void 0;
const DataType_1 = require("../../data/entity/DataType");
const ToNumber_1 = require("../../utils/object/ToNumber");
const ToBoolean_1 = require("../../utils/object/ToBoolean");
const bson_1 = require("bson");
const LogManager_1 = require("../../utils/log/LogManager");
const NAMESPACE = "com.salesstryke.jsonapi.util.EntityWebReflectionUtils";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class EntityServerReflectionUtils {
    static setValue(jsonApiBase, value_any, attribute) {
        let dataType = attribute.getDataType();
        let isPersistable_b = attribute.getIsMongoPersistable();
        if (value_any === undefined) {
            return;
        }
        let setterName_s_m = attribute.getTypeScriptSetterMethodName(); //.getDataModelSetterMethodName();
        if (isPersistable_b && dataType !== null) {
            switch (dataType) {
                case DataType_1.DataType.BOOLEAN:
                    value_any = (0, ToBoolean_1.default)(value_any);
                    break;
                case DataType_1.DataType.DATE:
                    value_any = new Date(value_any);
                    break;
                case DataType_1.DataType.CURRENCY:
                case DataType_1.DataType.FLOAT:
                case DataType_1.DataType.INTEGER:
                case DataType_1.DataType.REAL:
                    value_any = (0, ToNumber_1.default)(value_any);
                    break;
                case DataType_1.DataType.ID:
                    if (value_any instanceof bson_1.ObjectId) {
                        let objectId_any = {
                            id: value_any
                        };
                        let toString_s = JSON.stringify(objectId_any);
                        let toObject = JSON.parse(toString_s);
                        value_any = toObject.id;
                    }
                    // value_any = value_any;
                    break;
                case DataType_1.DataType.MONGO_REF:
                    // value_any = value_any;
                    // if(mongoRefEntityNamespace_s !== null) {
                    //     let object_t: T | null = this.getAsJsonApiPersistableBase(value_any, mongoRefEntityNamespace_s);
                    //     if(object_t !== null) {
                    //         EntityServerReflectionUtils.setValueFromMongoDBDocument(newInstance, object_t, attribute);
                    //     }
                    // }
                    break;
                case DataType_1.DataType.JSON_STRING:
                case DataType_1.DataType.STRING:
                    value_any = value_any;
                    break;
                case DataType_1.DataType.MANY_TO_ONE: {
                    let objectId_any = {
                        id: value_any
                    };
                    let toString_s = JSON.stringify(objectId_any);
                    let toObject = JSON.parse(toString_s);
                    value_any = toObject.id;
                    break;
                }
                case DataType_1.DataType.ONE_TO_MANY:
                    setterName_s_m = attribute.getAddListItemMethodName();
                    break;
                default: {
                    let errorMsg = "DataType not found: " + dataType.getName();
                    LOGGER.logError({ message: errorMsg, methodName: this.setValue.name });
                    throw new Error(errorMsg);
                }
            }
            if (setterName_s_m !== null) {
                jsonApiBase[setterName_s_m](value_any);
            }
        }
    }
    static setValueFromMongoDBDocument(jsonApiBase, value_any, attribute) {
        let dataType = attribute.getDataType();
        let isPersistable_b = attribute.getIsMongoPersistable();
        if (value_any === undefined) {
            return;
        }
        if (dataType !== null) {
            if (DataType_1.DataType.MONGO_VIRTUAL_ARRAY === dataType) {
                isPersistable_b = true;
            }
        }
        let addListItemName_s = attribute.getAddListItemMethodName();
        let setterName_s = attribute.getTypeScriptSetterMethodName(); //.getDataModelSetterMethodName();
        if (isPersistable_b && dataType !== null) {
            switch (dataType) {
                case DataType_1.DataType.BOOLEAN:
                    value_any = (0, ToBoolean_1.default)(value_any);
                    break;
                case DataType_1.DataType.DATE:
                    value_any = new Date(value_any);
                    break;
                case DataType_1.DataType.CURRENCY:
                case DataType_1.DataType.FLOAT:
                case DataType_1.DataType.INTEGER:
                case DataType_1.DataType.REAL:
                    value_any = (0, ToNumber_1.default)(value_any);
                    break;
                case DataType_1.DataType.ID:
                    if (value_any instanceof bson_1.ObjectId) {
                        let objectId_any = {
                            id: value_any
                        };
                        let toString_s = JSON.stringify(objectId_any);
                        let toObject = JSON.parse(toString_s);
                        value_any = toObject.id;
                    }
                    // value_any = value_any;
                    break;
                case DataType_1.DataType.JSON_STRING:
                case DataType_1.DataType.STRING:
                    value_any = value_any;
                    break;
                case DataType_1.DataType.MANY_TO_ONE: {
                    let objectId_any = {
                        id: value_any
                    };
                    let toString_s = JSON.stringify(objectId_any);
                    let toObject = JSON.parse(toString_s);
                    value_any = toObject.id;
                    break;
                }
                case DataType_1.DataType.MONGO_REF_ARRAY:
                    setterName_s = attribute.getAddListItemMethodName();
                    break;
                case DataType_1.DataType.MONGO_VIRTUAL_ARRAY:
                    //value_any = 
                    break;
                case DataType_1.DataType.ONE_TO_MANY:
                    setterName_s = attribute.getAddListItemMethodName();
                    break;
                default: {
                    let errorMsg = "DataType not found: " + dataType.getName();
                    LOGGER.logError({ message: errorMsg, methodName: this.setValueFromMongoDBDocument.name });
                    throw new Error(errorMsg);
                }
            }
            if (addListItemName_s !== "") {
                jsonApiBase[addListItemName_s](value_any);
            }
            else if (setterName_s !== null) {
                jsonApiBase[setterName_s](value_any);
            }
        }
    }
}
exports.EntityServerReflectionUtils = EntityServerReflectionUtils;
_a = EntityServerReflectionUtils;
_EntityServerReflectionUtils_setValueMethodName_s = { value: "setValue" };
_EntityServerReflectionUtils_setMongoDBValue_s = { value: "setMongoDBValue" };
//# sourceMappingURL=EntityServerReflectionUtils.js.map