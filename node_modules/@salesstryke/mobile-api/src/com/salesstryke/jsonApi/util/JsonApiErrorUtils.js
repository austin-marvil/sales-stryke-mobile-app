"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonApiErrorUtils = void 0;
const JsonErrorBase_1 = require("../../lang/JsonErrorBase");
const LogManager_1 = require("../../utils/log/LogManager");
const ErrorIdType_1 = require("../ErrorIdType");
const JsonApiError_1 = require("../JsonApiError");
const JsonApiErrorMeta_1 = require("../JsonApiErrorMeta");
const JsonApiErrorMetaErrorType_1 = require("../JsonApiErrorMetaErrorType");
const ErrorIdTypeUtils_1 = require("./ErrorIdTypeUtils");
const NAMESPACE = "com.salesstryke.jsonapi.util.JsonApiErrorUtils";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
class JsonApiErrorUtils {
    constructor(errors) {
        this.errors = new Array();
        if (errors !== undefined && errors !== null) {
            this.errors = errors;
        }
    }
    /**
     * Given an error the extends from Error, return a JsonApiError
     * @param error_any
     */
    static getAsJsonApiError(error_any) {
        let jsonApiError = new JsonApiError_1.JsonApiError();
        let jsonApiErrorMeta = new JsonApiErrorMeta_1.JsonApiErrorMeta();
        if (error_any instanceof JsonErrorBase_1.JsonErrorBase) {
            let jsonErrorBase = error_any;
            let errorIdType = jsonErrorBase.getErrorIdType() || ErrorIdType_1.ErrorIdType.ATTRIBUTE_VADIDATION;
            let i18n_s = jsonErrorBase.getI18nKey() || "";
            let message_s = jsonErrorBase.getFullMessage();
            let methodName_s = jsonErrorBase.getMethodName() || "";
            let namespace_s = jsonErrorBase.getNamespace() || "";
            let securityAttributeUUID_s = jsonErrorBase.getSecurityAttributeUUID();
            let uiUUID_s = jsonErrorBase.getUIUUID();
            let userUUID_s = jsonErrorBase.getUserUUID();
            let jsonApiErrorMetaErrorType = JsonApiErrorMetaErrorType_1.JsonApiErrorMetaErrorType.NONE;
            switch (errorIdType) {
                case ErrorIdType_1.ErrorIdType.ATTRIBUTE_VADIDATION:
                    jsonApiErrorMetaErrorType = JsonApiErrorMetaErrorType_1.JsonApiErrorMetaErrorType.ATTRIBUTE_INVALID;
                    break;
                case ErrorIdType_1.ErrorIdType.AUTHORIZATION:
                    jsonApiErrorMetaErrorType = JsonApiErrorMetaErrorType_1.JsonApiErrorMetaErrorType.AUTHORIZATION;
                    break;
                default:
                    LOGGER.logSevere({ message: " unhandled type: " + ErrorIdType_1.ErrorIdType[errorIdType], methodName: this.getAsJsonApiError.name, uuid: "1c646ee5-9d59-4300-9a84-8204df394864" });
                    break;
            }
            jsonApiErrorMeta
                .setErrorType(jsonApiErrorMetaErrorType)
                .setI18nKey(i18n_s)
                .setMethodName(methodName_s)
                .setNamespace(namespace_s)
                .setSecurityAttibuteUUID(securityAttributeUUID_s)
                .setUIUUID(uiUUID_s)
                .setUserUUID(userUUID_s);
            jsonApiError
                .setDetail(message_s)
                .setId(jsonApiErrorMetaErrorType.toString())
                .setMeta(jsonApiErrorMeta);
        }
        return (jsonApiError);
    }
    getErrorsByIdType(errorIdType) {
        let errorsByIdType = new Array();
        this.errors.forEach((jsonApiError) => {
            let errorId_s = jsonApiError.getId() || "";
            if (ErrorIdTypeUtils_1.ErrorIdTypeUtils.getErrorIdTypeFromString(errorId_s) === errorIdType) {
                errorsByIdType.push(jsonApiError);
            }
        });
        return (errorsByIdType);
    }
    hasErrorIdType(errorIdType) {
        let hasErrorIdType = false;
        this.errors.every((jsonApiError) => {
            let errorId_s = (jsonApiError.getId() || "");
            let tempErrorIdType = ErrorIdTypeUtils_1.ErrorIdTypeUtils.getErrorIdTypeFromString(errorId_s);
            if (errorIdType === tempErrorIdType) {
                hasErrorIdType = true;
                return (false);
            }
            return (true);
        });
        return (hasErrorIdType);
    }
}
exports.JsonApiErrorUtils = JsonApiErrorUtils;
//# sourceMappingURL=JsonApiErrorUtils.js.map