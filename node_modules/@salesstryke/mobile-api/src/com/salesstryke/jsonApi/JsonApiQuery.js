"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonApiQuery = void 0;
const entity_1 = require("../data/entity");
const QueryParam_1 = require("./util/QueryParam");
const QueryParamArray_1 = require("./util/QueryParamArray");
class Attribute {
    constructor() {
        this.pageNumber = 'pageNumber';
        this.pageSize = 'pageSize';
        this.queryParams = 'queryParams';
        this.resultCount = 'resultCount';
        this.collectionTotal = 'collectionTotal';
    }
}
class MetaData {
    constructor() {
        this.jsonName = 'query';
        this.attributes = new Attribute();
    }
}
//let qp : QueryParam = new QueryParam('userName', 'Fred', DataType.STRING)
//let qpa : QueryParamArray = new QueryParamArray('names', DataType.STRING).addValue('Fred');
//let qp : QueryParam = new QueryParam('userName', 'Fred', DataType.STRING)
//let qpa : QueryParamArray = new QueryParamArray('names', DataType.STRING).addValue('Fred');
class JsonApiQuery {
    constructor(pageNumber_i = 0, pageSize_i = 0) {
        this.pageNumber_i = 0;
        this.pageSize_i = 0;
        this.queryParams_ary = new Array();
        this.resultCount_i = 0;
        this.collectionTotal_i = 0;
        this.pageNumber_i = pageNumber_i;
        this.pageSize_i = pageSize_i;
    }
    addQueryParam(queryParam) {
        this.queryParams_ary.push(queryParam);
        return (this);
    }
    getCollectionTotal() {
        return (this.collectionTotal_i);
    }
    /**
     * Page numbers begin at 0.
     * @returns
     */
    getPageNumber() {
        return (this.pageNumber_i);
    }
    getPageSize() {
        return (this.pageSize_i);
    }
    // will only return the first queryParams with matching name
    getQueryParamByName(paramName_s) {
        let queryParam = null;
        for (let index_i = 0; index_i < this.queryParams_ary.length; index_i++) {
            let temp_qp = this.queryParams_ary[index_i];
            if (temp_qp.getName() === paramName_s) {
                queryParam = temp_qp;
                break;
            }
        }
        return queryParam;
    }
    getQueryParams() {
        return (this.queryParams_ary);
    }
    getResultCount() {
        return (this.resultCount_i);
    }
    setCollectionTotal(collectionTotal_i) {
        this.collectionTotal_i = collectionTotal_i;
        return (this);
    }
    /**
     * Page numbers begin at 0.
     * @param pageNumber_i
     * @returns
     */
    setPageNumber(pageNumber_i) {
        this.pageNumber_i = pageNumber_i;
        return (this);
    }
    setPageSize(pageSize_i) {
        this.pageSize_i = pageSize_i;
        return (this);
    }
    setResultCount(resultCount_i) {
        this.resultCount_i = resultCount_i;
        return (this);
    }
    /**
    *
    * Examples:
    * let jsonApiDocument : JsonApiDocument = new JsonApiDocument();
    * jsonApiDocument.setQuery(
    * new JsonApiQuery()
    * .addQueryParamNumber({ key : JsonApiQuery.metadata.attributes.pageNumber, value : 5 })
    * );
    *
    * let jsonApiQuery: JsonApiQuery = new JsonApiQuery();
    * jsonApiQuery.addQueryParamNumber({ key : JsonApiQuery.metadata.attributes.pageNumber, value : 5 });
    *
    *
    * @param p
    * @returns
    */
    addQueryParamNumber(p) {
        let queryParam = this.getQueryParamByName(p.key);
        if (queryParam === null) {
            queryParam = new QueryParam_1.QueryParam(p.key, entity_1.DataType.NUMBER.getId(), p.value);
            this.queryParams_ary.push(queryParam);
        }
        else {
            // probably need better checking
            queryParam.setValue(p.key);
        }
        return (this);
    }
    addQueryParamString(p) {
        let queryParam = this.getQueryParamByName(p.key);
        if (queryParam === null) {
            queryParam = new QueryParam_1.QueryParam(p.key, entity_1.DataType.STRING.getId(), p.value);
            this.queryParams_ary.push(queryParam);
        }
        else {
            // probably need better checking
            queryParam.setValue(p.key);
        }
        return (this);
    }
    addQueryParamBoolean(p) {
        let queryParam = this.getQueryParamByName(p.key);
        if (queryParam === null) {
            queryParam = new QueryParam_1.QueryParam(p.key, entity_1.DataType.BOOLEAN.getId(), p.value);
            this.queryParams_ary.push(queryParam);
        }
        else {
            // probably need better checking
            queryParam.setValue(p.key);
        }
        return (this);
    }
    addQueryParamDate(p) {
        let queryParam = this.getQueryParamByName(p.key);
        if (queryParam === null) {
            queryParam = new QueryParam_1.QueryParam(p.key, entity_1.DataType.DATE.getId(), p.value);
            this.queryParams_ary.push(queryParam);
        }
        else {
            // probably need better checking
            queryParam.setValue(p.key);
        }
        return (this);
    }
    /**
    *
    * Examples:
    * let jsonApiDocument : JsonApiDocument = new JsonApiDocument();
    * jsonApiDocument.setQuery(
    * new JsonApiQuery()
    * .addQueryParamArrayNumber({ key : JsonApiQuery.metadata.attributes.pageNumber, values : [5] })
    * );
    *
    * Example:
    * let jsonApiQuery: JsonApiQuery = new JsonApiQuery();
    * jsonApiQuery.addQueryParamArrayNumber({ key : JsonApiQuery.metadata.attributes.pageNumber, values : [5] });
    *
    *
    * @param p
    * @returns
    */
    addQueryParamArrayNumber(p) {
        let queryParamArray = this.getQueryParamByName(p.key);
        if (queryParamArray === null) {
            queryParamArray = new QueryParamArray_1.QueryParamArray(p.key, entity_1.DataType.NUMBER.getId(), p.values);
            this.queryParams_ary.push(queryParamArray);
        }
        else {
            queryParamArray.setValues(p.values);
        }
        return (this);
    }
    addQueryParamArrayString(p) {
        let queryParamArray = this.getQueryParamByName(p.key);
        if (queryParamArray === null) {
            queryParamArray = new QueryParamArray_1.QueryParamArray(p.key, entity_1.DataType.STRING.getId(), p.values);
            this.queryParams_ary.push(queryParamArray);
        }
        else {
            queryParamArray.setValues(p.values);
        }
        return (this);
    }
    addQueryParamArrayBoolean(p) {
        let queryParamArray = this.getQueryParamByName(p.key);
        if (queryParamArray === null) {
            queryParamArray = new QueryParamArray_1.QueryParamArray(p.key, entity_1.DataType.BOOLEAN.getId(), p.values);
            this.queryParams_ary.push(queryParamArray);
        }
        else {
            queryParamArray.setValues(p.values);
        }
        return (this);
    }
    addQueryParamArrayDate(p) {
        let queryParamArray = this.getQueryParamByName(p.key);
        if (queryParamArray === null) {
            queryParamArray = new QueryParamArray_1.QueryParamArray(p.key, entity_1.DataType.DATE.getId(), p.values);
            this.queryParams_ary.push(queryParamArray);
        }
        else {
            queryParamArray.setValues(p.values);
        }
        return (this);
    }
}
exports.JsonApiQuery = JsonApiQuery;
JsonApiQuery.metadata = new MetaData();
//# sourceMappingURL=JsonApiQuery.js.map