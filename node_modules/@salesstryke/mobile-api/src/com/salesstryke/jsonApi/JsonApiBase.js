"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonApiBase = exports.JsonState = void 0;
const HashCodeUtil_1 = require("../utils/HashCodeUtil");
const LogLevel_1 = require("../utils/log/LogLevel");
const LogManager_1 = require("../utils/log/LogManager");
const IsArray_1 = require("../utils/object/IsArray");
const NAMESPACE = "com.salesstryke.jsonApi.JsonApiBase:JsonApiBase";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
LOGGER.setLogLevel(LogLevel_1.Level.OFF);
class JsonState {
    constructor(p) {
        this.mutatedAttributesMap = null;
        this.persistenceType = null;
        if (p.jsonStateStr) {
            let json = JSON.parse(p.jsonStateStr);
            if (json.attributes) {
                let attributes = json.attributes;
                this.mutatedAttributesMap = new Map();
                attributes.forEach((attr) => {
                    this.mutatedAttributesMap.set(attr.name, attr.isMutated);
                });
            }
            if (json.persistenceType !== undefined && json.persistenceType !== null) {
                this.persistenceType = json.persistenceType;
            }
        }
    }
    getIsAttributeMutated(p) {
        if (this.mutatedAttributesMap) {
            return this.mutatedAttributesMap.get(p.attributeName) || false;
        }
        return false;
    }
    getIsEntityMutated() {
        if (this.mutatedAttributesMap) {
            return Array.from(this.mutatedAttributesMap.values()).some(isMutated => isMutated);
        }
        return (false);
    }
    getPersistenceType() {
        return this.persistenceType;
    }
}
exports.JsonState = JsonState;
class JsonApiBase {
    constructor(p) {
        this._initialAttributeState_map = new Map();
        this._isMutatedFromMap = false;
        // TRACKING MUTATIONS
        this._currentAttributeHashCodeMap2 = null;
        this._attributeByNameMap2 = null;
        this._currentHashcode2 = -1;
        this._hasInitializedHashCode2 = false;
        this._initializedAttributeHashCodeMap2 = null;
        this._initializedHashcode2 = -1;
        this._isTrackingingMutations = false;
        this._jsonStateStr2 = null;
        this._jsonState = null;
        /**
         * ```
         * For relationships:
         *    MONGO_REF,
         *    MONGO_REF_ARRAY,
         *    MANY_TO_MANY,
         *    MANY_TO_ONE,
         *    ONE_TO_MANY,
         *    ONE_TO_ONE, identifies if the value is to be:
         *
         *    ATTACH         = 10:  identifies to attach an existing Entity by id to a MONGO_REF_ARRAY
         *    CREATE         = 20:  identifies to create a MONGO_REF is it does not contain an ObjectId.
         *    UPDATE         = 30:  identifies if the system is to update a MONGO_REF that is a member of an Entity.
         *    DETACH         = 40:  identifies to detach an existing Entity by id from a MONGO_REF_ARRY.
         *    DELETE         = 50:  identifies to delete a MONGO_REF if allowed.
         *    DELETE_CASCADE = 60:  identifies to cascase delete MONGO_REF items if allowed.
         * ```
         */
        this._relationshipPersistableType = 0;
        if (p) {
            if (p && p.isTrackingMutations) {
                this._trackMutations();
            }
        }
        //let _entity : Array<JsonApiBase> | undefined = Clone.cloneEntityArray<JsonApiBase>({ jsonApiBase : [this] });
    }
    getClassName() {
        return ("com.salesstryke.jsonapi.JsonApiBase");
    }
    getHashCode() {
        let hashCode_n = -1;
        return (hashCode_n);
    }
    /**
     * CREATE, DELETE, READ, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        return (null);
    }
    _getIsMutated() {
        if (!this._isTrackingingMutations) {
            return (false);
        }
        if (!this._initializedAttributeHashCodeMap2 && !this._currentAttributeHashCodeMap2) {
            return (false);
        }
        if (this._initializedHashcode2 !== this._currentHashcode2) {
            return (true);
        }
        return (false);
    }
    _getIsTrackingMutations() {
        return (this._isTrackingingMutations);
    }
    _createJsonStateStr() {
        this._getIsMutated();
        let tJsonState = null;
        this._jsonStateStr2 = null;
        if (this._initializedAttributeHashCodeMap2 && this._currentAttributeHashCodeMap2) {
            let initializedNames = Array.from(this._currentAttributeHashCodeMap2.keys());
            let index = 0;
            let size = initializedNames.length;
            for (index = 0; index < size; index++) {
                let name = initializedNames[index];
                let attribute_any = null;
                let currentHashCode = 0;
                let initializedHashCode = 0;
                let hashCodeAny = undefined;
                let tAttribute = {
                    name: name
                };
                if (this._attributeByNameMap2) {
                    attribute_any = this._attributeByNameMap2.get(name);
                    if (attribute_any) {
                        if ((0, IsArray_1.IsArray)(attribute_any)) {
                            let index = 0;
                            let size = attribute_any.length;
                            for (index = 0; index < size; index++) {
                                let item = attribute_any[index];
                                if (item && item instanceof JsonApiBase) {
                                    let item_japb = item;
                                    item_japb._createJsonStateStr();
                                }
                            }
                        }
                    }
                }
                hashCodeAny = this._initializedAttributeHashCodeMap2.get(name);
                if (hashCodeAny) {
                    initializedHashCode = hashCodeAny;
                }
                hashCodeAny = this._currentAttributeHashCodeMap2.get(name);
                if (hashCodeAny) {
                    currentHashCode = hashCodeAny;
                }
                if (initializedHashCode !== currentHashCode) {
                    if (!tJsonState) {
                        let tAttributes = new Array();
                        tJsonState = {
                            attributes: tAttributes
                        };
                    }
                    tAttribute.isMutated = true;
                    if (name === '_relationshipPersistableType') {
                        tJsonState.persistenceType = this._relationshipPersistableType;
                    }
                    if (tJsonState && tJsonState.attributes) {
                        tJsonState.attributes.push(tAttribute);
                    }
                }
            }
        }
        if (tJsonState) {
            this._jsonStateStr2 = JSON.stringify(tJsonState);
        }
        return (this._jsonStateStr2);
    }
    _getJsonStateStr() {
        return (this._jsonStateStr2);
    }
    _getJsonState() {
        //this._getJsonStateStr2();
        this._jsonState = null;
        if (this._jsonStateStr2) {
            this._jsonState = new JsonState({ jsonStateStr: this._jsonStateStr2 });
        }
        return (this._jsonState);
    }
    _setCurrentState2(p) {
        if (!this._currentAttributeHashCodeMap2) {
            this._currentAttributeHashCodeMap2 = new Map();
        }
        if (!this._attributeByNameMap2) {
            this._attributeByNameMap2 = new Map();
        }
        if (p.value === undefined) {
            return (this);
        }
        if ((0, IsArray_1.IsArray)(p.value)) {
            let array = p.value;
            let index = 0;
            let size = array.length;
            for (index = 0; index < size; index++) {
                let item = array[index];
                if (item && item instanceof JsonApiBase) {
                    let item_any = item;
                    let item_japb = item;
                    item_japb._getIsMutated();
                }
            }
        }
        let hashCode = HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(p.value);
        if (p.attributeName === 'name') {
            LOGGER.logInfo({ message: `Attribute name: ${p.attributeName}, value : ${p.value}, hash code: ${hashCode}.`, methodName: this._setCurrentState2.name });
        }
        this._currentAttributeHashCodeMap2.set(p.attributeName, hashCode);
        this._attributeByNameMap2.set(p.attributeName, p.value);
        return (this);
    }
    _setInitializedState2(p) {
        if (!this._initializedAttributeHashCodeMap2) {
            this._initializedAttributeHashCodeMap2 = new Map();
        }
        if (p.value === undefined) {
            return (this);
        }
        if ((0, IsArray_1.IsArray)(p.value)) {
            let array = p.value;
            let index = 0;
            let size = array.length;
            for (index = 0; index < size; index++) {
                let item = array[index];
                if (item && item instanceof JsonApiBase) {
                    let item_any = item;
                    let item_japb = item;
                    item_japb._trackMutations();
                }
            }
        }
        let hashCode = HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(p.value);
        this._initializedAttributeHashCodeMap2.set(p.attributeName, hashCode);
        return (this);
    }
    _setJsonStateStr(jsonStateStr2) {
        this._jsonStateStr2 = jsonStateStr2;
        return (this);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        // if(!this._hasInitializedHashCode2)
        // {
        //     this._initializedHashcode2 = this._getHashCode2();
        // }
        // this._hasInitializedHashCode2 = true;
        this._isTrackingingMutations = true;
        return (this);
    }
    /**
     * CREATE, DELETE, READ, UPDATE
     */
    _setEntityState(_entityState) {
        return (this);
    }
    getI18n() {
        return ("");
    }
    static getSimpleName() {
        return ("JsonApiBase");
    }
    getUIUUID() {
        return ("");
    }
    setI18n(i18n) {
        return (this);
    }
    setUIUUID(UIUUID) {
        return (this);
    }
}
exports.JsonApiBase = JsonApiBase;
//# sourceMappingURL=JsonApiBase.js.map