"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalizationManager = void 0;
const persistable_1 = require("../entity/classes/persistable");
const I18nKeyTypeEnum_1 = require("../entity/enums/I18nKeyTypeEnum");
const I18nLocaleTypeEnum_1 = require("../entity/enums/I18nLocaleTypeEnum");
const ErrorBase_1 = require("../lang/ErrorBase");
const LogLevel_1 = require("../utils/log/LogLevel");
const LogManager_1 = require("../utils/log/LogManager");
const NAMESPACE = "com.salesstryke.data.EntityManager";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
LOGGER.setLogLevel(LogLevel_1.Level.ERROR);
class LocalizationManager {
    constructor() {
        this.i18nCategoriesByName_map = new Map();
        this.lookupByLocaleUUIDByKeyUUID = new Map();
        this.templatetextByLocaleByKey = new Map();
    }
    // lookupByLocaleUUIDByKeyUUID
    addI18nCategory(p) {
        let name = p.i18nCategory.getName();
        if (name) {
            this.i18nCategoriesByName_map.set(name, p.i18nCategory);
            let i18nTexts = p.i18nCategory.getI18nTexts();
            let index_i = 0;
            let size_i = i18nTexts.length;
            for (index_i = 0; index_i < size_i; index_i++) {
                let i18nText = i18nTexts[index_i];
                let i18nKeyType = i18nText.getI18nKeyType();
                let i18nLocaleType = i18nText.getI18nLocaleType();
                if (!i18nKeyType) {
                    throw new ErrorBase_1.ErrorBase(`i18nKeyType is null.`, NAMESPACE, this.addI18nCategory.name);
                }
                if (!i18nLocaleType) {
                    throw new ErrorBase_1.ErrorBase(`i18nLocaleType is null.`, NAMESPACE, this.addI18nCategory.name);
                }
                let i18nLocaleTypeId = i18nLocaleType.getId() || '';
                let locale_map = this.lookupByLocaleUUIDByKeyUUID.get(i18nLocaleTypeId);
                if (!locale_map) {
                    locale_map = new Map();
                }
                locale_map.set(i18nKeyType.getId() || '', i18nText);
                this.lookupByLocaleUUIDByKeyUUID.set(i18nLocaleTypeId, locale_map);
                let i18nKeyTypeName = i18nKeyType.getName();
                let i18nLocaleTypeName = i18nLocaleType.getName();
                let templateText = i18nText.getTemplate();
                if (!i18nKeyTypeName) {
                    throw new ErrorBase_1.ErrorBase(`i18nKeyTypeName is null.`, NAMESPACE, this.addI18nCategory.name);
                }
                if (!i18nLocaleTypeName) {
                    throw new ErrorBase_1.ErrorBase(`i18nLocaleTypeName is null.`, NAMESPACE, this.addI18nCategory.name);
                }
                if (!templateText) {
                    throw new ErrorBase_1.ErrorBase(`templateText is null.`, NAMESPACE, this.addI18nCategory.name);
                }
                if (LOGGER.isInfoEnabled()) {
                    LOGGER.logInfo({ message: `key: ${i18nKeyTypeName}, locale : ${i18nLocaleTypeName}, value : ${templateText} ` });
                }
                let byLocal = this.templatetextByLocaleByKey.get(i18nLocaleTypeName);
                if (!byLocal) {
                    byLocal = new Map();
                    this.templatetextByLocaleByKey.set(i18nLocaleTypeName, byLocal);
                }
                byLocal.set(i18nKeyTypeName, templateText);
            }
        }
        return (this);
    }
    static getInstance() {
        return (LocalizationManager.INSTANCE);
    }
    getLocaleTemplate(p) {
        let template = null;
        let keyName = null;
        let localeName = null;
        // KEY
        if (p.key instanceof persistable_1.I18nKeyType) {
            let i18nKeyType = p.key;
            keyName = i18nKeyType.getName();
        }
        else if (p.key instanceof I18nKeyTypeEnum_1.I18nKeyTypeEnum) {
            let i18nKeyTypeEnum = p.key;
            keyName = i18nKeyTypeEnum.getName();
        }
        else {
            keyName = p.key;
        }
        // LOCALE
        if (p.locale instanceof persistable_1.I18nLocaleType) {
            let i18nLocaleType = p.locale;
            localeName = i18nLocaleType.getName();
        }
        else if (p.locale instanceof I18nLocaleTypeEnum_1.I18nLocaleTypeEnum) {
            let i18nLocaleTypeEnum = p.locale;
            localeName = i18nLocaleTypeEnum.getName();
        }
        else {
            localeName = p.locale;
        }
        if (keyName && localeName) {
            let byKey_map = this.templatetextByLocaleByKey.get(localeName);
            if (byKey_map) {
                let temp = byKey_map.get(keyName);
                if (temp) {
                    template = temp;
                }
            }
        }
        return (template);
    }
    validateLocale(p) {
        let i18nKey = p.validation.getI18nKey() || '';
        let localeName = p.locale.getName() || '';
        if (!i18nKey && !localeName) {
            throw new ErrorBase_1.ErrorBase('bad i18nKey or localeName', NAMESPACE, this.validateLocale.name);
        }
        let template = this.getLocaleTemplate({ key: i18nKey, locale: localeName });
        if (template) {
            p.validation.setLocalizedTemplate({ localizedTemplate: template });
            p.validation.isValid();
        }
        return p.validation;
    }
}
exports.LocalizationManager = LocalizationManager;
LocalizationManager.INSTANCE = new LocalizationManager();
//# sourceMappingURL=LocalizationManager.js.map