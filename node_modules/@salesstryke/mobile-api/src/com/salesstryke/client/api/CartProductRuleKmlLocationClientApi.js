"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartProductRuleKmlLocationClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.CartProductRuleKmlLocationClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public cartProductRuleKmlLocation : CartProductRuleKmlLocationClientApi;


        this.cartProductRuleKmlLocation = new CartProductRuleKmlLocationClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static CART_PRODUCT_RULE_KML_LOCATIONS__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cart_product_rule_kml_locations/delete");
        public static CART_PRODUCT_RULE_KML_LOCATIONS__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cart_product_rule_kml_locations/getall");
        public static CART_PRODUCT_RULE_KML_LOCATIONS__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cart_product_rule_kml_locations/getbyid");
        public static CART_PRODUCT_RULE_KML_LOCATIONS__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cart_product_rule_kml_locations/save");

*/
class CartProductRuleKmlLocationClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: CartProductRuleKmlLocation
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CART_PRODUCT_RULE_KML_LOCATIONS__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '35656bca-cbb8-4208-b05a-be7e61cd2f97', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.CART_PRODUCT_RULE_KML_LOCATIONS__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '25888b35-52a0-406a-99d7-dfd1f960cf33', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CartProductRuleKmlLocation by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CART_PRODUCT_RULE_KML_LOCATIONS__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: 'afdcc730-afdd-4af8-8db1-70f68484757a', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CART_PRODUCT_RULE_KML_LOCATIONS__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '316fd1e2-6ba8-40c4-b9cb-ef5bff949cb9', error: error });
                throw error;
            }
        });
    }
}
exports.CartProductRuleKmlLocationClientApi = CartProductRuleKmlLocationClientApi;
//# sourceMappingURL=CartProductRuleKmlLocationClientApi.js.map