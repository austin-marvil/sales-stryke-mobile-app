"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileIOClientApi = void 0;
const tslib_1 = require("tslib");
const endpoint_1 = require("../../endpoint");
const jsonApi_1 = require("../../jsonApi");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const ApiBase_1 = require("./ApiBase");
const NAMESPACE = "com.salesstryke.client.api.FileIOClientApi";
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
class FileIOClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
    }
    requestEmptyResponseArray() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({ httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.FILEIO_REQUEST_EMPTY_RESPONSE_ARRAY })
                    .request();
                let response = response_api.getJsonApiDocument().getDataAs();
                return (response);
            }
            catch (error_any) {
                let errorBase = new lang_1.ErrorBase('Failed.', NAMESPACE, this.requestEmptyResponseArray.name, '796ae426-8e57-4083-8950-cf586fc23518', error_any);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (errorBase);
            }
        });
    }
    /**
     * ```
     * type TRequestEmptyResponseArrayQueryParams =
     * {
     *     pageNumber  : number;
     *     pageSize    : number;
     * }
     * ```
     */
    requestEmptyResponseArrayQueryParams(p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let jsonApiQuery = new jsonApi_1.JsonApiQuery().setPageNumber(p.pageNumber).setPageSize(p.pageSize);
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({ httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.FILEIO_REQUEST_EMPTY_RESPONSE_ARRAY_QUERY_PARAMS })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                let response = response_api.getJsonApiDocument().getDataAs();
                return (response);
            }
            catch (error_any) {
                let errorBase = new lang_1.ErrorBase('Failed.', NAMESPACE, this.requestEmptyResponseArrayQueryParams.name, '796ae426-8e57-4083-8950-cf586fc23518', error_any);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (errorBase);
            }
        });
    }
    /**
     * ```
     * type TGetFile =
     * {
     *     taxBodyCode   :    SoftPakTaxBodyCode;
     *     jsonApiQuery? :    JsonApiQuery;
     * }
     * ```
     */
    getFile(p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({ httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.FILEIO_GET_FILE })
                    .addEntity(p.taxBodyCode)
                    .setJsonApiQuery(p.jsonApiQuery)
                    .request();
                let response = response_api.getJsonApiDocument().getDataAs();
                return (response);
            }
            catch (error_any) {
                let errorBase = new lang_1.ErrorBase('Failed.', NAMESPACE, this.getFile.name, '796ae426-8e57-4083-8950-cf586fc23518', error_any);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (errorBase);
            }
        });
    }
}
exports.FileIOClientApi = FileIOClientApi;
//# sourceMappingURL=FileIOClientApi.js.map