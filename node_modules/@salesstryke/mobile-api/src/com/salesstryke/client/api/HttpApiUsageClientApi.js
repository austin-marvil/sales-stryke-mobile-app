"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpApiUsageClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.HttpApiUsageClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
// What is this httpApi for??? DELETE_FILE?
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public httpApiUsage : HttpApiUsageClientApi;


        this.httpApiUsage = new HttpApiUsageClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static HTTP_API_USAGE__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/http_api_usage/delete");
        public static HTTP_API_USAGE__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/http_api_usage/getall");
        public static HTTP_API_USAGE__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/http_api_usage/getbyid");
        public static HTTP_API_USAGE__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/http_api_usage/save");

*/
class HttpApiUsageClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: HttpApiUsage
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.HTTP_API_USAGE__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, 'ce348bee-1d81-4b96-bec2-e959c79c7c7d', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.HTTP_API_USAGE__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, '319883b9-fc52-4eae-b66f-996f05a55e83', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: HttpApiUsage by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.HTTP_API_USAGE__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, '6143b25d-cb5a-4cb3-bb63-52e395fc9aac', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.HTTP_API_USAGE__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, '795fc5db-5de9-4fad-b7fe-fff3a3fe3146', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.HttpApiUsageClientApi = HttpApiUsageClientApi;
//# sourceMappingURL=HttpApiUsageClientApi.js.map