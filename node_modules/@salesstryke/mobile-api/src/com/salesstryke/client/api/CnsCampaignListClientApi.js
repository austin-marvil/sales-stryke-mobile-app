"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CnsCampaignListClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.CnsCampaignListClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public cnsCampaignList : CnsCampaignListClientApi;


        this.cnsCampaignList = new CnsCampaignListClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static CNS_CAMPAIGN_LIST__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_campaign_list/delete");
        public static CNS_CAMPAIGN_LIST__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_campaign_list/getall");
        public static CNS_CAMPAIGN_LIST__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_campaign_list/getbyid");
        public static CNS_CAMPAIGN_LIST__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_campaign_list/save");

*/
class CnsCampaignListClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: CnsCampaignList
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN_LIST__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '79b5e57f-27df-4382-98e2-f1e885dfebb3', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN_LIST__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '35701877-3d54-43f0-869a-fac64f67e77b', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CnsCampaignList by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN_LIST__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '97ba0336-9ba0-429e-9c74-ab8702f73697', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN_LIST__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: 'd83c5374-ffbc-42d0-9b52-1afe24e9cfb9', error: error });
                throw error;
            }
        });
    }
}
exports.CnsCampaignListClientApi = CnsCampaignListClientApi;
//# sourceMappingURL=CnsCampaignListClientApi.js.map