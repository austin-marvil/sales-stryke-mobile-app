"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductPricingRouteClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.ProductPricingRouteClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public productPricingRoute : ProductPricingRouteClientApi;


        this.productPricingRoute = new ProductPricingRouteClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static PRODUCT_PRICING_ROUTE__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/product_pricing_route/delete");
        public static PRODUCT_PRICING_ROUTE__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/product_pricing_route/getall");
        public static PRODUCT_PRICING_ROUTE__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/product_pricing_route/getbyid");
        public static PRODUCT_PRICING_ROUTE__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/product_pricing_route/save");

*/
class ProductPricingRouteClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: ProductPricingRoute
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PRODUCT_PRICING_ROUTE__DELETE }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '09ff4ee5-c6a3-42fc-8945-c28c69e1cd81', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.PRODUCT_PRICING_ROUTE__GET_ALL
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '0a9e17da-5560-417d-a5ec-35b73e12d70a', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: ProductPricingRoute by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PRODUCT_PRICING_ROUTE__GET_BY_ID }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: 'c5fa6db7-5db8-4b71-bf56-fe57757d2a6d', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PRODUCT_PRICING_ROUTE__SAVE }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: 'e0c35997-824c-400c-8a15-c2f802e7aa2d', error: error });
                throw error;
            }
        });
    }
}
exports.ProductPricingRouteClientApi = ProductPricingRouteClientApi;
//# sourceMappingURL=ProductPricingRouteClientApi.js.map