"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingIntegrationClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.SettingIntegrationClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public settingIntegration : SettingIntegrationClientApi;


        this.settingIntegration = new SettingIntegrationClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static SETTING_INTEGRATION__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/setting_integration/delete");
        public static SETTING_INTEGRATION__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/setting_integration/getall");
        public static SETTING_INTEGRATION__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/setting_integration/getbyid");
        public static SETTING_INTEGRATION__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/setting_integration/save");

*/
class SettingIntegrationClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: SettingIntegration
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SETTING_INTEGRATION__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '07766864-3a80-4092-ad99-97ad3723ac08', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SETTING_INTEGRATION__GET_ALL
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '47b909b8-1868-4e9b-95df-45e4c27e395c', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: SettingIntegration by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SETTING_INTEGRATION__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '65ec5b04-6e0a-4a36-8055-69b543c3a139', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SETTING_INTEGRATION__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '5dc62ba0-9822-425f-9732-cc7e19b337c6', error: error });
                throw error;
            }
        });
    }
}
exports.SettingIntegrationClientApi = SettingIntegrationClientApi;
//# sourceMappingURL=SettingIntegrationClientApi.js.map