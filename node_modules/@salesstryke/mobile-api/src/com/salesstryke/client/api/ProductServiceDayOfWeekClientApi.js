"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductServiceDayOfWeekClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const ProcessApiDataListUtil_1 = require("../../jsonApi/util/ProcessApiDataListUtil");
const NAMESPACE = 'com.salesstryke.client.api.ProductServiceDayOfWeekClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public productServiceDayOfWeek : ProductServiceDayOfWeekClientApi;


        this.productServiceDayOfWeek = new ProductServiceDayOfWeekClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static PRODUCT_SERVICE_DAY_OF_WEEK__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/product_service_day_of_week/delete");
        public static PRODUCT_SERVICE_DAY_OF_WEEK__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/product_service_day_of_week/getall");
        public static PRODUCT_SERVICE_DAY_OF_WEEK__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/product_service_day_of_week/getbyid");
        public static PRODUCT_SERVICE_DAY_OF_WEEK__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/product_service_day_of_week/save");

*/
class ProductServiceDayOfWeekClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: ProductServiceDayOfWeek
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PRODUCT_SERVICE_DAY_OF_WEEK__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '40909955-db04-4699-8d53-8f58ed0a71e9', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.PRODUCT_SERVICE_DAY_OF_WEEK__GET_ALL
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return ProcessApiDataListUtil_1.ProcessApiDataListUtil.parseData(response_api.getJsonApiDocument());
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '0eccc72c-10c2-43e1-b0a2-68c8763e61c8', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: ProductServiceDayOfWeek by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PRODUCT_SERVICE_DAY_OF_WEEK__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '8685ea2c-b2ec-44b4-b358-73acfc55db71', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PRODUCT_SERVICE_DAY_OF_WEEK__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '22a1de7a-f336-4d25-b56d-0c9b195e8195', error: error });
                throw error;
            }
        });
    }
}
exports.ProductServiceDayOfWeekClientApi = ProductServiceDayOfWeekClientApi;
//# sourceMappingURL=ProductServiceDayOfWeekClientApi.js.map