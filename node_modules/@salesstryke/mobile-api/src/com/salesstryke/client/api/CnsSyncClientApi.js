"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CnsSyncClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.CnsSyncClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public cnsSync : CnsSyncClientApi;


        this.cnsSync = new CnsSyncClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static CNS_SYNC__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_sync/delete");
        public static CNS_SYNC__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_sync/getall");
        public static CNS_SYNC__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_sync/getbyid");
        public static CNS_SYNC__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_sync/save");

*/
class CnsSyncClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: CnsSync
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_SYNC__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: 'c63b751e-4e77-4bf1-bdf6-0f5cb09f1587', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.CNS_SYNC__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '016621c1-2e31-454f-8ef0-e6675af14b45', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CnsSync by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_SYNC__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '6eae87bc-75b1-4ebc-b32a-2a35d44ecf3e', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_SYNC__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '576a5fde-efe0-48c9-abf7-ad6c7aa8d6d1', error: error });
                throw error;
            }
        });
    }
}
exports.CnsSyncClientApi = CnsSyncClientApi;
//# sourceMappingURL=CnsSyncClientApi.js.map