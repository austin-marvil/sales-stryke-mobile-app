"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PandaDocTemplateClientApi = void 0;
const tslib_1 = require("tslib");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const ApiBase_1 = require("./ApiBase");
const NAMESPACE = "com.salesstryke.client.api.PandaDocTemplateClientApi";
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
// TODO: review if we even need this api and if so then need to complete server api and mongo api.
class PandaDocTemplateClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
        this.delete = this.delete.bind(this);
    }
    /**
     * Return PandaDocTemplate
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.PANDADOC_TEMPLATE_GET_BY_ID
                })
                    .addEntity(request)
                    .request();
                return (_c = (_b = (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null) !== null && _b !== void 0 ? _b : null) !== null && _c !== void 0 ? _c : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, "7cd811d3-5086-4057-b0f0-047ad1031d1f", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Return Array<PandaDocTemplate>
     * @returns
     */
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.PANDADOC_TEMPLATE_GET_ALL
                })
                    .request();
                return response_api.getJsonApiDocument().getDataAs();
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, "fb741d06-b861-45c8-8089-e693009d2ed4", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Return PandaDocTemplate
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.PANDADOC_TEMPLATE_SAVE
                })
                    .addEntity(request)
                    .request();
                return (_c = (_b = (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null) !== null && _b !== void 0 ? _b : null) !== null && _c !== void 0 ? _c : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, "85f5f2dc-759e-4c99-916e-d11522d85670", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Return PandaDocTemplate
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.PANDADOC_TEMPLATE_SAVE
                })
                    .addEntity(request)
                    .request();
                return (_c = (_b = (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null) !== null && _b !== void 0 ? _b : null) !== null && _c !== void 0 ? _c : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, "40e4e41d-e6cc-47a1-a4d9-da542bf2ab32", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.PandaDocTemplateClientApi = PandaDocTemplateClientApi;
//# sourceMappingURL=PandaDocTemplateClientApi.js.map