"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const ProcessApiDataListUtil_1 = require("../../jsonApi/util/ProcessApiDataListUtil");
const NAMESPACE = "com.salesstryke.client.api.OrganizationClientApi";
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
// TODO: add missing api later as needed
class OrganizationClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.save = this.save.bind(this);
        this.delete = this.delete.bind(this);
        this.getById = this.getById.bind(this);
        this.getAllChildOrganizations = this.getAllChildOrganizations.bind(this);
        this.getRoot = this.getRoot.bind(this);
        this.getTokenValidAfter = this.getTokenValidAfter.bind(this);
        this.removeApplication = this.removeApplication.bind(this);
        this.addApplication = this.addApplication.bind(this);
        // this.getOrganizationTypeById        = this.getOrganizationTypeById.bind(this);
        // this.getOrganizationTypeBranchType  = this.getOrganizationTypeBranchType.bind(this);
        // this.getOrganizationType            = this.getOrganizationType.bind(this);
    }
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ORGANIZATION_SAVE
                })
                    .addEntity(request)
                    .request();
                return response_api.getJsonApiDocument().getDataAs()[0];
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, "6dba9163-12da-4fc0-a297-d9ddd0bb5d85", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ORGANIZATION_DELETE
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, "f5d9baf7-5453-46bb-8a7c-9c279fc507d4", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ORGANIZATION_GET_BY_ID
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, "292510be-8037-42a0-8db0-bac605419f42", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    // Note: don't need to pass a orgainzation since the parent organization should already be tie to the current login session
    getAllChildOrganizations(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ORGANIZATION_GET_ALL_CHILD_ORGANIZATIONS
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return ProcessApiDataListUtil_1.ProcessApiDataListUtil.parseData(response_api.getJsonApiDocument());
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAllChildOrganizations.name, "c98b85a9-7892-40e1-8402-633af8257339", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getRoot(p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ORGANIZATION_GET_ROOT
                })
                    .addEntity(p.request)
                    .request();
                return response_api.getJsonApiDocument().getDataAs();
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getRoot.name, "f4624bd8-96f4-4e77-8ce1-00199fb344e6", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    removeApplication(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ORGANIZATION_REMOVE_APPLICATION
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.removeApplication.name, "33c19fe5-8f3f-4022-a466-0c10fcfd4188", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    addApplication(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ORGANIZATION_ADD_APPLICATION
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.addApplication.name, "1c77baad-acaa-4406-be93-1723e3c726a1", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getTokenValidAfter() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ORGANIZATION_GET_TOKEN_VALID_AFTER
                })
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getTokenValidAfter.name, "8a9bccd3-817b-48c4-9b83-9e2b2c19a672", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.OrganizationClientApi = OrganizationClientApi;
//# sourceMappingURL=OrganizationClientApi.js.map