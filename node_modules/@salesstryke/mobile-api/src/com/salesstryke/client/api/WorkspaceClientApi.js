"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const ProcessApiDataListUtil_1 = require("../../jsonApi/util/ProcessApiDataListUtil");
const NAMESPACE = "com.salesstryke.client.api.WorkspaceClientApi";
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
class WorkspaceClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.save = this.save.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.getDocumentReport = this.getDocumentReport.bind(this);
        this.sync = this.sync.bind(this);
    }
    /**
     * Delete Entity: Workspace
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.WORKSPACE_DELETE }));
            }
            catch (error_any) {
                const error = error_any;
                const errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, "4cd083a8-74e7-450a-839d-9c1080e0c18c", error);
                LOGGER.logError(errorBase);
                throw (error_any);
            }
        });
    }
    /**
     * Save Entity: Workspace
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.WORKSPACE_SAVE }));
            }
            catch (error_any) {
                const error = error_any;
                const errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, "a6399195-52dc-4e98-8db6-244fe85d1e26", error);
                LOGGER.logError(errorBase);
                throw (error_any);
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.WORKSPACE_GET_ALL
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return ProcessApiDataListUtil_1.ProcessApiDataListUtil.parseData(response_api.getJsonApiDocument());
            }
            catch (error_any) {
                const error = error_any;
                const errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, "5204de8c-c6ef-4c76-bba4-8bea650a79c8", error);
                LOGGER.logError(errorBase);
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: Workspace by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.WORKSPACE_GET_BY_ID }));
            }
            catch (error_any) {
                const error = error_any;
                const errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, "9d07e12f-f901-4a8a-9b11-23a00193a42f", error);
                LOGGER.logError(errorBase);
                throw (error_any);
            }
        });
    }
    getDocumentReport(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.WORKSPACE_GET_DOCUMENT_REPORT }));
            }
            catch (error_any) {
                const error = error_any;
                const errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getDocumentReport.name, "03c11684-d017-4c8a-a261-a5acce5c1870", error);
                LOGGER.logError(errorBase);
                throw (error_any);
            }
        });
    }
    sync(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                const response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.WORKSPACE_SYNC
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                const error = error_any;
                const errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.sync.name, "787f0cb7-7216-4919-8db9-d88d4d027c95", error);
                LOGGER.logError(errorBase);
                throw (error_any);
            }
        });
    }
}
exports.WorkspaceClientApi = WorkspaceClientApi;
//# sourceMappingURL=WorkspaceClientApi.js.map