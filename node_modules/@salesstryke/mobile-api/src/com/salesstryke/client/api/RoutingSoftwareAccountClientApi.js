"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutingSoftwareAccountClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const ProcessApiDataListUtil_1 = require("../../jsonApi/util/ProcessApiDataListUtil");
const NAMESPACE = 'com.salesstryke.client.api.RoutingSoftwareAccountClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
class RoutingSoftwareAccountClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getByRoutingSoftwareType = this.getByRoutingSoftwareType.bind(this);
        this.getByRoutingSoftwareVersion = this.getByRoutingSoftwareVersion.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: RoutingSoftwareAccount
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.ROUTING_SOFTWARE_ACCOUNT__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '242eef6f-1fe6-4767-beee-f0f0e6fba105', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ROUTING_SOFTWARE_ACCOUNT__GET_ALL
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return ProcessApiDataListUtil_1.ProcessApiDataListUtil.parseData(response_api.getJsonApiDocument());
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '54003dd7-c9f7-40c2-9fde-77d9c198bb82', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: RoutingSoftwareAccount by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.ROUTING_SOFTWARE_ACCOUNT__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '279df9d2-eaf3-4d41-9f56-55fc469c8cd2', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: RoutingSoftwareAccount by RoutingSoftwareType
     * @param request
     * @returns
     */
    getByRoutingSoftwareType(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ROUTING_SOFTWARE_ACCOUNT__GET_BY_ROUTING_SOFTWARE_TYPE
                })
                    .addEntity(request)
                    .request();
                return ((_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null);
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getByRoutingSoftwareType.name, uuid: '714bb050-601b-4c07-b77b-be8c437df81a', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: RoutingSoftwareAccount by RoutingSoftwareVersion
     * @param request
     * @returns
     */
    getByRoutingSoftwareVersion(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ROUTING_SOFTWARE_ACCOUNT__GET_BY_ROUTING_SOFTWARE_VERSION
                })
                    .addEntity(request)
                    .request();
                return ((_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null);
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getByRoutingSoftwareVersion.name, uuid: 'dbc13915-8156-4933-8ce6-1c2004823a72', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.ROUTING_SOFTWARE_ACCOUNT__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '754b3d1a-c608-4fa3-ba3c-4f668c1247be', error: error });
                throw error;
            }
        });
    }
}
exports.RoutingSoftwareAccountClientApi = RoutingSoftwareAccountClientApi;
//# sourceMappingURL=RoutingSoftwareAccountClientApi.js.map