"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressClientApi = void 0;
const tslib_1 = require("tslib");
const endpoint_1 = require("../../endpoint");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const ApiBase_1 = require("./ApiBase");
// const NAMESPACE:    string = "com.salesstryke.client.api.AddressClientApi";
// const LOGGER:       Logger = LogManager.getLogger(NAMESPACE);
class AddressClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.save = this.save.bind(this);
        this.delete = this.delete.bind(this);
        this.getById = this.getById.bind(this);
        this.getGeocoder = this.getGeocoder.bind(this);
    }
    delete(p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ADDRESS_DELETE
                })
                    .addEntity(p.request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                // let errorBase:  ErrorBase   = new ErrorBase(error.message, NAMESPACE, this.delete.name, "f5d9baf7-5453-46bb-8a7c-9c279fc507d4", error);
                // if(LOGGER.isErrorEnabled()) { LOGGER.logErrorBase(errorBase); }
                throw (error_any);
            }
        });
    }
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ADDRESS_SAVE
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                // let errorBase:  ErrorBase   = new ErrorBase(error.message, NAMESPACE, this.save.name, "e6b1d724-e660-4bff-a7c7-edb7856be74e", error);
                // if(LOGGER.isErrorEnabled()) { LOGGER.logErrorBase(errorBase); }
                throw (error_any);
            }
        });
    }
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ADDRESS_GET_BY_ID
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                // let errorBase:  ErrorBase   = new ErrorBase(error.message, NAMESPACE, this.getById.name, "ce9b0c44-599c-47ee-b533-d3ca79134f94", error);
                // if(LOGGER.isErrorEnabled()) { LOGGER.logErrorBase(errorBase); }
                throw (error_any);
            }
        });
    }
    getGeocoder(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.ADDRESS_GET_GEOCODER
                })
                    .addEntity(request)
                    .request();
                return response_api.getJsonApiDocument().getDataAs();
            }
            catch (error_any) {
                let error = error_any;
                // let errorBase:  ErrorBase   = new ErrorBase(error.message, NAMESPACE, this.getById.name, "78a78905-f9bb-4fc1-8775-b3eb3cb8742c", error);
                // if(LOGGER.isErrorEnabled()) { LOGGER.logErrorBase(errorBase); }
                throw (error_any);
            }
        });
    }
}
exports.AddressClientApi = AddressClientApi;
//# sourceMappingURL=AddressClientApi.js.map