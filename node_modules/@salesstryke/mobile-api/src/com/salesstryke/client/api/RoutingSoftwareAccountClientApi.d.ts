import { ApiBase } from "./ApiBase";
import { HttpClient } from "../../utils/httpclient";
import { RoutingSoftwareAccount } from "../../entity/classes/persistable/RoutingSoftwareAccount";
import { RoutingSoftwareVersion } from "../../entity/classes/persistable/RoutingSoftwareVersion";
import { RoutingSoftwareType } from "../../entity/classes/persistable/RoutingSoftwareType";
import { JsonApiQuery } from "../../jsonApi/JsonApiQuery";
import { TProcessApiDataListType } from "../../jsonApi/util/ProcessApiDataListUtil";
export declare class RoutingSoftwareAccountClientApi extends ApiBase {
    constructor(httpClient: HttpClient);
    /**
     * Delete Entity: RoutingSoftwareAccount
     * @param request
     * @returns
     */
    delete(request: RoutingSoftwareAccount): Promise<RoutingSoftwareAccount | null>;
    getAll(jsonApiQuery?: JsonApiQuery): Promise<TProcessApiDataListType<RoutingSoftwareAccount>>;
    /**
     * Get Entity: RoutingSoftwareAccount by Id
     * @param request
     * @returns
     */
    getById(request: RoutingSoftwareAccount): Promise<RoutingSoftwareAccount | null>;
    /**
     * Get Entity: RoutingSoftwareAccount by RoutingSoftwareType
     * @param request
     * @returns
     */
    getByRoutingSoftwareType(request: RoutingSoftwareType): Promise<RoutingSoftwareAccount | null>;
    /**
     * Get Entity: RoutingSoftwareAccount by RoutingSoftwareVersion
     * @param request
     * @returns
     */
    getByRoutingSoftwareVersion(request: RoutingSoftwareVersion): Promise<RoutingSoftwareAccount | null>;
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request: RoutingSoftwareAccount): Promise<RoutingSoftwareAccount>;
}
