"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KmlGeometryClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.KmlGeometryClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public kmlGeometry : KmlGeometryClientApi;


        this.kmlGeometry = new KmlGeometryClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static KML_POLYGON__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/kml_polygon/delete");
        public static KML_POLYGON__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/kml_polygon/getall");
        public static KML_POLYGON__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/kml_polygon/getbyid");
        public static KML_POLYGON__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/kml_polygon/save");

*/
class KmlGeometryClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: KmlGeometry
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.KML_POLYGON__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: 'cb35845c-eb85-460c-91b6-c3c893b3bd51', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.KML_POLYGON__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '4c5c5d8b-ede3-4549-8aef-78eae7a7c6fa', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: KmlGeometry by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.KML_POLYGON__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '906888f3-ce30-4fd4-9e54-f290bef6c6ad', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.KML_POLYGON__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '385ee3a5-aefd-4ea2-bac9-5036f3017036', error: error });
                throw error;
            }
        });
    }
}
exports.KmlGeometryClientApi = KmlGeometryClientApi;
//# sourceMappingURL=KmlGeometryClientApi.js.map