"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportDataClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const ProcessApiDataListUtil_1 = require("../../jsonApi/util/ProcessApiDataListUtil");
const NAMESPACE = 'com.salesstryke.client.api.ImportDataClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
class ImportDataClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getAllByImportDataFileId = this.getAllByImportDataFileId.bind(this);
        this.getById = this.getById.bind(this);
        this.getByBatchId = this.getByBatchId.bind(this);
        this.getByIndexedVar = this.getByIndexedVar.bind(this);
        this.getIndexAttributeType = this.getIndexAttributeType.bind(this);
        this.save = this.save.bind(this);
        this.update = this.update.bind(this);
        this.searchAddress = this.searchAddress.bind(this);
    }
    /**
     * Delete Entity: ImportData
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, 'ff4da0cc-81e5-4643-916a-cf19708aa3cc', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, '82a173bf-335c-49be-8e72-9bd59f6202de', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportData[] by ImportDataFileUpload Id
     * @param request - importData.getByImportDataFileUpload();
     * @returns
     */
    getAllByImportDataFileId(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAllByImportDataFileId.name, '1ad45539-ea8c-4114-b7e8-bbcdae315fac', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportData by ArrayData of string id
     * @param request
     * @returns
     */
    getByBatchId(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__GET_BY_BATCH_ID
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getByBatchId.name, '92b811cb-d05c-43ce-bb84-0645371475d9', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportData by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, '4dbbcd69-2eb9-420a-adb1-c98e45bd8c78', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportData by Id
     * @param request
     * @returns
     */
    getByIndexedVar(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__GET_BY_INDEXED_VAR }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getByIndexedVar.name, 'fbefbbe4-8497-44df-b2f4-62ce911b09ea', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportData index attribute type
     * @param request
     * @returns
     */
    getIndexAttributeType(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__GET_INDEX_ATTRIBUTE_TYPE
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getIndexAttributeType.name, '5a604a12-cdb6-4603-a69d-a9c7b59c896e', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, '9e232b38-94a6-42b6-87a4-3db5becb4dc2', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * update Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    update(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__UPDATE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.update.name, '79167ab7-7d10-4e26-a482-2e9e72bbcb53', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    searchAddress(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(),
                    endPointUrl: endpoint_1.EndPoint.IMPORT_DATA__SEARCH_ADDRESS,
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                const result = ProcessApiDataListUtil_1.ProcessApiDataListUtil.parseData(response_api.getJsonApiDocument());
                return (((_a = result.data) === null || _a === void 0 ? void 0 : _a.map((importData) => {
                    return {
                        id: importData.getId() || '',
                        address: importData.getStringIndexedVar3() || '',
                    };
                })) || []);
            }
            catch (error_any) {
                throw error_any;
            }
        });
    }
}
exports.ImportDataClientApi = ImportDataClientApi;
//# sourceMappingURL=ImportDataClientApi.js.map