"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportDataMapTypeAttributeTypeClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.ImportDataMapTypeAttributeTypeClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public importDataMapTypeAttributeType : ImportDataMapTypeAttributeTypeClientApi;


        this.importDataMapTypeAttributeType = new ImportDataMapTypeAttributeTypeClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static IMPORT_DATA_MAP_TYPE_ATTRIBUTE_TYPE__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_map_type_attribute_type/delete");
        public static IMPORT_DATA_MAP_TYPE_ATTRIBUTE_TYPE__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_map_type_attribute_type/getall");
        public static IMPORT_DATA_MAP_TYPE_ATTRIBUTE_TYPE__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_map_type_attribute_type/getbyid");
        public static IMPORT_DATA_MAP_TYPE_ATTRIBUTE_TYPE__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_map_type_attribute_type/save");

*/
class ImportDataMapTypeAttributeTypeClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: ImportDataMapTypeAttributeType
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_TYPE_ATTRIBUTE_TYPE__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, '903e50be-db42-4dbc-b892-27f5aa86e6fc', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_TYPE_ATTRIBUTE_TYPE__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, '476035c7-c7c4-4678-9ba3-fe4d64a081b7', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportDataMapTypeAttributeType by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_TYPE_ATTRIBUTE_TYPE__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, '7ab80925-2364-4330-b024-4ea08cd8ec90', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_TYPE_ATTRIBUTE_TYPE__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, '7da8f529-274f-4a01-bf4f-99b1c804ccfe', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.ImportDataMapTypeAttributeTypeClientApi = ImportDataMapTypeAttributeTypeClientApi;
//# sourceMappingURL=ImportDataMapTypeAttributeTypeClientApi.js.map