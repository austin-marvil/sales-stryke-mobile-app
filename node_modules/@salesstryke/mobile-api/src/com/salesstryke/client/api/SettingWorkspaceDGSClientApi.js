"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingWorkspaceDGSClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.SettingWorkspaceDGSClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public settingWorkspaceDGS : SettingWorkspaceDGSClientApi;


        this.settingWorkspaceDGS = new SettingWorkspaceDGSClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static SETTING_WORKSPACE_D_G_S__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/setting_workspace_d_g_s/delete");
        public static SETTING_WORKSPACE_D_G_S__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/setting_workspace_d_g_s/getall");
        public static SETTING_WORKSPACE_D_G_S__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/setting_workspace_d_g_s/getbyid");
        public static SETTING_WORKSPACE_D_G_S__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/setting_workspace_d_g_s/save");

*/
class SettingWorkspaceDGSClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: SettingWorkspaceDGS
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SETTING_WORKSPACE_D_G_S__DELETE }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: 'ccb01971-7166-4b27-bf2d-9fe9aca4d1f4', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SETTING_WORKSPACE_D_G_S__GET_ALL
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '91bb5b44-e90b-4ce6-b7fa-79ac4df2fa3b', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: SettingWorkspaceDGS by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SETTING_WORKSPACE_D_G_S__GET_BY_ID }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '438a9c1f-9490-432d-84c7-57e8c36d9f5b', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SETTING_WORKSPACE_D_G_S__SAVE }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '97d86096-81e3-4eef-a5c3-acc7e99c1180', error: error });
                throw error;
            }
        });
    }
}
exports.SettingWorkspaceDGSClientApi = SettingWorkspaceDGSClientApi;
//# sourceMappingURL=SettingWorkspaceDGSClientApi.js.map