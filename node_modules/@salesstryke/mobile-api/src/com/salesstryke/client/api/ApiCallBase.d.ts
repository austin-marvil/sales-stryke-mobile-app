import { HttpMethodType } from "../../http/HttpMethodType";
import { JsonApiDocument } from "../../jsonApi/JsonApiDocument";
import { HttpClient } from "../../utils/httpclient/HttpClient";
import { JsonApiError } from "../../jsonApi/JsonApiError";
import { JsonApiQuery } from "../../jsonApi/JsonApiQuery";
export declare class ApiCallBase {
    private httpClient;
    private httpMethodType;
    private jsonApiDocument;
    private jsonApiQuery;
    private path_s;
    constructor(httpClient: HttpClient, httpMethodType: HttpMethodType, path: string);
    getHttpClient(): HttpClient;
    getHttpMethodType(): HttpMethodType;
    getJsonApiDocument(): JsonApiDocument | null;
    getJsonApiQuery(): JsonApiQuery | null;
    getPath(): string;
    /**
     * resolves the async call back if there is an error, returns true. Else returns false if no error.
     * @param reject
     * @param response_jad
     * @returns
     */
    handleResponseErrors(reject: (err: JsonApiError[]) => void, response_jad: JsonApiDocument): boolean;
    setJsonApiDocument(jsonApiDocument: JsonApiDocument): ApiCallBase;
    setJsonApiPagination(jsonApiPagination: JsonApiQuery): ApiCallBase;
}
