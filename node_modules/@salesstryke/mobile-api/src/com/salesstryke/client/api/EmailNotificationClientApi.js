"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailNotificationClientApi = void 0;
const tslib_1 = require("tslib");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const ApiBase_1 = require("./ApiBase");
const NAMESPACE = "com.salesstryke.client.api.EmailNotificationClientApi";
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
class EmailNotificationClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.send = this.send.bind(this);
    }
    /**
     * Returns a EmailNotification
     * @returns
     */
    send(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.EMAIL_NOTIFICATION_SEND
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let errorBase = new lang_1.ErrorBase('Failed.', NAMESPACE, this.send.name, '5f2f0b07-654f-4a78-aef2-10b750be0a04', error_any);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (errorBase);
            }
        });
    }
}
exports.EmailNotificationClientApi = EmailNotificationClientApi;
//# sourceMappingURL=EmailNotificationClientApi.js.map