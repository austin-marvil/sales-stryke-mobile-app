"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CnsCampaignClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.CnsCampaignClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public cnsCampaign : CnsCampaignClientApi;


        this.cnsCampaign = new CnsCampaignClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static CNS_CAMPAIGN__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_campaign/delete");
        public static CNS_CAMPAIGN__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_campaign/getall");
        public static CNS_CAMPAIGN__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_campaign/getbyid");
        public static CNS_CAMPAIGN__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_campaign/save");

*/
class CnsCampaignClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.getEmailTemplateById = this.getEmailTemplateById.bind(this);
        this.getMetricsByIdDateRangeKpi = this.getMetricsByIdDateRangeKpi.bind(this);
        this.save = this.save.bind(this);
        this.saveEmailCampaign = this.saveEmailCampaign.bind(this);
    }
    /**
     * Delete Entity: CnsCampaign
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '303c601d-d1b8-448d-9b68-7578b4ed6050', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '6ec9f8ad-8468-4021-ba69-110073b24baa', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CnsCampaign by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: 'c80149c4-b3a3-4883-b648-8532214fed96', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CnsCampaign Statis by Id, date range, and kpi name
     * @param request
     * @returns
     */
    getMetricsByIdDateRangeKpi(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getMetricsByIdDateRangeKpi.name, uuid: '7c771194-6867-4c28-bebc-e0a56e36872e', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CnsCampaign by Id
     * @param request
     * @returns
     */
    getEmailTemplateById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN__GET_EMAIL_TEMPLATE_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getEmailTemplateById.name, uuid: '75a32402-6a20-4841-b1f3-65b3681d0b70', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '270571d7-e4ae-4a15-99e7-d5bb232f4db1', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Email Campaign
     * @param request CnsCampaign entity configured for email delivery
     * @returns The saved CnsCampaign with updated AWS data
     */
    saveEmailCampaign(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Validate that this is an email campaign
                if (request.getCnsCampaignType() !== 'EMAIL') {
                    const error = new Error('Campaign must be of type EMAIL');
                    LOGGER.logError({ message: error.message, methodName: this.saveEmailCampaign.name, uuid: '3b7429e5-d02a-48c1-b718-c9046f82d38a', error });
                    throw error;
                }
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_CAMPAIGN__SAVE_EMAIL }));
            }
            catch (error_any) {
                const error = error_any instanceof Error ? error_any : new Error(String(error_any));
                LOGGER.logError({ message: error.message, methodName: this.saveEmailCampaign.name, uuid: 'f1e85d79-a3b4-4cb9-98a0-7aea2eb49c0e', error });
                throw error;
            }
        });
    }
}
exports.CnsCampaignClientApi = CnsCampaignClientApi;
//# sourceMappingURL=CnsCampaignClientApi.js.map