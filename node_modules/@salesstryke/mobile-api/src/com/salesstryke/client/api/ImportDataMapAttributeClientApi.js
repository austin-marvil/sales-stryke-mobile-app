"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportDataMapAttributeClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.ImportDataMapAttributeClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public importDataMapAttribute : ImportDataMapAttributeClientApi;


        this.importDataMapAttribute = new ImportDataMapAttributeClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static IMPORT_DATA_MAP_ATTRIBUTE__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_map_attribute/delete");
        public static IMPORT_DATA_MAP_ATTRIBUTE__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_map_attribute/getall");
        public static IMPORT_DATA_MAP_ATTRIBUTE__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_map_attribute/getbyid");
        public static IMPORT_DATA_MAP_ATTRIBUTE__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_map_attribute/save");

*/
class ImportDataMapAttributeClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.getByAttributeName = this.getByAttributeName.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: ImportDataMapAttribute
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_ATTRIBUTE__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, '53d0a7fa-78c6-4de5-99fd-161f4bffa06e', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_ATTRIBUTE__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, '9c6752d2-00db-45e5-a186-c26d6c651a0f', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportDataMapAttribute by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_ATTRIBUTE__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, '0d656f4a-afdf-4ee5-8bae-e6f703503dcb', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportDataMapAttribute by attributename
     * @param request
     * @returns
     */
    getByAttributeName(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_ATTRIBUTE__GET_BY_ATTRIBUTE_NAME }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getByAttributeName.name, '8d570ae3-e527-461d-ae76-9ec8e8f7740f', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_MAP_ATTRIBUTE__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, '51ec49af-9239-470f-b2dc-ba416a9357ed', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.ImportDataMapAttributeClientApi = ImportDataMapAttributeClientApi;
//# sourceMappingURL=ImportDataMapAttributeClientApi.js.map