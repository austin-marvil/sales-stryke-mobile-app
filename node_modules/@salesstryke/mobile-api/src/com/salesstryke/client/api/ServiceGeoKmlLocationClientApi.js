"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceGeoKmlLocationClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.ServiceGeoKmlLocationClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public serviceGeoKmlLocation : ServiceGeoKmlLocationClientApi;


        this.serviceGeoKmlLocation = new ServiceGeoKmlLocationClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static SERVICE_GEO_KML_LOCATION__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/service_geo_kml_location/delete");
        public static SERVICE_GEO_KML_LOCATION__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/service_geo_kml_location/getall");
        public static SERVICE_GEO_KML_LOCATION__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/service_geo_kml_location/getbyid");
        public static SERVICE_GEO_KML_LOCATION__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/service_geo_kml_location/save");

*/
class ServiceGeoKmlLocationClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: ServiceGeoKmlLocation
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SERVICE_GEO_KML_LOCATION__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '2b3a8be4-7bd7-4866-84b8-a1cf40cd5da6', error: error });
                throw error;
            }
        });
    }
    getAll() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.SERVICE_GEO_KML_LOCATION__GET_ALL }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: 'ac525ecd-b356-4786-89d4-643759532872', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: ServiceGeoKmlLocation by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SERVICE_GEO_KML_LOCATION__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '48e6dbfc-6686-4303-9821-9dedb976d0b4', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.SERVICE_GEO_KML_LOCATION__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: 'c3e35814-12b2-4078-9fe7-e4380f76f0b0', error: error });
                throw error;
            }
        });
    }
}
exports.ServiceGeoKmlLocationClientApi = ServiceGeoKmlLocationClientApi;
//# sourceMappingURL=ServiceGeoKmlLocationClientApi.js.map