"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionTypeClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.PermissionTypeClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public permissionType : PermissionTypeClientApi;


        this.permissionType = new PermissionTypeClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static PERMISSION_TYPE__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/permission_type/delete");
        public static PERMISSION_TYPE__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/permission_type/getall");
        public static PERMISSION_TYPE__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/permission_type/getbyid");
        public static PERMISSION_TYPE__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/permission_type/save");

*/
class PermissionTypeClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: PermissionType
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PERMISSION_TYPE__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '083bfd39-1065-45c0-b5bf-3d0594bcf85f', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.PERMISSION_TYPE__GET_ALL
                })
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: 'e3e8bc49-dbad-4977-adb0-58d081baf47a', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: PermissionType by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PERMISSION_TYPE__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: '300429e1-0a04-4833-802b-068cd22a1ed9', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.PERMISSION_TYPE__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: 'bd754b59-72db-426f-82da-98ae306602ab', error: error });
                throw error;
            }
        });
    }
}
exports.PermissionTypeClientApi = PermissionTypeClientApi;
//# sourceMappingURL=PermissionTypeClientApi.js.map