"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CnsMessageTemplateClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.CnsMessageTemplateClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public cnsMessageTemplate : CnsMessageTemplateClientApi;


        this.cnsMessageTemplate = new CnsMessageTemplateClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static CNS_MESSAGE_TEMPLATE__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_message_template/delete");
        public static CNS_MESSAGE_TEMPLATE__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_message_template/getall");
        public static CNS_MESSAGE_TEMPLATE__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_message_template/getbyid");
        public static CNS_MESSAGE_TEMPLATE__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_message_template/save");
        public static CNS_MESSAGE_TEMPLATE__SAVE_EMAIL_TEMPLATE: EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_message_template/save_email_template");

*/
class CnsMessageTemplateClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
        this.saveEmailTemplate = this.saveEmailTemplate.bind(this);
    }
    /**
     * Delete Entity: CnsMessageTemplate
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_MESSAGE_TEMPLATE__DELETE }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: 'f4df4bba-6338-4c15-b42d-241b12f6304e', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Call the enhanced getAll method that automatically populates AWS template data
                const templates = yield this.callEndPointUrlAndReturnEntityArray({
                    endPointUrl: endpoint_1.EndPoint.CNS_MESSAGE_TEMPLATE__GET_ALL,
                    jsonApiQuery: jsonApiQuery
                });
                return templates;
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: 'bfe0e6f5-c073-49d8-ac75-ab32037e39ae', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CnsMessageTemplate by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_MESSAGE_TEMPLATE__GET_BY_ID }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: 'edebd6b8-0886-40cc-9423-64d94c1058fc', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_MESSAGE_TEMPLATE__SAVE }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: 'e5b6acd0-32a4-429d-ba9c-d293ba2e5b3c', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Email Template Entity: Creates or updates an email template in AWS SES
     * @param request CnsMessageTemplate object with EMAIL channel type and AWS template data
     * @returns
     */
    saveEmailTemplate(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({
                    entity: request,
                    endPointUrl: endpoint_1.EndPoint.CNS_MESSAGE_TEMPLATE__SAVE_EMAIL_TEMPLATE
                }));
            }
            catch (error_any) {
                const error = error_any;
                LOGGER.logError({
                    message: error.message,
                    methodName: this.saveEmailTemplate.name,
                    uuid: '76e8f421-9d3c-47a5-b2e8-c9d482f56e1a',
                    error: error
                });
                throw error;
            }
        });
    }
}
exports.CnsMessageTemplateClientApi = CnsMessageTemplateClientApi;
//# sourceMappingURL=CnsMessageTemplateClientApi.js.map