"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecureIdentityClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const ErrorBase_1 = require("../../lang/ErrorBase");
const ProcessApiDataListUtil_1 = require("../../jsonApi/util/ProcessApiDataListUtil");
const NAMESPACE = "com.salesstryke.client.api.SecureIdentityClientApi";
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
class SecureIdentityClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.login = this.login.bind(this);
        this.loginAsOrganization = this.loginAsOrganization.bind(this);
        this.save = this.save.bind(this);
        this.getById = this.getById.bind(this);
        this.getSecurityRoles = this.getSecurityRoles.bind(this);
        this.getAllSecureIdentityByUserTypeAndOrganization = this.getAllSecureIdentityByUserTypeAndOrganization.bind(this);
        this.delete = this.delete.bind(this);
        this.update = this.update.bind(this);
    }
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({ httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_DELETE })
                    .addEntity(request)
                    .request();
                let response = (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
                return (response);
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '45fede77-68ac-4c4e-b573-d829db34124e', error: error });
                throw (error);
            }
        });
    }
    getSecurityRoles() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({ httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_GET_ROLES })
                    .request();
                let response = response_api.getJsonApiDocument().getDataAs();
                return (response);
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getSecurityRoles.name, uuid: '51bef841-8d5c-4514-8386-3c8e66312171', error: error });
                throw (error);
            }
        });
    }
    loginAsOrganization(p) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({ httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_LOGIN_AS_ORGANIZATION })
                    .addEntity(p.organization)
                    .request();
                let response = (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
                let isAuthenticated_b = false;
                let jwtToken_s = '';
                if (response) {
                    isAuthenticated_b = response.getIsAuthenticated();
                    jwtToken_s = (_b = response.getJwtToken()) !== null && _b !== void 0 ? _b : '';
                    if (isAuthenticated_b && jwtToken_s) {
                        let httpClient = this.getHttpClient();
                        httpClient.setIsAuthenticated(isAuthenticated_b);
                        httpClient.setJwtToken(jwtToken_s);
                    }
                }
                return ({ identity: response, token: jwtToken_s });
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.loginAsOrganization.name, uuid: 'a9d06896-3ab3-4eea-ab62-2c7e513de8cf', error: error });
                throw (error_any);
            }
        });
    }
    login(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({ httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_LOGIN })
                    .addEntity(request)
                    .request();
                let response = response_api.getJsonApiDocument().getDataAsItem();
                let isAuthenticated_b = false;
                let jwtToken_s = '';
                if (response) {
                    isAuthenticated_b = response.getIsAuthenticated();
                    jwtToken_s = (_a = response.getJwtToken()) !== null && _a !== void 0 ? _a : '';
                    if (isAuthenticated_b && jwtToken_s) {
                        let httpClient = this.getHttpClient();
                        httpClient.setIsAuthenticated(isAuthenticated_b);
                        httpClient.setJwtToken(jwtToken_s);
                    }
                }
                return ({ identity: response, token: jwtToken_s });
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.login.name, uuid: "bdbca6c7-eab2-4f57-bfe6-7d4c2dd2b036", error: error });
                throw (error_any);
            }
        });
    }
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(),
                    endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_SAVE,
                })
                    .addEntity(request)
                    .request();
                return response_api
                    .getJsonApiDocument()
                    .getDataAs()[0];
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({
                    message: error.message,
                    methodName: this.save.name,
                    uuid: '45fede77-68ac-4c4e-b573-d829db34124e',
                    error: error,
                });
                throw error;
            }
        });
    }
    setActiveWorkspace(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(),
                    endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_SET_ACTIVE_WORKSPACE,
                })
                    .addEntity(request)
                    .request();
                return response_api
                    .getJsonApiDocument()
                    .getDataAs()[0];
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({
                    message: error.message,
                    methodName: this.save.name,
                    uuid: '45fede77-68ac-4c4e-b573-d829db34124e',
                    error: error,
                });
                throw error;
            }
        });
    }
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_GET_BY_ID
                })
                    .addEntity(request)
                    .request();
                let secureIdentity = response_api.getDataAsItem({ setInitialAttributesState: true });
                return (secureIdentity);
                //return response_api.getJsonApiDocument().getDataAs<SecureIdentity>()[0] ?? null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, this.getById.name, "3a7ff48b-1de1-42b1-b159-583377d29be5", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    update(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({ httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_UPDATE })
                    .addEntity(request)
                    .request();
                let response = (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
                return (response);
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.update.name, uuid: '7f32baf5-f63c-4abb-b8ee-1cc23ba656c1', error: error });
                throw (error);
            }
        });
    }
    getAllSecureIdentityByUserTypeAndOrganization(request, jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SECURE_IDENTITY_GET_ALL_BY_USER_TYPE_AND_ORGANIZATION
                })
                    .addEntity(request)
                    .setJsonApiQuery(jsonApiQuery)
                    .request();
                return ProcessApiDataListUtil_1.ProcessApiDataListUtil.parseData(response_api.getJsonApiDocument());
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new ErrorBase_1.ErrorBase(error.message, NAMESPACE, this.getAllSecureIdentityByUserTypeAndOrganization.name, "b07f14bb-f4cd-4f67-9cc0-d7e8f88ab514", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.SecureIdentityClientApi = SecureIdentityClientApi;
//# sourceMappingURL=SecureIdentityClientApi.js.map