"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CnsEndPointSignupStatusTypeClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.CnsEndPointSignupStatusTypeClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public cnsEndPointSignupStatusType : CnsEndPointSignupStatusTypeClientApi;


        this.cnsEndPointSignupStatusType = new CnsEndPointSignupStatusTypeClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static CNS_END_POINT_SIGNUP_STATUS_TYPE__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_end_point_signup_status_type/delete");
        public static CNS_END_POINT_SIGNUP_STATUS_TYPE__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_end_point_signup_status_type/getall");
        public static CNS_END_POINT_SIGNUP_STATUS_TYPE__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_end_point_signup_status_type/getbyid");
        public static CNS_END_POINT_SIGNUP_STATUS_TYPE__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cns_end_point_signup_status_type/save");

*/
class CnsEndPointSignupStatusTypeClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: CnsEndPointSignupStatusType
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_END_POINT_SIGNUP_STATUS_TYPE__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '05065de3-7ff9-4a5b-8344-1a287d112599', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.CNS_END_POINT_SIGNUP_STATUS_TYPE__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '0810435d-aa9e-4be8-9bfc-2a2231c92ec9', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CnsEndPointSignupStatusType by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_END_POINT_SIGNUP_STATUS_TYPE__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: 'f046d32c-0f46-469c-9d3e-90c1e66d1314', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CNS_END_POINT_SIGNUP_STATUS_TYPE__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: '5cf3aaac-57b9-426c-af82-ee8604662840', error: error });
                throw error;
            }
        });
    }
}
exports.CnsEndPointSignupStatusTypeClientApi = CnsEndPointSignupStatusTypeClientApi;
//# sourceMappingURL=CnsEndPointSignupStatusTypeClientApi.js.map