import { ApiBase } from "./ApiBase";
import { HttpClient } from "../../utils/httpclient";
import { SecureIdentity, Organization, SecurityRole, UserType, Workspace } from "../../entity/classes/persistable";
import { JsonApiQuery } from "../../jsonApi";
import { TProcessApiDataListType } from "../../jsonApi/util/ProcessApiDataListUtil";
export declare class SecureIdentityClientApi extends ApiBase {
    constructor(httpClient: HttpClient);
    delete(request: SecureIdentity): Promise<SecureIdentity | null>;
    getSecurityRoles(): Promise<Array<SecurityRole> | null>;
    loginAsOrganization(p: {
        organization: Organization;
    }): Promise<{
        identity: SecureIdentity | null;
        token: string;
    }>;
    login(request: SecureIdentity): Promise<{
        identity: SecureIdentity | null;
        token: string;
    }>;
    save(request: SecureIdentity): Promise<SecureIdentity>;
    setActiveWorkspace(request: Workspace): Promise<SecureIdentity>;
    getById(request: SecureIdentity): Promise<SecureIdentity | null>;
    update(request: SecureIdentity): Promise<SecureIdentity | null>;
    getAllSecureIdentityByUserTypeAndOrganization(request: UserType, jsonApiQuery?: JsonApiQuery): Promise<TProcessApiDataListType<SecureIdentity>>;
}
