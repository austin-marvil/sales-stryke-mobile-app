"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportDataFileUploadClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.ImportDataFileUploadClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public importDataFileUpload : ImportDataFileUploadClientApi;


        this.importDataFileUpload = new ImportDataFileUploadClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static IMPORT_DATA_FILE_UPLOAD__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_file_upload/delete");
        public static IMPORT_DATA_FILE_UPLOAD__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_file_upload/getall");
        public static IMPORT_DATA_FILE_UPLOAD__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_file_upload/getbyid");
        public static IMPORT_DATA_FILE_UPLOAD__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/import_data_file_upload/save");

*/
class ImportDataFileUploadClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.getUploadPresignUrl = this.getUploadPresignUrl.bind(this);
        this.postUploadProcess = this.postUploadProcess.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: ImportDataFileUpload
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_FILE_UPLOAD__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, '80727ef7-3ab9-4a71-b13c-9648fee786b6', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_FILE_UPLOAD__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, '89a98d02-0749-43c9-aaf1-3614c7a5b868', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportDataFileUpload by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_FILE_UPLOAD__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, '90f98209-71a0-4ddd-a63d-1ef6198445ca', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportDataFileUpload by Id
     * @param request
     * @returns
     */
    getUploadPresignUrl(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_FILE_UPLOAD__GET_UPLOAD_PRESIGN_URL }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getUploadPresignUrl.name, '1df5e75c-a90c-469e-9331-acf2b0b37872', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_FILE_UPLOAD__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, '2db82e50-c7f6-4e04-8ca4-9fbfdb24857e', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: ImportDataFileUpload by Id
     * @param request
     * @returns
     */
    postUploadProcess(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.IMPORT_DATA_FILE_UPLOAD__POST_UPLOAD_PROCESS }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.postUploadProcess.name, 'a40adc02-16a0-4eed-8a50-ed8e8db060d8', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.ImportDataFileUploadClientApi = ImportDataFileUploadClientApi;
//# sourceMappingURL=ImportDataFileUploadClientApi.js.map