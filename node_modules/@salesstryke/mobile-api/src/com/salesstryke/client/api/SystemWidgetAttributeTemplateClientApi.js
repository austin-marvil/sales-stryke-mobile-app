"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemWidgetAttributeTemplateClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const NAMESPACE = "com.salesstryke.client.api.SystemWidgetAttributeTemplateClientApi";
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
class SystemWidgetAttributeTemplateClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.save = this.save.bind(this);
        this.getById = this.getById.bind(this);
    }
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SYSTEM_WIDGET_ATTRIBUTE_TEMPLATE_SAVE
                })
                    .addEntity(request)
                    .request();
                return response_api.getJsonApiDocument().getDataAsItem();
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, "40a0e779-be13-4d5d-a1f8-4d7d117e0e4c", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.SYSTEM_WIDGET_ATTRIBUTE_TEMPLATE_GET_BY_ID
                })
                    .addEntity(request)
                    .request();
                return response_api.getJsonApiDocument().getDataAsItem();
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, "b32f912e-66ab-4931-99d0-eaf8f9732571", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.SystemWidgetAttributeTemplateClientApi = SystemWidgetAttributeTemplateClientApi;
//# sourceMappingURL=SystemWidgetAttributeTemplateClientApi.js.map