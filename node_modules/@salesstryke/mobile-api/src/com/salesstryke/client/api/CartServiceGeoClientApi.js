"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartServiceGeoClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.CartServiceGeoClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public cartServiceGeo : CartServiceGeoClientApi;


        this.cartServiceGeo = new CartServiceGeoClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static CART_SERVICE_GEO__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cart_service_geo/delete");
        public static CART_SERVICE_GEO__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cart_service_geo/getall");
        public static CART_SERVICE_GEO__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cart_service_geo/getbyid");
        public static CART_SERVICE_GEO__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/cart_service_geo/save");

*/
class CartServiceGeoClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: CartServiceGeo
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CART_SERVICE_GEO__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.delete.name, uuid: '58ec04ad-0061-4a15-9ef6-644236a02763', error: error });
                throw error;
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.CART_SERVICE_GEO__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getAll.name, uuid: '25da936c-896d-4295-af83-d11ce508063f', error: error });
                throw error;
            }
        });
    }
    /**
     * Get Entity: CartServiceGeo by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CART_SERVICE_GEO__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.getById.name, uuid: 'e35c3871-8fe3-42b1-ac17-a414dee969fb', error: error });
                throw error;
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.CART_SERVICE_GEO__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                LOGGER.logError({ message: error.message, methodName: this.save.name, uuid: 'b138d08c-1c50-4713-b24a-ea83cd6606e9', error: error });
                throw error;
            }
        });
    }
}
exports.CartServiceGeoClientApi = CartServiceGeoClientApi;
//# sourceMappingURL=CartServiceGeoClientApi.js.map