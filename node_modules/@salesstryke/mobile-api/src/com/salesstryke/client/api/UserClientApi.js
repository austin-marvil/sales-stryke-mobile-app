"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserClientApi = void 0;
const tslib_1 = require("tslib");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const ClientToServerApiCall_1 = require("../call/ClientToServerApiCall");
const ApiBase_1 = require("./ApiBase");
const NAMESPACE = "com.salesstryke.client.api.UserClientApi";
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
class UserClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.save = this.save.bind(this);
        this.getById = this.getById.bind(this);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getAllUserByUserTypeAndOrganization = this.getAllUserByUserTypeAndOrganization.bind(this);
        this.getByQuery = this.getByQuery.bind(this);
    }
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.USER_GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, "ca608233-b3b5-4f14-a02d-8703ea42ecb3", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.USER_SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, "28f4011e-1f50-45b4-bb9e-657b0a0474de", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.USER_DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, "6c858593-d8d3-491a-9443-b81f0c302d81", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getByQuery(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.USER_GET_BY_QUERY
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()[0]) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getByQuery.name, "e0b911d6-1bca-4f28-9ef4-1dee94500a67", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getAll(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.USER_GET_ALL_BY_ORGANIZATION
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()) !== null && _a !== void 0 ? _a : [];
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, "6715f9e9-6270-4ebf-8578-26e14151ed1a", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getAllUserByUserTypeAndOrganization(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                let response_api = yield new ClientToServerApiCall_1.ClientToServerApiCall({
                    httpClient: this.getHttpClient(), endPointUrl: endpoint_1.EndPoint.USER_GET_ALL_USER_BY_USER_TYPE_AND_ORGANIZATION
                })
                    .addEntity(request)
                    .request();
                return (_a = response_api.getJsonApiDocument().getDataAs()) !== null && _a !== void 0 ? _a : null;
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAllUserByUserTypeAndOrganization.name, "dc2d3435-99a4-4b06-a420-2a9316323bc9", error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.UserClientApi = UserClientApi;
//# sourceMappingURL=UserClientApi.js.map