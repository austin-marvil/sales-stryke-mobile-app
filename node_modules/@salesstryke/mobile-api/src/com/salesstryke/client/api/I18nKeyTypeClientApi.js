"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.I18nKeyTypeClientApi = void 0;
const tslib_1 = require("tslib");
const ApiBase_1 = require("./ApiBase");
const endpoint_1 = require("../../endpoint");
const lang_1 = require("../../lang");
const log_1 = require("../../utils/log");
const NAMESPACE = 'com.salesstryke.client.api.I18nKeyTypeClientApi';
const LOGGER = log_1.LogManager.getLogger(NAMESPACE);
/*

    Make sure this file is added to the correct index.ts

    Add To SalesStrykeClientApi:
        public I18nKeyType : I18nKeyTypeClientApi;


        this.I18nKeyType = new I18nKeyTypeClientApi(this.httpClient);
    

    Copy to EndPoint.ts

        public static I18N_KEY_TYPE__DELETE:     EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/i18n_key_type/delete");
        public static I18N_KEY_TYPE__GET_ALL:    EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/i18n_key_type/getall");
        public static I18N_KEY_TYPE__GET_BY_ID : EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/i18n_key_type/getbyid");
        public static I18N_KEY_TYPE__SAVE:       EndPointUrl = new EndPointUrl(HttpMethodType.POST, "/i18n_key_type/save");

*/
class I18nKeyTypeClientApi extends ApiBase_1.ApiBase {
    constructor(httpClient) {
        super(httpClient);
        this.delete = this.delete.bind(this);
        this.getAll = this.getAll.bind(this);
        this.getById = this.getById.bind(this);
        this.save = this.save.bind(this);
    }
    /**
     * Delete Entity: I18nKeyType
     * @param request
     * @returns
     */
    delete(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.I18N_KEY_TYPE__DELETE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.delete.name, '83776b53-8348-45bb-a935-ae3da87643b0', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    getAll(jsonApiQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.callEndPointUrlAndReturnEntityArray({ endPointUrl: endpoint_1.EndPoint.I18N_KEY_TYPE__GET_ALL, jsonApiQuery: jsonApiQuery }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getAll.name, '026a7380-c336-462c-a7e3-bef6da2c00ae', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Get Entity: I18nKeyType by Id
     * @param request
     * @returns
     */
    getById(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.I18N_KEY_TYPE__GET_BY_ID }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.getById.name, '1cc0d6e3-f80f-4681-8832-cd099f1a3110', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                return (this.addEntityAndCallEndPointUrlAndReturnEntity({ entity: request, endPointUrl: endpoint_1.EndPoint.I18N_KEY_TYPE__SAVE }));
            }
            catch (error_any) {
                let error = error_any;
                let errorBase = new lang_1.ErrorBase(error.message, NAMESPACE, this.save.name, 'a447ba58-f637-4e97-8c3f-d7066cf962f3', error);
                if (LOGGER.isErrorEnabled()) {
                    LOGGER.logErrorBase(errorBase);
                }
                throw (error_any);
            }
        });
    }
}
exports.I18nKeyTypeClientApi = I18nKeyTypeClientApi;
//# sourceMappingURL=I18nKeyTypeClientApi.js.map