import { ApiBase } from "./ApiBase";
import { HttpClient } from "../../utils/httpclient";
import { CnsCampaign } from "../../entity/classes/persistable/CnsCampaign";
import { JsonApiQuery } from "../../jsonApi/JsonApiQuery";
export declare class CnsCampaignClientApi extends ApiBase {
    constructor(httpClient: HttpClient);
    /**
     * Delete Entity: CnsCampaign
     * @param request
     * @returns
     */
    delete(request: CnsCampaign): Promise<CnsCampaign | null>;
    getAll(jsonApiQuery?: JsonApiQuery): Promise<Array<CnsCampaign> | null>;
    /**
     * Get Entity: CnsCampaign by Id
     * @param request
     * @returns
     */
    getById(request: CnsCampaign): Promise<CnsCampaign | null>;
    /**
     * Get Entity: CnsCampaign Statis by Id, date range, and kpi name
     * @param request
     * @returns
     */
    getMetricsByIdDateRangeKpi(request: CnsCampaign): Promise<CnsCampaign | null>;
    /**
     * Get Entity: CnsCampaign by Id
     * @param request
     * @returns
     */
    getEmailTemplateById(request: CnsCampaign): Promise<CnsCampaign | null>;
    /**
     * Save Entity: {clientApiSentitySimpleNameimpleName}
     * @param request
     * @returns
     */
    save(request: CnsCampaign): Promise<CnsCampaign>;
    /**
     * Save Email Campaign
     * @param request CnsCampaign entity configured for email delivery
     * @returns The saved CnsCampaign with updated AWS data
     */
    saveEmailCampaign(request: CnsCampaign): Promise<CnsCampaign>;
}
