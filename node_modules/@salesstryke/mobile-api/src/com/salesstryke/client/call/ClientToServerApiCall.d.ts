import { JsonApiBase } from "../../jsonApi/JsonApiBase";
import { JsonApiDocument } from "../../jsonApi/JsonApiDocument";
import { JsonApiQuery } from "../../jsonApi/JsonApiQuery";
import { EndPointUrl } from "../../http/EndPointUrl";
import { HttpClient } from "../../utils/httpclient/HttpClient";
import { ApiCallBase } from "../api/ApiCallBase";
/**
 * Generally used for quering data that will use JsonApiQuery.
 */
export declare class ClientToServerApiCall extends ApiCallBase {
    private tCall;
    /**
     * ```
     * type TClientToServerApiCallConstructor =
     * {
     *     endPointUrl : EndPointUrl;
     *     httpClient  : HttpClient;
     * }
     * ```
     */
    constructor(p: TClientToServerApiCallConstructor);
    addEntity(jsonApiBase: JsonApiBase): ClientToServerApiCall;
    setJsonApiDocument(jsonApiDocument: JsonApiDocument | undefined): ClientToServerApiCall;
    setJsonApiQuery(jsonApiQuery: JsonApiQuery | undefined): ClientToServerApiCall;
    /**
     *
     * @returns
     */
    request(): Promise<Response>;
}
export declare class Response {
    private tCall;
    constructor(p: TClientToServerApiCall | null);
    getHttpStatus(): string;
    getDataAsItem<T>(p: {
        setInitialAttributesState: boolean;
    }): T | null;
    getDataAs<T>(): Array<T> | null;
    getJsonApiDocument(): JsonApiDocument;
}
export type TClientToServerApiCall = {
    entities?: Array<JsonApiBase>;
    jsonApiQuery?: JsonApiQuery;
    jsonApiDocument?: JsonApiDocument;
};
export type TClientToServerApiCallConstructor = {
    endPointUrl: EndPointUrl;
    httpClient: HttpClient;
};
