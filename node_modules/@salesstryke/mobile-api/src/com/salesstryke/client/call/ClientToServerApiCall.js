"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = exports.ClientToServerApiCall = void 0;
const tslib_1 = require("tslib");
const JsonApiDocument_1 = require("../../jsonApi/JsonApiDocument");
const LogManager_1 = require("../../utils/log/LogManager");
const ApiCallBase_1 = require("../api/ApiCallBase");
const NAMESPACE = "com.salesstryke.server.api.call.ClientToServerApiCall";
const LOGGER = LogManager_1.LogManager.getLogger(NAMESPACE);
/**
 * Generally used for quering data that will use JsonApiQuery.
 */
class ClientToServerApiCall extends ApiCallBase_1.ApiCallBase {
    /**
     * ```
     * type TClientToServerApiCallConstructor =
     * {
     *     endPointUrl : EndPointUrl;
     *     httpClient  : HttpClient;
     * }
     * ```
     */
    constructor(p) {
        super(p.httpClient, p.endPointUrl.getMethodType(), p.endPointUrl.getUrlPath());
        this.tCall = {};
    }
    addEntity(jsonApiBase) {
        if (!this.tCall.entities) {
            this.tCall.entities = new Array();
        }
        this.tCall.entities.push(jsonApiBase);
        return (this);
    }
    setJsonApiDocument(jsonApiDocument) {
        if (jsonApiDocument) {
            this.tCall.jsonApiDocument = jsonApiDocument;
        }
        return (this);
    }
    setJsonApiQuery(jsonApiQuery) {
        if (jsonApiQuery) {
            this.tCall.jsonApiQuery = jsonApiQuery;
        }
        return (this);
    }
    /**
     *
     * @returns
     */
    request() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let jsonApiDocument = new JsonApiDocument_1.JsonApiDocument();
                let tCall;
                if (this.tCall.jsonApiDocument) {
                    jsonApiDocument = this.tCall.jsonApiDocument;
                }
                if (this.tCall.entities) {
                    let index_i = 0;
                    let size_i = this.tCall.entities.length;
                    for (index_i = 0; index_i < size_i; index_i++) {
                        let jsonApiBase = this.tCall.entities[index_i];
                        jsonApiDocument.addData(jsonApiBase);
                    }
                }
                if (this.tCall.jsonApiQuery) {
                    jsonApiDocument.setQuery(this.tCall.jsonApiQuery);
                }
                let temp_s = this.getPath();
                if (temp_s.includes('/import_data')) {
                    // temp_s = temp_s;
                }
                this.getHttpClient()
                    .call(this.getHttpMethodType(), this.getPath(), jsonApiDocument)
                    .then((response_jad) => {
                    this.setJsonApiDocument(response_jad);
                    tCall = {
                        jsonApiDocument: response_jad
                    };
                    let response = new Response(tCall);
                    resolve(response);
                })
                    .catch(function (error_any) {
                    reject(error_any);
                });
            });
        });
    }
}
exports.ClientToServerApiCall = ClientToServerApiCall;
class Response {
    constructor(p) {
        this.tCall = p;
    }
    //public getDataAs<T>():
    getHttpStatus() {
        return ('');
    }
    getDataAsItem(p) {
        let t = null;
        let dataAsItem = null;
        if (this.tCall && this.tCall.jsonApiDocument) {
            let jsonApiDocument = this.tCall.jsonApiDocument;
            dataAsItem = jsonApiDocument.getDataAsItem();
        }
        if (p && p.setInitialAttributesState) {
            dataAsItem._setInitialAttributesState();
        }
        return (dataAsItem);
    }
    getDataAs() {
        let t_array = null;
        if (this.tCall && this.tCall.jsonApiDocument) {
            t_array = this.tCall.jsonApiDocument.getDataAs();
            let index = 0;
            for (index = 0; index < t_array.length; index++) {
                let t_item = t_array[index];
                if (t_item) {
                    let japb = t_item;
                    japb._setInitialAttributesState();
                }
            }
        }
        return (t_array);
    }
    getJsonApiDocument() {
        let jsonApiDocument = new JsonApiDocument_1.JsonApiDocument();
        if (this.tCall && this.tCall.jsonApiDocument) {
            jsonApiDocument = this.tCall.jsonApiDocument;
        }
        else {
            jsonApiDocument = new JsonApiDocument_1.JsonApiDocument();
        }
        return (jsonApiDocument);
    }
}
exports.Response = Response;
//# sourceMappingURL=ClientToServerApiCall.js.map