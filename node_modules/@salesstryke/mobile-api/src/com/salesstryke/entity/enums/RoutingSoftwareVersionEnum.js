"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutingSoftwareVersionEnum = void 0;
const EnumPersistableBase_1 = require("../../lang/EnumPersistableBase");
const RoutingSoftwareVersion_1 = require("../classes/persistable/RoutingSoftwareVersion");
const RoutingSoftwareTypeEnum_1 = require("./RoutingSoftwareTypeEnum");
const NAMESPACE = 'com.salesstryke.entity.enums.RoutingSoftwareVersionEnum';
class RoutingSoftwareVersionEnum extends EnumPersistableBase_1.EnumPersistableBase {
    constructor(p) {
        super({
            name: p.version, namespace: NAMESPACE, databaseOID: p.databaseOID
        });
        this.routingSoftwareVersion = new RoutingSoftwareVersion_1.RoutingSoftwareVersion()
            .setId(p.databaseOID)
            .setVersion(p.version)
            .setRoutingSoftwareType(p.routingSoftwareType);
        this.routingSoftwareVersion._setIsUserSetId(true);
    }
    getRoutingSoftwareVersionID() {
        return this.routingSoftwareVersion.getId();
    }
    getRoutingSoftwareVersion() {
        return this.routingSoftwareVersion;
    }
    getRoutingSoftwareVersionsByType(routingSoftwareTypeEnum) {
        return this.getAll().map((routingSoftwareVersionEnum) => {
            var _a;
            const routingSoftwareVersion = routingSoftwareVersionEnum.getRoutingSoftwareVersion();
            if (((_a = routingSoftwareVersion.getRoutingSoftwareType()) === null || _a === void 0 ? void 0 : _a.getId()) === routingSoftwareTypeEnum.getRoutingSoftwareTypeID()) {
                return routingSoftwareVersion;
            }
            return undefined;
        }).filter(Boolean); // filter out falsy value
    }
    getByDatabaseOID(p) {
        let RoutingSoftwareVersionEnum = null;
        return (RoutingSoftwareVersionEnum);
    }
}
exports.RoutingSoftwareVersionEnum = RoutingSoftwareVersionEnum;
RoutingSoftwareVersionEnum.SOFTPAK_V_D = new RoutingSoftwareVersionEnum({ version: 'SOFTPAK_V_D', routingSoftwareType: RoutingSoftwareTypeEnum_1.RoutingSoftwareTypeEnum.SOFTPAK.getRoutingSoftwareType(), databaseOID: '666c98a14f223d92c3d80178' });
// only one version of HAULER_HERO
RoutingSoftwareVersionEnum.HAULER_HERO = new RoutingSoftwareVersionEnum({ version: 'HHAULER_HERO', routingSoftwareType: RoutingSoftwareTypeEnum_1.RoutingSoftwareTypeEnum.HAULER_HERO.getRoutingSoftwareType(), databaseOID: '666c98b2639a9b641b040044' });
//# sourceMappingURL=RoutingSoftwareVersionEnum.js.map