"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductServiceViewStatusAuditEntityModel = void 0;
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const TypeReference_1 = require("../../../data/entity/TypeReference");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const NamespaceUtils_1 = require("../../../utils/NamespaceUtils");
const Organization_1 = require("../../classes/persistable/Organization");
const zod_1 = require("zod");
const ENTITY_CLASS_NAMESPACE = "com.salesstryke.entity.classes.persistable.ProductServiceViewStatusAudit";
class ProductServiceViewStatusAuditEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        const entityModel = this.getEntityModel();
        const simpleName_s = NamespaceUtils_1.NamespaceUtils.namespaceToSimpleName(ENTITY_CLASS_NAMESPACE);
        entityModel
            .setCrudCreateAuthorizationUUID('9b3a62e1-eeec-4d7d-9ac4-1381a26b0e0b')
            .setDataModelName(simpleName_s)
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('346e7b4a-125b-46e9-a8b3-8034e2bf03f1');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('bd238f00-745c-492e-a24e-b454d518e0dc'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('00b6836f-66aa-4207-b4e9-7fe85487a797'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('2982dda3-6fcf-4f4d-a20d-876269258423'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('00bdfa32-ae43-42bb-b817-f267e65dda96'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('be150518-4423-4aff-9b45-9ecb30dd005c'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('dcb60b4c-47eb-49fd-9477-aa7b6630c93b'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('3d7ff8e6-5a4e-4908-85ef-25531315fe90'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, 'ac9299c3-ff53-40a3-8ed6-e212c601a617'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('b7a27274-d421-460d-907b-6e1f51e00075'));
        // widgetCustomerUUID
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'widgetCustomerUUID',
            attributeUUID: '243b927b-6ebd-42df-86c7-28f7f8b7dc06',
            comment: 'The UUID of the customer in the widget system.',
            isMongoIndexed: true,
            validator: zod_1.z.string().min(1, "Customer UUID cannot be empty")
                .max(64, "Customer UUID is too long")
        }));
        // status
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'status',
            attributeUUID: 'c350207b-dff2-47c7-8d97-55fb3a2b3adf',
            comment: 'The status of the post-service view.',
            validator: zod_1.z.string().min(1, "Status cannot be empty")
                .max(100, "Status is too long")
        }));
        // cartId
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'cartId',
            attributeUUID: '96f726ad-7ede-486b-b559-29abc00e823d',
            comment: 'The ID of the cart associated with this post-service view.',
            isMongoIndexed: true,
            isMongoRequired: false,
            validator: zod_1.z.string().min(1, "Cart ID cannot be empty")
                .max(64, "Cart ID is too long")
        }));
        // dataJSONStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableJsonString2({
            attributeName: 'dataJSONStr',
            attributeUUID: 'cc0eede3-8015-4ef3-8884-024574fb2f78',
            comment: 'JSON string containing the post-service view data.',
            isMongoRequired: false,
            variableType: new TypeReference_1.TypeReference({
                typeName: 'Object'
            })
        }));
        // customerFirstName
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'customerFirstName',
            attributeUUID: '68a9bec7-7a19-4e75-b7c9-e8ac5dfb8e01',
            comment: 'The first name of the customer.',
            validator: zod_1.z.string().min(1, "First name cannot be empty")
                .max(100, "First name is too long")
        }));
        // customerLastName
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'customerLastName',
            attributeUUID: '95c78de3-fab4-47b1-b6cd-8a3e4587d9c2',
            comment: 'The last name of the customer.',
            validator: zod_1.z.string().min(1, "Last name cannot be empty")
                .max(100, "Last name is too long")
        }));
        // customerAddress
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'customerAddress',
            attributeUUID: 'bd12f354-e6bc-4d91-80af-73c9d2f86e5a',
            comment: 'The address of the customer.',
            validator: zod_1.z.string().min(1, "Address cannot be empty")
                .max(500, "Address is too long")
        }));
        /**
         * organization oid
         * The Tenant Organization this workspace belongs to.
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: "organization",
            foreignRefEntityNamespace: Organization_1.Organization.metaDataForOrganization.namespace,
            attributeUUID: 'cd4c1025-1687-4088-bd76-15be0baa06f0',
            comment: "The tenant Organization.",
            isMongoRequired: true,
        }));
        // removeFromRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRemoveFromRelationship('9c36c892-1002-4b5a-9e67-82e612ae718f'));
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({
            uuid: 'f8e7d413-a294-4c7b-9570-df01e6b82a4c',
        }));
    }
    static getInstance() {
        return (ProductServiceViewStatusAuditEntityModel.INSTANCE);
    }
}
exports.ProductServiceViewStatusAuditEntityModel = ProductServiceViewStatusAuditEntityModel;
ProductServiceViewStatusAuditEntityModel.INSTANCE = new ProductServiceViewStatusAuditEntityModel();
//# sourceMappingURL=ProductServiceViewStatusAuditEntityModel.js.map