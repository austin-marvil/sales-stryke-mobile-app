"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductEntityModel = void 0;
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const NamespaceUtils_1 = require("../../../utils/NamespaceUtils");
const Organization_1 = require("../../classes/persistable/Organization");
const persistable_1 = require("../../classes/persistable");
const zod_1 = require("zod");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.Product';
class ProductEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        let simpleName_s = NamespaceUtils_1.NamespaceUtils.namespaceToSimpleName(ENTITY_CLASS_NAMESPACE);
        entityModel
            .setCrudCreateAuthorizationUUID('133d3cfc-7c2f-45cd-9303-a5a43e4ea758')
            .setDataModelName(simpleName_s)
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('e77f0644-0aad-4b18-9154-6281ffcaa726');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('3bbb9dc6-dcc0-49f8-9400-40509467dcc2'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('e32b7359-f59c-4d85-aa2c-72b930f07bbd'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('a06a1b8f-f747-4762-a768-d31c5c19c5ce'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('d97d58c5-5d6f-4f83-a684-074304311ad3'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('3c729d39-6e1a-42e3-879b-2e265fd560a8'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('7ddd47eb-9cee-4571-b6de-44b1e73d2840'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('2d4a7c72-f190-436a-a095-856860a01a8b'));
        // isActive
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isActive',
            attributeUUID: 'a1c81b3a-37b6-40e6-a44b-2267bf3c9df0',
            comment: 'Identifies if the product is active.',
            isMongoRequired: false
        }));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, 'fb035eb1-7631-475d-95f3-b4a87ad3560b'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('68854140-12d4-4d5e-86d9-ae79edc5df57'));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: '44eb5aec-9963-42de-9e48-fa4e556c34fb',
            comment: 'The name of product.',
            validator: zod_1.z.string(),
        }));
        // productPricing
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoVirtualArray('productPricings', 'productPricing', persistable_1.ProductPricing.metaDataForProductPricing.namespace, persistable_1.ProductPricing.metaDataForProductPricing.mongoAttributes.product, 'c06c4df9-1fed-438d-9660-4d209afd533d', // uuid
        'The product pricing for the product.', 1));
        // productColor
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoVirtualArray('productColors', 'productColor', persistable_1.ProductColor.metaDataForProductColor.namespace, persistable_1.ProductColor.metaDataForProductColor.mongoAttributes.product, '2b79cc28-7ea9-406b-8900-a14b9cf7056e', 'The product color for the product.', 1));
        // productImage
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoVirtualArray('productImages', 'productImage', persistable_1.ProductImage.metaDataForProductImage.namespace, persistable_1.ProductImage.metaDataForProductImage.mongoAttributes.product, 'd1ef2a39-8e1a-4b66-b15d-3f945c7d21f2', 'The product image for the product.', 1));
        // productCategory
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoVirtualArray('productCategories', 'productCategory', persistable_1.ProductCategoryProduct.metaDataForProductCategoryProduct.namespace, persistable_1.ProductCategoryProduct.metaDataForProductCategoryProduct.mongoAttributes.product, '13929bc9-16b8-4454-947e-16db9a0cdb1e', 'The product category for the product.', 1));
        // removeFromRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRemoveFromRelationship('1dfb31b2-8a1c-4a4f-95c0-ba19d36a04f3'));
        /**
         * organization oid
         * The Tenant Organization this workspace belongs to.
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            foreignRefEntityNamespace: Organization_1.Organization.metaDataForOrganization.namespace,
            attributeUUID: 'f93cf267-dbd1-421a-b310-b7114c4bd1bd',
            comment: 'The tenant Organization.'
        }));
        // attribute that are added base on new entity model
        // activeStartDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'activeStartDate',
            attributeUUID: '5db5e376-e4d0-41ba-99fa-4a3729d1a55e',
            comment: 'Active start date.',
            isMongoRequired: false,
            // isMongoRequired : true // by default
        }));
        // activeEndDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'activeEndDate',
            attributeUUID: 'aded76c2-d62b-40fc-94c6-7f749a71f974',
            comment: 'Active end date.',
            isMongoRequired: false,
            // validator       : z.string().date(''),
        }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: '4396de8f-ac7a-468a-a958-cc65372942c7',
            comment: 'The description of product.',
            validator: zod_1.z.string().max(5000, 'Description is too long'),
            isMongoRequired: false,
        }));
        // label
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'label',
            attributeUUID: 'db9e96ae-ccec-4c7b-b52d-711c423a8cb4',
            comment: 'The label of product.',
            validator: zod_1.z.string().min(1, "Label cannot be empty")
                .max(30, "Label is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Label cannot contain special character"),
            isMongoRequired: false,
        }));
        // kmlType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'kmlType',
            attributeUUID: '5dd63080-75e3-45e8-af32-cc971f6163db',
            comment: 'The Kml type for the product.',
            foreignRefEntityNamespace: persistable_1.KmlType.metaDataForKmlType.namespace,
            // TODO ASSOCIATE WITH KMLLayerType, change both to true
            isMongoIndexed: false,
            isMongoRequired: false
        }));
        // productCategoryId
        // this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableMongoRef2({
        //     attributeName             : 'productCategoryId',
        //     attributeUUID             : '01c31b40-6c02-4c74-acea-09d103db46a7',
        //     comment                   : 'The product category id.',
        //     foreignRefEntityNamespace : ProductCategory.metaDataForProductCategory.namespace,
        // }));
        // // productKmlLocation
        // this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableMongoVirtualArray(
        //     'kmlGeometries',
        //     'kmlGeometry',
        //     KmlGeometry.metaDataForKmlGeometry.namespace,
        //     KmlGeometry.metaDataForKmlGeometry.mongoAttributes.kml,
        //     '0ae284b3-bbf1-417d-97ff-4159e17f78ed',
        //     'The product kml location',
        //     1
        //     )
        // );
        //agreementDocument
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'agreementDocument',
            attributeUUID: 'b87120fe-77a0-42d1-bbeb-7ed9536d6c49',
            comment: 'The agreement document.',
            foreignRefEntityNamespace: persistable_1.AgreementDocument.metaDataForAgreementDocument.namespace,
            isMongoRequired: true,
        }));
        // workspace
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'workspace',
            attributeUUID: '59b2f649-afdd-4080-9bb8-c4ce35740fb6',
            comment: 'The product workspace id.',
            foreignRefEntityNamespace: persistable_1.Workspace.metaDataForWorkspace.namespace,
            isMongoRequired: false,
        }));
        // uiDescription
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'uiDescription',
            attributeUUID: '4396de8f-ac7a-468a-a958-cc65372942c7',
            comment: 'The description of product for the UI.',
            validator: zod_1.z.string().max(5000, 'Description is too long'),
            isMongoRequired: false,
        }));
        // uiName
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'uiName',
            attributeUUID: '4396de8f-ac7a-468a-a958-cc65372942c7',
            comment: 'The name of product for the UI.',
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Name cannot contain special characters"),
            isMongoRequired: false,
        }));
    }
    static getInstance() {
        return (ProductEntityModel.INSTANCE);
    }
}
exports.ProductEntityModel = ProductEntityModel;
ProductEntityModel.INSTANCE = new ProductEntityModel();
//# sourceMappingURL=ProductEntityModel.js.map