"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportDataMapEntityModel = void 0;
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const ImportDataMapAttribute_1 = require("../../classes/persistable/ImportDataMapAttribute");
const ImportDataMapType_1 = require("../../classes/persistable/ImportDataMapType");
const Organization_1 = require("../../classes/persistable/Organization");
const zod_1 = require("zod");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.ImportDataMap';
class ImportDataMapEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('92c54c10-141d-414a-a115-a8d2007db56e')
            .setDataModelName('ImportDataMap')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('4783a958-af73-4f00-aa56-15a6c2d4c2fb');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('94bf5c6d-a69c-49ee-8ec1-35c25ffb2158'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('44ed9d63-53c5-46a7-9fde-c020440cc27e'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('226bf0bf-978d-487e-bb94-a49b7b630e33'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('88d70b09-c43a-464d-bf43-518e9597f79f'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('98e05a3d-c0f4-4d9a-b21c-e64ecc23dda8'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('dcb4697f-b769-4137-b246-d57a1206f037'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, '8c800c11-c020-48d3-826b-5c60113c9a2a'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('b768cfc0-45ea-44e6-99d9-5efc1836fe0c'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('2a506ac5-59c6-48c8-af95-76ecf6ad0654'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: '4e0aa08f-d6c1-4aea-89a3-53efc68bcfa9' }));
        // boolean
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'allowImportDataToBeUpdated',
            attributeUUID: '7282a984-0a8a-4a99-bc61-91c9fa6a0282',
            comment: 'Identifies if this is a single importData from a file or if it can be updated with a new data from a new file.',
            isMongoIndexed: false
        }));
        // dataMapToken
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'dataMapToken',
            attributeUUID: '79bef91b-6bf4-467d-907a-2cf5e301a6d1',
            comment: 'The description of the datamap.',
            isMongoIndexed: true
        }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: '3aa15883-a533-4102-b37d-d379df3f899b',
            comment: 'The description of the datamap.',
            isMongoIndexed: false,
            validator: zod_1.z.string().max(1000, 'Max length is 1000')
        }));
        /**
         * ImportDataMapAttributes.
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRefArray({
            attributeName: 'importDataMapAttributes', // "salesReportConfigParamValues",
            attributeNameSingular: 'importDataMapAttribute', // "salesReportConfigParamValue",
            attributeUUID: 'e93745f5-6848-424b-82b7-9f5745d9c10a',
            comment: "MongoRefArray of ImportDataMapAttributes. Use .addImportDataMapAttribute(importDataMap, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeImportDataMapAttribute(importDataMap, PersistenceType.DETACH); to remove a MongoRefArray item.",
            foreignRefEntityNamespace: ImportDataMapAttribute_1.ImportDataMapAttribute.metaDataForImportDataMapAttribute.namespace //SalesReportConfigParamValue.metaDataForSalesReportConfigParamValue.namespace   
        }));
        /**
         * ImportDataMapType
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'importDataMapType',
            attributeUUID: '9523a7c5-be5c-4b3a-87f1-c6f7940acc80',
            comment: 'Link to Data Map Type',
            foreignRefEntityNamespace: ImportDataMapType_1.ImportDataMapType.metaDataForImportDataMapType.namespace,
            isMongoRequired: false,
            validator: undefined //new Validator().addValidation({ validation : new IsRequired() })
        }));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: '9509307a-c180-4d8f-967c-bd4908a6b7da',
            comment: 'The name of the data map.',
            isMongoIndexed: true,
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(/^[a-zA-Z\s]+$/, "Name must only contain alphabets and spaces")
        }));
        /**
         * Organization
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            attributeUUID: 'b776b550-d8ee-4c79-9d21-a39a7bc65ee9',
            comment: 'The organization.',
            foreignRefEntityNamespace: Organization_1.Organization.metaDataForOrganization.namespace,
            isMongoIndexed: true,
            isMongoRequired: true,
            validator: zod_1.z.string()
        }));
    }
    static getInstance() {
        return (ImportDataMapEntityModel.INSTANCE);
    }
}
exports.ImportDataMapEntityModel = ImportDataMapEntityModel;
ImportDataMapEntityModel.INSTANCE = new ImportDataMapEntityModel();
//# sourceMappingURL=ImportDataMapEntityModel.js.map