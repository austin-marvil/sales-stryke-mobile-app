"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarItemEntityModel = void 0;
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const Organization_1 = require("../../classes/persistable/Organization");
const TypeReference_1 = require("../../../data/entity/TypeReference");
const Workspace_1 = require("../../classes/persistable/Workspace");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.CalendarItem';
class CalendarItemEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('5f123031-1aed-4ec9-812c-09f52ecd965c')
            .setDataModelName('CalendarItem')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('91349efb-8062-4945-be6c-0378a10046c6');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('38c18a55-69e9-4daa-8390-3f7784b4684d'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('a5a2367f-655b-4325-b14c-60090315ba34'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('277fe1e5-5404-4978-863d-b4d1e7596c2e'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('74e2e695-a3a6-43a5-83f8-6778045803e5'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('3a2e4d69-a7cb-4ab5-98e3-982d8e25469b'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('41f093ce-e57c-470e-bc12-0ad1b72273bd'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, '564f455e-cd8b-47eb-a023-4ebc9076658d'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('3549fd42-5f2b-4ca8-868e-c3b38e00789e'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('aa92b52e-d724-4431-b54c-d19bc3af4a19'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: 'relationshipPersistableTypeUUID' }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: 'd39dc258-0548-4a7e-b993-febe0043e5ed', // uuid
            comment: 'The description.',
            isMongoRequired: false,
        }));
        // isActive
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isActive',
            attributeUUID: 'd5640005-7d2b-4357-9c14-fa4d47a4e0cd',
            comment: 'Identifies if active.',
            isMongoRequired: false
        }));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: '7e244809-6c49-4679-94e8-8bda9448c0bf', // uuid
            comment: 'The data name'
        }));
        // resourceId
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'resourceId',
            attributeUUID: 'a223938e-c2ef-4900-a213-0c1be6a4d86a', // uuid
            comment: 'The resource id (kmlLayer.id, KmlGeometry.id, etc.)',
        }));
        /**
         * organization
         * The Tenant Organization this calendar belongs to.
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            foreignRefEntityNamespace: Organization_1.Organization.metaDataForOrganization.namespace,
            attributeUUID: 'f7ff5fed-bca7-4288-9857-07f8b9c895d9',
            comment: 'Entity Organization.'
        }));
        /**
         * workspace
         * The Workspace this calendar belongs to.
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'workspace',
            foreignRefEntityNamespace: Workspace_1.Workspace.metaDataForWorkspace.namespace,
            attributeUUID: 'd3727875-9219-407a-8747-91e0104393ae',
            comment: 'Entity Workspace.'
        }));
        // eventStartDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'eventStartDate',
            attributeUUID: 'b1c6f0e4-3c4d-4f5a-8f0e-2b2b2e2e2e2e',
            comment: 'Event start date of the event in YYYY-MM-DD format.',
            isMongoRequired: false,
            // validator       : z.string().date(''),
        }));
        // eventStartTime
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'eventStartTime',
            attributeUUID: 'c8e2f3b1-2d1e-4f0a-8f1e-3c3b3e3e3e3e', // uuid
            comment: 'The event start time in HH:mm format.',
            isMongoRequired: false
        }));
        // eventEndDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'eventEndDate',
            attributeUUID: '45bd4f69-d572-417f-9b1a-e67acf2b6adc',
            comment: 'Event end date of the event in YYYY-MM-DD format.',
            isMongoRequired: false,
            // validator       : z.string().date(''),
        }));
        // eventEndTime
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'eventEndTime',
            attributeUUID: 'e1f3c4b2-3d2f-4a1b-9f2e-4d4c4f4f4f4f', // uuid
            comment: 'The event end time in HH:mm format.',
            isMongoRequired: false
        }));
        // originalEventStartDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'originalEventStartDate',
            attributeUUID: 'af3add4d-2262-46f5-8ea1-651a010aaed4',
            comment: 'For an instance of a recurring event. The original event start date',
            isMongoRequired: false,
            // validator       : z.string().date(''),
        }));
        // allDay
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'allDay',
            attributeUUID: '38e51265-9117-4453-9121-a5db0ccc8093',
            comment: 'Identify if event is all day.',
            isMongoRequired: false
        }));
        // backgroundColor
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'backgroundColor',
            attributeUUID: 'd4f64d65-abd1-40c1-b9a0-6deaee1dbb21', // uuid
            comment: 'The background color',
            isMongoRequired: false
        }));
        // borderColor
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'borderColor',
            attributeUUID: '742c3db2-eb8d-4a27-b088-55deb9a7488d', // uuid
            comment: 'The border color',
            isMongoRequired: false
        }));
        // excludeDates
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableJsonString2({
            attributeName: 'excludeDates',
            attributeUUID: 'b1e8f3c3-4f3a-4e2e-8f3b-1c1e1e1e1e1e',
            comment: 'An json data that contains an array of dates to exclude from the recurrence.',
            isMongoRequired: false,
            variableType: new TypeReference_1.TypeReference({
                typeName: 'Object'
            })
        }));
        // recurringEventId
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'recurringEventId',
            attributeUUID: 'edcc9972-c813-4be9-aa53-de69ab4f951f',
            comment: 'The recurring event Id it belong to or branch off from when created',
            isMongoRequired: false,
        }));
        // frequency
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'frequency',
            attributeUUID: '1ecdcfd4-d0a5-490d-90eb-bc4275d62d6a',
            comment: 'The frequency of the recurrence (e.g., daily, weekly, monthly).',
            isMongoRequired: false,
        }));
        // interval
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'interval',
            attributeUUID: '398dd9d7-c9ba-40ec-929c-61eb6ffe6d09',
            comment: 'The interval of the recurrence (e.g., every 2 weeks).',
            isMongoRequired: false,
        }));
        // nth
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'nth',
            attributeUUID: '374d7067-ad4d-46b3-8e71-f4ac6594602e',
            comment: 'The nth occurrence within the frequency (e.g., 2nd Monday of the month). Monthly frequency only.',
            isMongoRequired: false,
        }));
        // recurringStartDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'recurringStartDate',
            attributeUUID: '98bf417e-3ac5-4083-8572-436a7cef7e99',
            comment: 'The start date of the recurrence pattern.',
            isMongoRequired: false,
        }));
        // recurringEndDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'recurringEndDate',
            attributeUUID: 'e327301d-fd0e-4b80-90a0-5f3a8cf96365',
            comment: 'The end date of the recurrence pattern.',
            isMongoRequired: false,
        }));
    }
    static getInstance() {
        return (CalendarItemEntityModel.INSTANCE);
    }
}
exports.CalendarItemEntityModel = CalendarItemEntityModel;
CalendarItemEntityModel.INSTANCE = new CalendarItemEntityModel();
//# sourceMappingURL=CalendarItemEntityModel.js.map