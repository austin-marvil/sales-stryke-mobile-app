"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductPricingRecurringPeriodTypeEntityModel = void 0;
const zod_1 = require("zod");
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const persistable_1 = require("../../classes/persistable");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.ProductPricingRecurringPeriodType';
class ProductPricingRecurringPeriodTypeEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('31b678af-3d24-4bba-a138-4a66c2cc3ded')
            .setDataModelName('ProductPricingRecurringPeriodType')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('3e094b17-d007-425a-813f-7123519032ca');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('dabc5a26-bfbb-412c-b287-61325e14d870'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('b59cb175-1075-4cf3-9f63-16ca1ad0fab4'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('a72f5b59-fc7b-4557-bdc5-b167c183a51f'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('e310747e-6782-4cb8-8a7b-32a2ea6d9556'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('fadff9f2-c31e-4504-9bcb-f588656cb8a4'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('a69d6e18-10f5-4fc6-86d8-e260f2e440aa'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, '0ce3b803-8e5c-4186-a5fb-5a2cbe0a72ee'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('6ac09f58-e0d5-4180-88c5-2aaa3c366572'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('2291d34a-b99f-4144-984a-336796272a62'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: 'relationshipPersistableTypeUUID' }));
        // isCustomerForOrganization
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isCustomerForOrganization',
            attributeUUID: 'dba3a82d-26f5-4a6e-8069-743d616df20e',
            comment: 'Is customer for organization.'
        }));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: 'c40d3f5b-306f-44e0-ba02-1debe801cc00',
            comment: 'The name of product pricing recurring period type.',
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Name cannot contain special characters")
        }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: '41eae110-0e6f-4c36-8ca4-e079dd1042e2',
            comment: 'The description.',
            validator: zod_1.z.string().max(1000, 'Description is to long'),
        }));
        /**
         * Organization
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            attributeUUID: '5d2dd78f-ae7e-4b9b-bf54-4cd660147123',
            comment: 'The organization.',
            foreignRefEntityNamespace: persistable_1.Organization.metaDataForOrganization.namespace,
            isMongoIndexed: true,
            isMongoRequired: true
        }));
        /*
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableMongoRefArray(
            {
                attributeName              : "salesReportConfigParamValues",
                attributeNameSingular      : "salesReportConfigParamValue",
                attributeUUID              : 'f91f053f-9f2c-4910-9a47-a5266b6112f8',
                comment                    : "The SalesReportConfigParamValue.",
                foreignRefEntityNamespace  : SalesReportConfigParamValue.metaDataForSalesReportConfigParamValue.namespace
            }
       ));
       */
    }
    static getInstance() {
        return (ProductPricingRecurringPeriodTypeEntityModel.INSTANCE);
    }
}
exports.ProductPricingRecurringPeriodTypeEntityModel = ProductPricingRecurringPeriodTypeEntityModel;
ProductPricingRecurringPeriodTypeEntityModel.INSTANCE = new ProductPricingRecurringPeriodTypeEntityModel();
//# sourceMappingURL=ProductPricingRecurringPeriodTypeEntityModel.js.map