"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCategoryProductEntityModel = void 0;
const zod_1 = require("zod");
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const persistable_1 = require("../../classes/persistable");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.ProductCategoryProduct';
class ProductCategoryProductEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('a80d750f-05b9-4a26-a2ec-a06c49592f3c')
            .setDataModelName('ProductCategoryProduct')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('d47b1c54-453d-4a0f-929e-1744f1e25f03');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('3bc8d8f1-44d6-42d4-98aa-12fc141f2547'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('5af954fc-b839-405b-a0fe-bc4f7f7b298d'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('6111ab0f-5240-42af-a14e-f7b165de7a62'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('075df04f-ae8b-4408-b929-2ee74ced8a74'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('c6737bfd-be05-4fa9-8574-ccd3afc58c02'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('0c169713-f4e4-440a-938b-5bc240eb4548'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, '25182133-a2fd-4643-a5e8-1d93dbbbc546'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('d0e9d5b7-0664-4787-85aa-c26729ea5278'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('42b6a347-9e72-43c4-8b0c-1d36f0b1f15c'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: 'relationshipPersistableTypeUUID' }));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: '49a020a7-cb6b-4216-9b30-ad8a91139af4',
            comment: 'The name.',
            isMongoRequired: false,
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Name cannot contain special characters"),
        }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: '3e164ff4-147d-40e1-91d0-5b0e9fd34bc8',
            comment: 'The description.',
            isMongoRequired: false,
            validator: zod_1.z.string().max(1000, 'Description is to long'),
        }));
        // isActive
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isActive',
            attributeUUID: '876af30e-7f73-4cbe-aefd-0374fa9f63b2',
            comment: 'Identifies if the product category product is active.'
        }));
        // activeStartDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'activeStartDate',
            attributeUUID: '9a8e5ae8-baf2-4566-a35c-b049cf13c7f0',
            comment: 'Active start date.',
            isMongoRequired: false,
        }));
        // activeEndDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'activeEndDate',
            attributeUUID: '36df4f7c-fe03-447f-a4f7-762032fc9855',
            comment: 'Active end date.',
            isMongoRequired: false,
        }));
        // productCategory
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'productCategory',
            attributeUUID: 'ae34fd70-8642-4963-a9e4-a8687f500580',
            comment: 'The product category.',
            foreignRefEntityNamespace: persistable_1.ProductCategory.metaDataForProductCategory.namespace,
        }));
        // product
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'product',
            attributeUUID: 'd3c99027-3a1c-4a99-a9f9-3c8a98682c4e',
            comment: 'The product.',
            foreignRefEntityNamespace: persistable_1.Product.metaDataForProduct.namespace,
        }));
        /**
         * Organization
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            attributeUUID: '076c4224-4eed-499d-8ce5-bc0501317398',
            comment: 'The organization.',
            foreignRefEntityNamespace: persistable_1.Organization.metaDataForOrganization.namespace,
            isMongoIndexed: true,
            isMongoRequired: true
        }));
        /**
         * Workspace
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'workspace',
            attributeUUID: 'e54a7c2d-9f68-4b92-a31e-7d5bc8dcf4a3',
            comment: 'The workspace.',
            foreignRefEntityNamespace: persistable_1.Workspace.metaDataForWorkspace.namespace,
        }));
        /*
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableMongoRefArray(
            {
                attributeName              : "salesReportConfigParamValues",
                attributeNameSingular      : "salesReportConfigParamValue",
                attributeUUID              : 'f6304e41-b811-4b95-a2e0-fcc940a1344f',
                comment                    : "The SalesReportConfigParamValue.",
                foreignRefEntityNamespace  : SalesReportConfigParamValue.metaDataForSalesReportConfigParamValue.namespace
            }
       ));
       */
    }
    static getInstance() {
        return (ProductCategoryProductEntityModel.INSTANCE);
    }
}
exports.ProductCategoryProductEntityModel = ProductCategoryProductEntityModel;
ProductCategoryProductEntityModel.INSTANCE = new ProductCategoryProductEntityModel();
//# sourceMappingURL=ProductCategoryProductEntityModel.js.map