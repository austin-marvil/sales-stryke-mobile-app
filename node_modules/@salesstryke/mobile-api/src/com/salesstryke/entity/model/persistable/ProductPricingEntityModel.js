"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductPricingEntityModel = void 0;
const zod_1 = require("zod");
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const persistable_1 = require("../../classes/persistable");
const ProductPricingRecurringPeriodType_1 = require("../../classes/persistable/ProductPricingRecurringPeriodType");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.ProductPricing';
class ProductPricingEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('445335f2-9650-42f2-b9de-e1e5eeb9e323')
            .setDataModelName('ProductPricing')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('1143eb02-2c7d-4eed-a7c9-daa347b2baea');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('d3ab86a1-f16f-46af-a158-ff82fd93c94d'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('d917c599-9199-458a-8b5f-11889f70cd90'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('0453a5ea-7cc6-4791-a9f7-cf27bf873ef3'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('fa9f87ca-d68f-4a7a-864c-ff996ca207ce'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('18239d60-d712-4e78-b561-ff20dfc9ffd9'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('58fd4b0d-eb09-47b6-a470-cd398a137189'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, 'bf93ae09-c2d9-4ada-9976-cc0021ac1a0c'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('25130f83-057d-4946-a623-dc10f6ebdfd5'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('ad456efa-3e1f-4522-a923-f2a7720d5020'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: 'relationshipPersistableTypeUUID' }));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: '6ae077be-f49e-45fa-9653-b1f646f9a675',
            comment: 'Name of product price.',
            validator: zod_1.z.string()
        }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: '58760a57-fe01-4a8d-89ce-d9c9e4dd2bdb',
            comment: 'Description of product price.',
            validator: zod_1.z.string().max(5000, 'Description is too long'),
            isMongoRequired: false
        }));
        // activeStartDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'activeStartDate',
            attributeUUID: '15bc3f02-b100-486d-bc17-748a441c437e',
            comment: 'Active start date.',
            validator: zod_1.z.date(),
            isMongoRequired: false,
            isMongoIndexed: false,
        }));
        // activeEndDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'activeEndDate',
            attributeUUID: '63625d57-f81c-4798-9ed0-11d4c2c2fb27',
            comment: 'Active end date.',
            validator: zod_1.z.date(),
            isMongoRequired: false,
            isMongoIndexed: false,
        }));
        // durationType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'durationType',
            attributeUUID: '10cdae41-9fa8-4748-bfc2-86575a3702de',
            comment: 'The duration type.',
            foreignRefEntityNamespace: persistable_1.DurationType.metaDataForDurationType.namespace,
            isMongoIndexed: false,
            isMongoRequired: false,
        }));
        // fee
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'fee',
            attributeUUID: '3b92e169-1c68-4f57-977b-e963e683115b',
            comment: 'Product fee.',
            validator: zod_1.z.string(),
            isMongoRequired: false
        }));
        // isPriceLocked
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isPriceLocked',
            attributeUUID: 'fa913038-0282-4373-87b7-1e932af23ca2',
            comment: 'The product price is locked.',
            isMongoRequired: false
        }));
        // isRecurring
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isRecurring',
            attributeUUID: '024be31d-95f5-4075-b45f-f5a595c8e03b',
            comment: 'Product is recurring charge.',
            isMongoRequired: false
        }));
        // isUrgent
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isUrgent',
            attributeUUID: '43b31922-aa3d-4a79-8413-02f7bb58adb5',
            comment: 'The product is an urgent request.',
            isMongoRequired: false
        }));
        // maxQuantityAtUnitPrice
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'maxQuantityAtUnitPrice',
            attributeUUID: '3e7fb4a2-d903-401a-b009-0c80beb2e71a',
            comment: 'Max quantity at unit price.',
            validator: zod_1.z.string(),
            isMongoRequired: false
        }));
        // minQuantityAtUnitPrice
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'minQuantityAtUnitPrice',
            attributeUUID: '0ed77cca-50c8-44db-9151-5e0269d0ba9c',
            comment: 'Min quantity at unit price.',
            isMongoRequired: false
        }));
        // product
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'product',
            attributeUUID: 'ae95a197-b4f5-4722-a968-74395ffef616',
            comment: 'The Product.',
            foreignRefEntityNamespace: persistable_1.Product.metaDataForProduct.namespace,
        }));
        // productPricingReccuringPeriodType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'productPricingReccuringPeriodType',
            attributeUUID: 'fb66a245-ffa5-4296-a06e-80610679f633',
            comment: 'The organization.',
            foreignRefEntityNamespace: ProductPricingRecurringPeriodType_1.ProductPricingRecurringPeriodType.metaDataForProductPricingRecurringPeriodType.namespace,
            isMongoIndexed: false,
            isMongoRequired: false
        }));
        // recurringUnitPrice
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'recurringUnitPrice',
            attributeUUID: '1d9844de-4e25-492e-9765-adc2acc5494a',
            comment: 'Price per unit for recurring.',
            isMongoRequired: false
        }));
        // taxId
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'taxId',
            attributeUUID: '464552a8-d1b5-4f4c-9746-ab2a9475af57',
            comment: 'The tax type.',
            foreignRefEntityNamespace: persistable_1.Tax.metaDataForTax.namespace,
            isMongoIndexed: false,
            isMongoRequired: false
        }));
        // unitPrice
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'unitPrice',
            attributeUUID: '85787ba8-f40e-40b9-ad58-b800ec79b2e1',
            comment: 'Unit price.',
            validator: zod_1.z.string(),
            isMongoRequired: false
        }));
        // useAsUnitPriceIfInQuantityRange
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'useAsUnitPriceIfInQuantityRange',
            attributeUUID: '8fccba75-a06a-4f1c-89f0-89328a3f66b2',
            comment: 'Use as unit price if in quantity range.',
            isMongoRequired: false
        }));
        // weightPerBag
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'weightPerBag',
            attributeUUID: '85787ba8-f40e-40b9-ad58-b800ec79b2e1',
            comment: 'Weight per bag.',
            validator: zod_1.z.string(),
            isMongoRequired: false
        }));
        /**
         * Organization
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            attributeUUID: '6af9f615-e7b1-4d38-8b13-623e2cdb946e',
            comment: 'The organization.',
            foreignRefEntityNamespace: persistable_1.Organization.metaDataForOrganization.namespace,
            isMongoIndexed: true,
            isMongoRequired: true
        }));
        /*
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableMongoRefArray(
            {
                attributeName              : "salesReportConfigParamValues",
                attributeNameSingular      : "salesReportConfigParamValue",
                attributeUUID              : 'c9f068e3-90d2-4f09-9400-362dba55a724',
                comment                    : "The SalesReportConfigParamValue.",
                foreignRefEntityNamespace  : SalesReportConfigParamValue.metaDataForSalesReportConfigParamValue.namespace
            }
       ));
       */
    }
    static getInstance() {
        return (ProductPricingEntityModel.INSTANCE);
    }
}
exports.ProductPricingEntityModel = ProductPricingEntityModel;
ProductPricingEntityModel.INSTANCE = new ProductPricingEntityModel();
//# sourceMappingURL=ProductPricingEntityModel.js.map