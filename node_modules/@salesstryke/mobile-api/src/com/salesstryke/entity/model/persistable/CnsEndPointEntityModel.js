"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CnsEndPointEntityModel = void 0;
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const CnsEndPointChannelType_1 = require("../../classes/persistable/CnsEndPointChannelType");
const persistable_1 = require("../../classes/persistable");
const Organization_1 = require("../../classes/persistable/Organization");
const CnsEndPointSignupStatusType_1 = require("../../classes/persistable/CnsEndPointSignupStatusType");
const CnsSync_1 = require("../../classes/persistable/CnsSync");
const zod_1 = require("zod");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.CnsEndPoint';
class CnsEndPointEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('42b58b8e-65ad-41a7-afc9-126fe47688bf')
            .setDataModelName('CnsEndPoint')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('66c96ee4-4741-4f0c-a2dd-4d5581d8cef0');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('5d9729ac-ab0c-4dd1-b8d5-3695d014b7ff'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('f859f8b2-c067-4d54-9d7e-bd9d3a8b5286'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('4835081a-3791-415b-bf01-ef10903e8b4e'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('0a1f123d-5d1e-41eb-a6c3-dcfa03dc8f69'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('0d7bff9a-737a-4b3a-aefe-de2fd4029a2a'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('adec47b3-88f2-4eee-96bc-5ec1de4b44f6'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, '9d718d75-f5f5-4f2b-a61b-af7b7e602e4d'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('b42e7885-9753-4b6b-8404-7c224d1e8ac4'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('188a38c3-0790-4683-8c75-ac7c8ff4e21d'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: 'relationshipPersistableTypeUUID' }));
        // billingAddress
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingAddress',
            attributeUUID: '22f79e15-440f-4b99-b839-20d1047c887b',
            comment: 'The billing customer address.',
            isMongoRequired: false,
            validator: zod_1.z.string(),
        }));
        // billingCellPhone
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingCellPhone',
            attributeUUID: '55e619a4-8197-4a9c-b700-8a67fc0e1cac',
            comment: 'The billing customer cell phone number.',
            isMongoRequired: false,
            validator: zod_1.z.string().regex(/^(\+?\d{1,3})?[-.\s]?(\d{3})[-.\s]?(\d{3})[-.\s]?(\d{4})$/, "Invalid phone number format"),
        }));
        // billingCity
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingCity',
            attributeUUID: '91e89d66-3931-4bf8-a98a-c33f9d49b8f5',
            comment: 'The billing customer city.',
            isMongoRequired: false,
            validator: zod_1.z.string(),
        }));
        // billingEmailAddress
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingEmailAddress',
            attributeUUID: '2bfc9d5f-42be-44e5-8f40-de5c90cb5dd9',
            comment: 'The billing customer email address.',
            isMongoRequired: false,
            validator: zod_1.z.string().email(),
        }));
        // billingFirstName
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingFirstName',
            attributeUUID: 'a346a789-e0f0-43ff-aa01-e904ee261da9',
            comment: 'The billing customer first name.',
            isMongoRequired: false,
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Name cannot contain special characters"),
        }));
        // billingLastName
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingLastName',
            attributeUUID: '48663148-d292-4fa6-bc8b-d846329ca5ac',
            comment: 'The billing customer last name.',
            isMongoRequired: false,
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Name cannot contain special characters"),
        }));
        // billingState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingState',
            attributeUUID: 'a7a2c8fc-16e1-4b99-8d0b-7429708c3849',
            comment: 'The billing customer state.',
            isMongoRequired: false
        }));
        // billingZipCode
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingZipCode',
            attributeUUID: 'b6779837-05f1-41bf-8dcb-15e4d59571c6',
            comment: 'The billing customer zip code.',
            isMongoRequired: false,
            validator: zod_1.z.string().min(5).max(5),
        }));
        // billingSignupToken
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'billingSignupToken',
            attributeUUID: 'a23136f3-ff3c-4b1c-abe8-8859fe966045',
            comment: 'The billing customer signup token.',
            isMongoRequired: false,
            validator: zod_1.z.string(),
        }));
        // customerId
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'clientUUID',
            attributeUUID: 'a6b8e072-b29d-4316-8e00-ac730ce31775',
            comment: 'Client unique id for data, customer.',
            isMongoRequired: false,
            validator: zod_1.z.string(),
        }));
        // importDataId
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'importData',
            attributeUUID: '256f116e-e8dc-4fc5-be7c-e8cabd3ca72e',
            comment: 'The mongo object id for ImportData.',
            foreignRefEntityNamespace: persistable_1.ImportData.metaDataForImportData.namespace,
            isMongoIndexed: true,
            isMongoRequired: true,
            validator: zod_1.z.string(),
        }));
        // User
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'User',
            attributeUUID: '329b18b8-a0f8-45ab-a8f4-6be4f9cb4e77',
            comment: 'The mongo object id for User.',
            foreignRefEntityNamespace: persistable_1.User.metaDataForUser.namespace,
            isMongoIndexed: true,
            isMongoRequired: false,
            validator: zod_1.z.string(),
        }));
        /**
         * CnsEndPointChannelType
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'cnsEndPointChannelType',
            attributeUUID: '11178215-cd6f-4548-9301-23336832b1ce',
            comment: 'The Channel Type, email, text, or app.',
            foreignRefEntityNamespace: CnsEndPointChannelType_1.CnsEndPointChannelType.metaDataForCnsEndPointChannelType.namespace,
            isMongoIndexed: true,
            isMongoRequired: true,
            validator: zod_1.z.string(),
        }));
        /**
         * CnsEndPointSignupStatusType
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'cnsEndPointSignupStatusType',
            attributeUUID: 'fae1d93b-a6c2-464a-860c-5564d8ca4655',
            comment: 'The signup status type: OPT_IN, OPT_OUT, PENDING',
            foreignRefEntityNamespace: CnsEndPointSignupStatusType_1.CnsEndPointSignupStatusType.metaDataForCnsEndPointSignupStatusType.namespace,
            isMongoIndexed: true,
            isMongoRequired: true,
            validator: zod_1.z.string(),
        }));
        /**
         * CnsSync
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'CnsSync',
            attributeUUID: 'fae1d93b-a6c2-464a-860c-5564d8ca4655',
            comment: 'The last CnsSync',
            foreignRefEntityNamespace: CnsSync_1.CnsSync.metaDataForCnsSync.namespace,
            isMongoIndexed: true,
            isMongoRequired: true,
            validator: zod_1.z.string(),
        }));
        /**
         * Organization
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            attributeUUID: 'c7b5a887-ae51-4e9f-bd17-e6869cba5bcd',
            comment: 'The organization.',
            foreignRefEntityNamespace: Organization_1.Organization.metaDataForOrganization.namespace,
            isMongoIndexed: true,
            isMongoRequired: false,
        }));
        // serviceAddress
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceAddress',
            attributeUUID: 'a6b8e072-b29d-4316-8e00-ac730ce31775',
            comment: 'The service customer address.',
            isMongoRequired: false,
            validator: zod_1.z.string(),
        }));
        // serviceCellPhone
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceCellPhone',
            attributeUUID: '8e6d8b1e-b355-4b6a-be74-822c37705e9d',
            comment: 'The service customer cell phone number.',
            isMongoRequired: false,
            validator: zod_1.z.string().regex(/^(\+?\d{1,3})?[-.\s]?(\d{3})[-.\s]?(\d{3})[-.\s]?(\d{4})$/, "Invalid phone number format"),
        }));
        // serviceCity
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceCity',
            attributeUUID: 'b89d34da-ecc0-4f9b-bfe6-419f112f0bb7',
            comment: 'The service customer city.',
            isMongoRequired: false
        }));
        // serviceEmailAddress
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceEmailAddress',
            attributeUUID: '85d7c7da-d030-4274-a59e-3a31f6629f53',
            comment: 'The service customer email address.',
            isMongoRequired: false
        }));
        // serviceFirstName
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceFirstName',
            attributeUUID: 'ede15bd0-705f-4a8c-abcb-c922ff83e443',
            comment: 'The service customer first name.',
            isMongoRequired: false
        }));
        // serviceLastName
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceLastName',
            attributeUUID: '4929cb03-a8c6-44a0-b9bf-58c127b46f30',
            comment: 'The service customer last name.',
            isMongoRequired: false
        }));
        // serviceState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceState',
            attributeUUID: '2eaaf81c-9e75-4f95-b10e-d60d409fa0cb',
            comment: 'The service customer state.',
            isMongoRequired: false
        }));
        // serviceZipCode
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceZipCode',
            attributeUUID: '1d956d84-33a4-4f56-92f7-8a79698b1cbf',
            comment: 'The service customer zip code.',
            isMongoRequired: false
        }));
        // serviceSignupToken
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'serviceSignupToken',
            attributeUUID: 'b7e2bbfb-a6a9-46c6-ac13-a2dd2ff71e9c',
            comment: 'The service customer signup token.',
            isMongoRequired: false
        }));
        // this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableBoolean2({
        //     attributeName   : 'zBoolean',
        //     attributeUUID   : '11178215-cd6f-4548-9301-23336832b1ce',
        //     comment         : 'The service customer signup token.',
        //     mongoIsRequired : false
        // }));
        // this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableDate2({
        //     attributeName   : 'zDate',
        //     attributeUUID   : '11e19fb6-eeaf-4aca-83e7-e407397aff83',
        //     comment         : 'The service customer signup token.',
        //     mongoIsRequired : false
        // }));
        // this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableJsonString2({
        //     attributeName   : 'zJsonString',
        //     attributeUUID   : 'fae1d93b-a6c2-464a-860c-5564d8ca4655',
        //     comment         : 'The service customer signup token.',
        //     isTypeAliasOptional : false,
        //     mongoIsRequired : false,
        //     variableType    : new TypeReference({ typeName : 'string' })
        // }));
        // this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableNumber2({
        //     attributeName   : 'zNumber',
        //     attributeUUID   : 'e79b5058-c958-45a8-bf75-0bbdaa923f02',
        //     comment         : 'The service customer signup token.',
        //     mongoIsRequired : false
        // }));
        /*
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableMongoRefArray(
            {
                attributeName              : "salesReportConfigParamValues",
                attributeNameSingular      : "salesReportConfigParamValue",
                attributeUUID              : '0a0bd0b1-a401-4db8-8a37-46b5768456b9',
                comment                    : "The SalesReportConfigParamValue.",
                foreignRefEntityNamespace  : SalesReportConfigParamValue.metaDataForSalesReportConfigParamValue.namespace
            }
       ));
       */
    }
    static getInstance() {
        return (CnsEndPointEntityModel.INSTANCE);
    }
}
exports.CnsEndPointEntityModel = CnsEndPointEntityModel;
CnsEndPointEntityModel.INSTANCE = new CnsEndPointEntityModel();
//# sourceMappingURL=CnsEndPointEntityModel.js.map