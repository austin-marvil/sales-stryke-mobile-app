"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressEntityModel = void 0;
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const USState_1 = require("../../classes/persistable/USState");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const zod_1 = require("zod");
const ENTITY_CLASS_NAMESPACE = "com.salesstryke.entity.classes.persistable.Address";
class AddressEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID("ca411f25-4ead-4395-8685-e9c070001974")
            .setDataModelName("Address")
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID("395277ff-5e58-48e3-a065-510423ad1806");
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('5b56f3ec-fc35-4510-9d3c-7273c9e6fc79'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState("395277ff-5e58-48e3-a065-510423ad1806"));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem("a1ff62c7-6f92-4ec7-bec3-4e5906c0904b"));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey("c905602f-8a10-4b67-96e6-1a05e2f8418e"));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate("7e49a3cb-c2b0-4081-8f71-d0e0e8492aa3"));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId("d0ab630b-05be-4e84-8afa-872490354dd7"));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, "5066e342-2f4a-4d78-a1a0-1cfc15a2da79"));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate("3c83cdd8-e917-4922-8a4b-20c077f60e4a"));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship("fd96efb9-6121-467f-a137-771290c28876"));
        // administrativeLevel1
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "administrativeLevel1",
            attributeUUID: "700d0c14-84fd-4912-b00e-7a6366339606",
            comment: "The administrativeLevel1 (state) for the address.",
            isMongoRequired: false
        }));
        // administrativeLevel2
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "administrativeLevel2",
            attributeUUID: "900120ba-5f44-4b1d-9ec0-6357dd0f3e3f",
            comment: "The administrativeLevel2 (county) for the address.",
            isMongoRequired: false
        }));
        // administrativeLevel3
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "administrativeLevel3",
            attributeUUID: "736222ca-7e1b-4062-9d99-a0648e6cda3d",
            comment: "The administrativeLevel3 (city/town) for the address.",
            isMongoRequired: false
        }));
        // direction
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "direction",
            attributeUUID: "45b91c78-e75d-440d-be97-7b5056a8b1b1",
            comment: "The direction for the address.",
            isMongoRequired: false
        }));
        // formattedAddress
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "formattedAddress",
            attributeUUID: "dfb81ae0-3f44-4dc6-9753-244317abde90",
            comment: "The formattedAddress for the address.",
            isMongoRequired: false,
        }));
        // city
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "city",
            attributeUUID: "d96dbcac-70f6-49ab-9738-2c6831420c88",
            comment: "The city",
            isTypeAliasOptional: false,
            // validator           : z.string().max(100, 'Max length is 100').regex(Regex.alphaWithSpace, 'Only letters and spaces allowed'),
        }));
        // postOffice
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "postOffice",
            attributeUUID: "3d29158a-918e-4bd7-abaf-3f7c16e154cc",
            comment: "Is the address a post office/box.",
            isMongoRequired: false
        }));
        // street
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "street",
            attributeUUID: "3d29158a-918e-4bd7-abaf-3f7c16e154cc",
            comment: "The street for the address.",
            isTypeAliasOptional: false,
            validator: zod_1.z.string().max(255, 'Max length is 255'),
        }));
        // streetSuffix
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "streetSuffix",
            attributeUUID: "aced206c-4d4e-463f-8461-d7223055d37f",
            comment: "The street suffix for the address.",
            isMongoRequired: false,
        }));
        // streetName
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "streetName",
            attributeUUID: "9ad0c239-098a-48d1-b8da-72481a17d8e7",
            comment: "The name of the street for the address.",
            isMongoRequired: false
        }));
        // streetNumber
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "streetNumber",
            attributeUUID: "155c2ba6-d98b-4cef-9331-d50fec616a5d",
            comment: "The streetNumber for the address.",
            isMongoRequired: false,
            validator: zod_1.z.string().regex(RegularExpressionRegexConstUtil_1.Regex.numberOnly)
        }));
        /**
         * usState
         * Many Addresses to One USState
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: "usState",
            attributeUUID: "7ece313a-c742-49e1-96cc-8254320be390",
            comment: "The US state for the address.",
            foreignRefEntityNamespace: USState_1.USState.metaDataForUSState.namespace,
        }));
        // zip
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "zipcode",
            attributeUUID: "0e7b9aaa-79d5-464e-8150-0bf520dd90ce",
            comment: "The zipcode for the address.",
            isTypeAliasOptional: false,
            validator: zod_1.z.string().min(5).max(5),
        }));
        // lat
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: "lat",
            attributeUUID: "276a95e1-c717-46d3-bb50-931c253e9579",
            comment: "The lat for the address.",
            isMongoRequired: false
        }));
        // lng
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: "lng",
            attributeUUID: "4cd4e9ce-4260-4f49-ae52-44a8b5b014eb",
            comment: "The lng for the address.",
            isMongoRequired: false
        }));
        // confidence level
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: "confidence",
            attributeUUID: "04d9584b-6455-4585-9e6e-100770be2af1",
            comment: "The confidence for the address.",
            isMongoRequired: false
        }));
        // neighborhood
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "neighborhood",
            attributeUUID: "f0eb2af5-6529-45fa-8299-507e6ddf76f4",
            comment: "The neighborhood for the address.",
            isMongoRequired: false
        }));
        // subpremise level
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "subpremiseLevel",
            attributeUUID: "ce5efa51-fe47-49bd-925a-8c277692a499",
            comment: "The subpremiseLevel for the address.",
            isMongoRequired: false
        }));
        // isValidated
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: "isValidated",
            attributeUUID: "620409f8-3735-4547-8330-c75a5f553fa9",
            comment: "Is address validated by a service.",
            isMongoRequired: false
        }));
        // validatedBy
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "validatedBy",
            attributeUUID: "0b9d4513-0aab-4ad1-9f3f-a2eae48af0a1",
            comment: "The service that validate the address.",
            isMongoRequired: false
        }));
    }
    static getInstance() {
        return (AddressEntityModel.INSTANCE);
    }
}
exports.AddressEntityModel = AddressEntityModel;
AddressEntityModel.INSTANCE = new AddressEntityModel();
//# sourceMappingURL=AddressEntityModel.js.map