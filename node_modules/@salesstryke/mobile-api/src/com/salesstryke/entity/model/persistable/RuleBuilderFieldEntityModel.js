"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleBuilderFieldEntityModel = void 0;
const zod_1 = require("zod");
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const persistable_1 = require("../../classes/persistable");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.RuleBuilderField';
class RuleBuilderFieldEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('36910e45-9b4f-48c3-aafa-24dd0e937e84')
            .setDataModelName('RuleBuilderField')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('8324dbc1-4375-4283-8eb1-637962ee08f9');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('c3de4ad0-fc33-4ea0-83d1-5a9ff32fbad0'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('9ff402c6-782a-496e-ada6-753529c7a87e'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('5197dcef-3b4f-4918-8595-d3debb05bbb0'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('5ebd1231-e6af-4e57-87a5-0b87c95dfc8f'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('f6158f6c-30eb-4dee-89ea-08e3b613e544'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('51591c0a-bd3b-4293-9d28-9eb0ddb52534'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, 'c0755bf6-9cb8-48d5-924e-d1cdaba838d7'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('198b1511-1787-413d-8da7-90c7a743d3bf'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('1f5c7d59-0018-4e0c-b6dd-d2722297d567'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: 'relationshipPersistableTypeUUID' }));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: '497377da-eaa1-4542-a063-1f4dcfbb7b72',
            comment: 'The name of the rule builder field.',
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Name cannot contain special characters")
        }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: '92011314-5a3b-42d6-b6b7-f98eb7bc5502',
            comment: 'The description.',
            validator: zod_1.z.string().max(1000, 'Description is to long'),
        }));
        // label
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'label',
            attributeUUID: '2f3643e7-6b5f-47c1-b3e6-f9c74224a711',
            comment: 'The label of the rule builder field.',
            validator: zod_1.z.string().min(1, "Label cannot be empty")
                .max(255, "Label is too long")
                .regex(/^[a-zA-Z\s]+$/, "Label must only contain alphabets and spaces")
        }));
        // placeholder
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'placeholder',
            attributeUUID: 'a0190c05-bfdd-448f-a204-24d406ded648',
            comment: 'The placeholder of the rule builder field.',
            isMongoIndexed: false,
            isMongoRequired: false,
        }));
        // defaultValue
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'defaultValue',
            attributeUUID: '81860ff9-1a20-4cf0-8e30-151ba21e9828',
            comment: 'The defaultValue of the rule builder field.',
            isMongoRequired: false,
            isMongoIndexed: false,
        }));
        // valueEditorType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'valueEditorType',
            attributeUUID: '0cfc37f6-45b0-4518-846d-c3f1f73cf64a',
            comment: 'The valueEditorType of the rule builder field.',
            isMongoIndexed: true,
        }));
        // operators
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'operators',
            attributeUUID: '65c54f6d-67df-4383-9046-91f005d14402',
            comment: 'The operators of the rule builder field.',
            validator: zod_1.z.string()
        }));
        /**
         * Organization
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            attributeUUID: '8eb86134-b68d-4130-8f7a-ef0f1817bf7f',
            comment: 'The organization.',
            foreignRefEntityNamespace: persistable_1.Organization.metaDataForOrganization.namespace,
            validator: zod_1.z.string(),
            isMongoIndexed: true,
            isMongoRequired: false
        }));
        /*
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableMongoRefArray(
            {
                attributeName              : "salesReportConfigParamValues",
                attributeNameSingular      : "salesReportConfigParamValue",
                attributeUUID              : '2d3efdac-ca52-46fd-aab7-6a299c225744',
                comment                    : "The SalesReportConfigParamValue.",
                foreignRefEntityNamespace  : SalesReportConfigParamValue.metaDataForSalesReportConfigParamValue.namespace
            }
       ));
       */
    }
    static getInstance() {
        return (RuleBuilderFieldEntityModel.INSTANCE);
    }
}
exports.RuleBuilderFieldEntityModel = RuleBuilderFieldEntityModel;
RuleBuilderFieldEntityModel.INSTANCE = new RuleBuilderFieldEntityModel();
//# sourceMappingURL=RuleBuilderFieldEntityModel.js.map