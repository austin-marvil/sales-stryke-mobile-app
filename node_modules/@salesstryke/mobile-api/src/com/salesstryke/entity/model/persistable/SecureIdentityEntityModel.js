"use strict";
/*
    private jwtToken: string = "";
    private login: string = "";
    private password: string = "";
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecureIdentityEntityModel = void 0;
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const NamespaceUtils_1 = require("../../../utils/NamespaceUtils");
const Organization_1 = require("../../classes/persistable/Organization");
const User_1 = require("../../classes/persistable/User");
const SecurityRole_1 = require("../../classes/persistable/SecurityRole");
const SecurityPermission_1 = require("../../classes/persistable/SecurityPermission");
const Workspace_1 = require("../../classes/persistable/Workspace");
const zod_1 = require("zod");
const Setting_1 = require("../../classes/persistable/Setting");
const ENTITY_CLASS_NAMESPACE = "com.salesstryke.entity.classes.persistable.SecureIdentity";
class SecureIdentityEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        let simpleName_s = NamespaceUtils_1.NamespaceUtils.namespaceToSimpleName(ENTITY_CLASS_NAMESPACE);
        entityModel
            .setCrudCreateAuthorizationUUID("38ab5ee7-ec34-47de-96d1-accccd688e2f")
            .setDataModelName(simpleName_s)
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID("d0ed4b37-3b30-44ed-bd56-aad69f9cb237");
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('92f4ac2f-d7cc-4d72-ac3c-f5cee2b8f92b'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState("ddc4c40c-049a-4201-86d5-1e28190d8d7f"));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem("9ae1224d-8084-42cc-9585-3d8aef0bc5a6"));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey("a0c85bbd-b1d9-4a9f-8f56-4f57f046adfc"));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate("26be2878-7018-45eb-8598-8f62758a925f"));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId("fb29dddd-73a7-49b1-8a5d-bfe276b0c230"));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, "353574fc-1bff-4122-aed2-ad936c4c2058"));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate("8ff7f88d-dacf-48f9-a364-d939f3090b3c"));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship("b2ce0b13-f5b6-4c76-90b4-0b79d637e3d9"));
        // isAuthenticated
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRecordBoolean("isAuthenticated", "0ba052f4-975b-466c-884f-d85ce3513753", // uuid
        "Identifies if the user is Authenticated."));
        // jwtToken
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRecordString("jwtToken", "983f0ff2-bb88-4c8c-81df-1a2820b4f867", // uuid
        "The JWT token for the Identity."));
        // login
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "login",
            attributeUUID: "f80d039f-a1b2-48e8-ad07-97089851a2e8", // uuid
            comment: "The user login for Authentication",
            validator: zod_1.z.string().min(1, "Login is required")
                .max(30, "Login is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphaWithoutSpace, "Login cannot contain special characters or number")
        })
            .setIsSecure(true));
        /**
         * organization oid
         * The Tenant Organization this secureIdentity belongs to.
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: "organization",
            foreignRefEntityNamespace: Organization_1.Organization.metaDataForOrganization.namespace,
            attributeUUID: "1f4aceac-4ba8-471e-bb58-19b644e844a4",
            comment: "The tenant Organization."
        }));
        /**
         * setting
         * Organization setting for this SecureIdentity.
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: "setting",
            foreignRefEntityNamespace: Setting_1.Setting.metaDataForSetting.namespace,
            attributeUUID: "1e0914fc-c6c3-477c-aaf5-a9e3eb2032d3",
            comment: "Organization Setting.",
            isMongoRequired: false
        }));
        // password
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: "password",
            attributeUUID: "6f517bd3-fedf-475d-a9e5-ce4d8d847997", // uuid
            comment: "The user password for Authentication",
            validator: zod_1.z.string()
                .max(30, "Max length is 30")
            // .regex(Regex.password, "Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character")
        })
            .setMongoIsUnique(true)
            .setIsSecure(true));
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRefArray({
            attributeName: 'securityPermissions',
            attributeNameSingular: 'securityPermission',
            attributeUUID: '2712300b-09a9-427a-a007-87d0340ac703',
            comment: "MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.",
            foreignRefEntityNamespace: SecurityPermission_1.SecurityPermission.metaDataForSecurityPermission.namespace
        }));
        /**
         * User
         *
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: "user",
            foreignRefEntityNamespace: User_1.User.metaDataForUser.namespace,
            attributeUUID: "83601929-753f-4849-8225-a6a161c9be1b",
            comment: "The User for the Identity."
        }));
        /**
         * Roles
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRefArray({
            attributeName: 'roles',
            attributeNameSingular: 'role',
            comment: 'The User Roles.',
            foreignRefEntityNamespace: SecurityRole_1.SecurityRole.metaDataForSecurityRole.namespace,
            attributeUUID: '4c0b43bd-4073-4c69-9d98-44f6f10a60c4'
        })
            .setMongoRefArrayAllowDuplicate(false));
        /**
         * activeWorkspace
         *
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: "activeWorkspace",
            foreignRefEntityNamespace: Workspace_1.Workspace.metaDataForWorkspace.namespace,
            attributeUUID: "b2877b3b-a092-4e73-a2e0-d5de893512b1",
            comment: "Current active workspace."
        }));
        /**
         * Workspace oid
         * The workspace this template belongs to.
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRefArray(
        //     {
        //     // attributeName: 'workspace',
        //     // foreignRefEntityNamespace: Workspace.metaDataForWorkspace.namespace,
        //     // attributeUUID: 'b8d7cc6f-b474-4140-a9f7-778ed8ed4f77',
        //     // comment: 'The workspace this Secure Identity belongs to.'
        // }
        {
            attributeName: 'workspaces',
            attributeNameSingular: 'workspace',
            comment: 'Secure Identity Workspace allowed.',
            foreignRefEntityNamespace: Workspace_1.Workspace.metaDataForWorkspace.namespace,
            attributeUUID: 'e9d91926-5fa1-484b-a40a-9f242e2fbd6a'
        })
            .setMongoRefArrayAllowDuplicate(false));
    }
    static getInstance() {
        return (SecureIdentityEntityModel.INSTANCE);
    }
}
exports.SecureIdentityEntityModel = SecureIdentityEntityModel;
SecureIdentityEntityModel.INSTANCE = new SecureIdentityEntityModel();
//# sourceMappingURL=SecureIdentityEntityModel.js.map