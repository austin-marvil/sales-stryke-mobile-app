"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartItemEntityModel = void 0;
const zod_1 = require("zod");
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const persistable_1 = require("../../classes/persistable");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.CartItem';
class CartItemEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('920561a9-99b2-43b3-91e8-446201ab27b0')
            .setDataModelName('CartItem')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('74f71f81-d6ba-497f-81fe-0619b4f8ce6f');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('ae03640d-a65e-4738-abba-e8293a9d8363'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('5b4417b6-996a-48d3-a71e-6e9dc16878e4'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('c4e212e0-1866-4b48-ae56-4eae67fd7bc8'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('62bcadee-b9c7-472e-83c8-eeefc3b5c5d9'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('7c30792b-8e3e-4aa8-9483-5283887c08a0'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('377044e1-4883-425c-bb48-829e054be740'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, '4b1a3169-943b-46bc-9020-8666f410a00a'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('98b712a6-6577-4bce-94bc-d932257e3f3b'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('9c0a8289-6805-4e1c-84d0-efddffc51a95'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: 'relationshipPersistableTypeUUID' }));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: '2a9859c7-76d4-4c46-98c7-07fc5e8f0a5f',
            comment: 'The name.',
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Name cannot contain special characters"),
        }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: 'bc1d6e38-b708-4e48-ad16-2e38de4686a2',
            comment: 'The description.',
            validator: zod_1.z.string().max(1000, 'Description is to long'),
        }));
        // cartSessionId
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'cartSessionId',
            attributeUUID: 'cf17a075-d484-4eca-97c8-bb516aee8cf0',
            comment: 'Cart session.',
            foreignRefEntityNamespace: persistable_1.CartSession.metaDataForCartSession.namespace,
            validator: zod_1.z.string(),
        }));
        // productColor
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'productColor',
            attributeUUID: '5897142d-7607-4b9d-a9fe-53bfeba49c2b',
            comment: 'Product Color.',
            foreignRefEntityNamespace: persistable_1.ProductColor.metaDataForProductColor.namespace,
            validator: zod_1.z.string(),
        }));
        // inputValue
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'inputValue',
            attributeUUID: '3ea2fe8c-db24-4b0a-b0af-58fb39fb3871',
            comment: 'input value',
            validator: zod_1.z.string(),
        }));
        // isRecurring
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isRecurring',
            attributeUUID: 'c5e15779-5711-47fa-9d50-6050ab2d6157',
            comment: 'Recurring check',
            // validator       : z.boolean(),
        }));
        /**
         * organization
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            attributeUUID: '75d1f3fd-893a-4539-b42e-7032b349b80b',
            comment: 'The organization.',
            foreignRefEntityNamespace: persistable_1.Organization.metaDataForOrganization.namespace,
            validator: zod_1.z.string(),
        }));
        // price
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'price',
            attributeUUID: 'f484cec2-eb21-4e93-96f2-b4357af17a61',
            comment: 'The price.',
            validator: zod_1.z.number(),
        }));
        // priceAtTime
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'priceAtTime',
            attributeUUID: '6890acd2-daf3-4473-acc0-3557d14913c8',
            comment: 'Price at time',
            validator: zod_1.z.date(),
        }));
        // product
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'product',
            attributeUUID: 'c0dbd348-0f88-40a5-aef0-3240795b78a6',
            comment: 'The product.',
            foreignRefEntityNamespace: persistable_1.Product.metaDataForProduct.namespace,
            validator: zod_1.z.string(),
        }));
        // productPricing
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'productPricing',
            attributeUUID: '9bbf5d8d-afa8-4242-9fc4-6a115be5eaa7',
            comment: 'The product pricing.',
            foreignRefEntityNamespace: persistable_1.ProductPricing.metaDataForProductPricing.namespace,
            validator: zod_1.z.string(),
        }));
        // quantity
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableNumber2({
            attributeName: 'quantity',
            attributeUUID: '0374eafc-dc85-4fda-9621-54df38ad01cd',
            comment: 'Quantity',
            validator: zod_1.z.number().int(),
        }));
        // serviceStartDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate2({
            attributeName: 'serviceStartDate',
            attributeUUID: '9158f9bb-ed63-48d1-8f6b-f8e23326c438',
            comment: 'Service start date',
            validator: zod_1.z.date(),
        }));
        // tax
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'tax',
            attributeUUID: 'eb3dae2a-8a5a-42b5-a7a9-374408e851ba',
            comment: 'The tax type.',
            foreignRefEntityNamespace: persistable_1.Tax.metaDataForTax.namespace,
            validator: zod_1.z.string(),
        }));
        // isActive
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isActive',
            attributeUUID: '8e458553-0056-49c0-b5f7-dfe5e951592d',
            comment: 'Identifies if the cart item is active.'
        }));
        // agreementDocumentAgree
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'agreementDocumentAgree',
            attributeUUID: '59fd98bb-52bb-4f52-9b2e-a99c887c9f4a',
            comment: 'Identifies if the agreement document is agreed to.'
        }));
        //agreementDocumentVersion
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'agreementDocumentVersion',
            attributeUUID: 'f8b6afc0-80b8-4df3-8c51-680a4ebe0ecc',
            comment: 'The agreement document version.',
            foreignRefEntityNamespace: persistable_1.AgreementDocumentVersion.metaDataForAgreementDocumentVersion.namespace,
            isMongoRequired: true,
        }));
        /**
         * Workspace
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'workspace',
            attributeUUID: '53b26d3d-f77a-4b46-b1fc-431a1d7011eb',
            comment: 'The workspace.',
            foreignRefEntityNamespace: persistable_1.Workspace.metaDataForWorkspace.namespace,
            isMongoIndexed: true,
            isMongoRequired: true
        }));
    }
    static getInstance() {
        return (CartItemEntityModel.INSTANCE);
    }
}
exports.CartItemEntityModel = CartItemEntityModel;
CartItemEntityModel.INSTANCE = new CartItemEntityModel();
//# sourceMappingURL=CartItemEntityModel.js.map