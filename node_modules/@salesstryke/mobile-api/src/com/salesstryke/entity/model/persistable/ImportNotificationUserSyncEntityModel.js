"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportNotificationUserSyncEntityModel = void 0;
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.ImportNotificationUserSync';
class ImportNotificationUserSyncEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('ec2d7922-787d-4119-b072-418965233d46')
            .setDataModelName('ImportNotificationUserSync')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('8eda77c3-42ae-4959-8655-8ced633b59e1');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('64036ec1-a7ca-4584-a9e3-e49412adbebd'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('49e9fa94-f278-421b-93ba-4584bc7ad931'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('3688d148-12ae-4f5c-9b9d-b0ddbb41cfe3'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('2ef347b4-d1a0-416d-b982-add48b0cee99'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('37f4c5ef-9610-4cf6-ab06-a9c4e9a5dbcd'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('d7b1599a-b9cd-4faf-9f9b-1cf5084d7596'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, '0a6e8b6c-6e47-4a32-b768-04ec85c8eb65'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('cc2f8846-807c-477d-af0b-45842357fcbc'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('5e0a9f04-7347-42d0-8abc-efc8d801486e'));
        // BillingAmountDue: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('BillingAmountDue', 'd907db3e-5f9a-420f-93b1-a484656b83a9', 'Billing amount due.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingCellPhoneNumber: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('BillingCellPhoneNumber', '19af877c-ff32-4476-812b-5d4055907b9e', 'Billing phone number.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingCity: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('BillingCity', 'dc0653bf-a616-4bcc-834f-c2c042768f61', 'Billing city.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingCounty: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('BillingCounty', '5b4656f2-87b1-4257-b959-d7784de19354', 'Billing county.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingDueNotificationDate: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('BillingDueNotificationDate', '1873e966-77c5-49dd-989b-e787d5217e01', 'Billing due notification date.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingDueDate: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('BillingDueDate', '188d1ea2-9362-444a-8396-1e4ad32a21a7', 'Billing due date.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingEmailAddress: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('BillingEmailAddress', 'ca8c12f4-29b4-4168-9793-bb6a966a30e1', 'Billing email address.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingFirstName: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('BillingFirstName', 'e2d60e28-8b3e-44fe-a503-950f0a46c3fe', 'Billing first name.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingLastName: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('BillingLastName', '65365063-80ae-4442-b3ae-fa9f3b0e38d2', 'Billing last name.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingPastDueAmount: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableCurrency('BillingPastDueAmount', 'e13cc03a-8220-49bd-8c9e-2f0898aa6f0b', 'Billing past due amount.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingStartDate: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('BillingStartDate', 'b44700e0-37d0-44b1-9ec1-6cf08e9e2adb', 'Billing start date.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingState: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('BillingState', '1a89ee60-4f73-49a0-b327-b1e72182209d', 'Billing state.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // BillingZipCode: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('BillingZipCode', '3917bedc-cbba-48a9-8659-98ebb7d4e3b4', 'Billing zip code.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // CustomerId: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('CustomerId', '19af877c-ff32-4476-812b-5d4055907b9e', 'Customer ID.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ImportHashCode: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ImportHashCode', '09628a27-3961-4806-a966-7374bffd2dae', 'Import Hash Code.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ImportSyncManager: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ImportSyncManager', 'c748811c-34b4-4543-a333-54b27924b0c8', 'Import Sync Manager.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ImportUserNotificationSync: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ImportUserNotificationSync', '424c7a7c-17cf-4af6-b875-b304a726f464', 'Import user notification Sync.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // IsActiveInClientSystem: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean('IsActiveInClientSystem', '4a6d8a72-6bf8-4450-a400-ecea147fe4eb', 'Is active in client system.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // IsServiceAddressSameAsBillingAddress: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean('IsServiceAddressSameAsBillingAddress', '36212b30-3932-46bf-a348-6c97e990ace7', 'Boolean to indicate if service and billing address is the same.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // LastRegistrationRequestSentDate: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('LastRegistrationRequestSentDate', 'dc834b5f-154e-4f3e-a28a-59595e62676b', 'Date indicated when we, Salesstryke, sent a registration email.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // SalesStrykeOrganizationId: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('SalesStrykeOrganizationId', '924729bd-aecd-438a-bd30-ae80da5e90ab', 'Id used by us, Salesstyke, to determined organization.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceBinDeliveryDate: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('ServiceBinDeliveryDate', '1cfed4b7-ce47-448f-9178-155209e23116', 'Service bin delivery date.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceBinQuantity: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableInteger('ServiceBinQuantity', '26fc304b-9aa4-4a80-929d-5328681a4a19', 'Number of service bin.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceBinSize: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceBinSize', 'f0046267-a7b3-44bc-958a-f6d599d836e4', 'Size of service bin.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceBinType: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceBinType', 'b1f39739-3a23-4975-bce8-a2d82c1209d6', 'Type of service bin.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceCellPhoneNumber: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceCellPhoneNumber', '4a19b0d6-6889-4ef5-bb28-5120886a33ca', 'Phone number for service location.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceCity: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceCity', '024b14f8-9e6d-46cc-a861-639460e99658', 'City where service located.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceCounty: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceCounty', '9b01d0b1-239e-420a-b0e9-a6e0f532881d', 'County where service located.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceEmailAddress: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceEmailAddress', '3fc5c0a0-704e-42e4-8a90-09724543eac5', 'City where service located.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceFirstName: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceFirstName', '3e854ca8-7f69-4c2c-b753-b06e232892a3', 'Email for service location.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceLastName: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceLastName', '4be4539c-104a-4a49-83a4-f9d86328b33c', 'Last name of person located for service.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceRouteDayOfWeek: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceRouteDayOfWeek', 'b7786ba5-d5c2-40a5-999c-7de92e4b02da', 'Name of the days for when service is happening.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceRouteFrequency: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableInteger('ServiceRouteFrequency', 'beed60ac-b07d-41e1-bdb8-7c8d888b9430', 'Frequency of how many time location get serviced.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceRouteNotificationDate: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('ServiceRouteNotificationDate', 'aecf8431-99dc-49ec-8613-ef7a34b4ca62', 'Service route notification date.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceRouteRoute: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceRouteRoute', '57e51343-7d48-41ba-9b42-5247c73032e6', 'Route number or id of the service route.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceStartDate: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('ServiceStartDate', 'ecd36111-beb5-40fe-98d8-bce9b3efd170', 'When service started, or should start.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceState: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceState', 'fa9f70d1-c859-4c87-8c2c-83c69c1fa21a', 'State of service location.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceStopDate: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableDate('ServiceStopDate', 'f55822b1-c49a-4349-8316-9e7e98ba47f2', 'When service stopped, or should stop.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
        // ServiceZipCode: string;
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString('ServiceZipCode', '41c722ca-5192-4019-98aa-ee53aed4c99a', 'Zip code of service location.')
        // .setMongoIsRequired(false) // uncomment to make Mongo Required
        );
    }
    static getInstance() {
        return (ImportNotificationUserSyncEntityModel.INSTANCE);
    }
}
exports.ImportNotificationUserSyncEntityModel = ImportNotificationUserSyncEntityModel;
ImportNotificationUserSyncEntityModel.INSTANCE = new ImportNotificationUserSyncEntityModel();
//# sourceMappingURL=ImportNotificationUserSyncEntityModel.js.map