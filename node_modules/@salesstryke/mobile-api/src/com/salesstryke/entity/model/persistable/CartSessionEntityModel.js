"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartSessionEntityModel = void 0;
const zod_1 = require("zod");
const EntityBase_1 = require("../../../data/entity/EntityBase");
const EntityType_1 = require("../../../data/entity/EntityType");
const DataModelAttributeHelperUtil_1 = require("../../../utils/DataModelAttributeHelperUtil");
const RegularExpressionRegexConstUtil_1 = require("../../../utils/validation/RegularExpressionRegexConstUtil");
const persistable_1 = require("../../classes/persistable");
const ENTITY_CLASS_NAMESPACE = 'com.salesstryke.entity.classes.persistable.CartSession';
class CartSessionEntityModel extends EntityBase_1.EntityBase {
    constructor() {
        super();
        this.setAddPersistableAttributes(true);
        this.setIsOrganizationRefRequired(true);
        let entityModel = this.getEntityModel();
        entityModel
            .setCrudCreateAuthorizationUUID('751cf118-141a-4c32-93d1-f65ad64f83c1')
            .setDataModelName('CartSession')
            .setEntityType(EntityType_1.EntityType.PERSISTABLE)
            .setIsGraphUpdateable(true)
            .setNamespace(ENTITY_CLASS_NAMESPACE)
            .setUUID('7ac881f4-81c9-4c4b-98b5-3df21783262f');
        // _jsonStateStr
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonStateStr('32271dcf-a32a-490b-a684-f5b7b653db73'));
        // _entityState
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getEntityState('b301ae55-1f47-4c2e-ba09-a1674f504387'));
        // _idSetBySystem
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIdSetBySystem('48d5ddcc-fa32-4c9c-894a-26cc4254e001'));
        // _initializedDataKey
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getIntializedDataKey('91301a46-3a71-41d9-974c-c6b5685cab50'));
        // createdDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getCreatedDate('0a60273f-b374-4986-9bc4-073e3e981308'));
        // id
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getId('48ae8454-8d68-47c2-b4ab-5e5261089c1a'));
        // jsonType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getJsonType(ENTITY_CLASS_NAMESPACE, '080a4e41-83de-4bbe-92fa-1680da488ea7'));
        // modifiedDate
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getModifiedDate('7071a831-f098-4e6e-ba43-32f15b50485a'));
        // addToRelationship
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getAddToRelationship('9741e6c5-7bd6-41fd-88f3-153c47013bc0'));
        // relationshipPersistableType
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getRelationshipPersistableType2({ uuid: 'relationshipPersistableTypeUUID' }));
        // name
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'name',
            attributeUUID: 'a0b97e0f-143c-467c-8aa3-985d60093e7f',
            comment: 'The name.',
            isMongoRequired: false,
            validator: zod_1.z.string().min(1, "Name cannot be empty")
                .max(255, "Name is too long")
                .regex(RegularExpressionRegexConstUtil_1.Regex.alphanumericWithSpace, "Name cannot contain special characters"),
        }));
        // description
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'description',
            attributeUUID: '31968b7d-c0fe-4f02-b82c-bf97cdb9471d',
            comment: 'The description.',
            isMongoRequired: false,
            validator: zod_1.z.string().max(1000, 'Description is to long'),
        }));
        // quoteBlock_oid
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'quoteBlock_oid',
            attributeUUID: 'b04401a2-af23-48f4-9007-8fd523d80f45',
            comment: 'Quote Block oid.'
        }));
        /**
         * Organization
         */
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'organization',
            attributeUUID: '5b8411d3-5146-48e1-a2c4-ab1287b1d1b7',
            comment: 'The organization.',
            foreignRefEntityNamespace: persistable_1.Organization.metaDataForOrganization.namespace,
            validator: zod_1.z.string(),
        }));
        // userUUID
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'userUUID',
            attributeUUID: '7d51b5e9-663c-4ae5-9e10-d65e48c87715',
            comment: 'The user UUID.',
            validator: zod_1.z.string(),
        }));
        // isActive
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'isActive',
            attributeUUID: '1fd4eea8-4e68-42ef-99fd-3f4593c9d3fa',
            comment: 'Indicates if the cart session is active.',
            isMongoRequired: true,
            isMongoIndexed: false,
        }));
        // session
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableString2({
            attributeName: 'session',
            attributeUUID: '8d742daf-4335-4169-b5bd-5b88fb01db1c',
            comment: 'The session id of the cart.',
            validator: zod_1.z.string(),
        }));
        // agreementDocumentAgree
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableBoolean2({
            attributeName: 'agreementDocumentAgree',
            attributeUUID: '5970dc1c-30ea-4178-8a96-6dca38caac4b',
            comment: 'Identifies if the agreement document is agreed to.'
        }));
        //agreementDocumentVersion
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'agreementDocumentVersion',
            attributeUUID: 'b87120fe-77a0-42d1-bbeb-7ed9536d6c49',
            comment: 'The agreement document version.',
            foreignRefEntityNamespace: persistable_1.AgreementDocumentVersion.metaDataForAgreementDocumentVersion.namespace,
            isMongoRequired: true,
        }));
        //workspace
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelperUtil_1.DataModelAttributeHelper.getPersistableMongoRef2({
            attributeName: 'workspace',
            attributeUUID: 'c9ce9374-072c-418b-9b87-2de3a454a006',
            comment: 'The workspace.',
            foreignRefEntityNamespace: persistable_1.Workspace.metaDataForWorkspace.namespace,
            validator: zod_1.z.string(),
            isMongoRequired: true,
        }));
        /*
        this.getEntityModel().addEntityAttribute(DataModelAttributeHelper.getPersistableMongoRefArray(
            {
                attributeName              : "salesReportConfigParamValues",
                attributeNameSingular      : "salesReportConfigParamValue",
                attributeUUID              : 'eeb416b8-325d-4cd9-ba62-d64a99064470',
                comment                    : "The SalesReportConfigParamValue.",
                foreignRefEntityNamespace  : SalesReportConfigParamValue.metaDataForSalesReportConfigParamValue.namespace
            }
       ));
       */
    }
    static getInstance() {
        return (CartSessionEntityModel.INSTANCE);
    }
}
exports.CartSessionEntityModel = CartSessionEntityModel;
CartSessionEntityModel.INSTANCE = new CartSessionEntityModel();
//# sourceMappingURL=CartSessionEntityModel.js.map