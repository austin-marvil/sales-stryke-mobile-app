"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.History = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
class EntityAttributes {
    constructor() {
        this._attributeDataTypeIsMutated = "_attributeDataTypeIsMutated";
        this._attributeUUIDIsMutated = "_attributeUUIDIsMutated";
        this._attributeValueIsMutated = "_attributeValueIsMutated";
        this._entityIdIsMutated = "_entityIdIsMutated";
        this._entityNamespaceIsMutated = "_entityNamespaceIsMutated";
        this._entityState = "_entityState";
        this._entityUUIDIsMutated = "_entityUUIDIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._userUUIDIsMutated = "_userUUIDIsMutated";
        this.attributeDataType = "attributeDataType";
        this.attributeUUID = "attributeUUID";
        this.attributeValue = "attributeValue";
        this.createdDate = "createdDate";
        this.entityId = "entityId";
        this.entityNamespace = "entityNamespace";
        this.entityUUID = "entityUUID";
        this.id = "id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.userUUID = "userUUID";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._attributeDataTypeIsMutated = "_attributeDataTypeIsMutated";
        this._attributeUUIDIsMutated = "_attributeUUIDIsMutated";
        this._attributeValueIsMutated = "_attributeValueIsMutated";
        this._entityIdIsMutated = "_entityIdIsMutated";
        this._entityNamespaceIsMutated = "_entityNamespaceIsMutated";
        this._entityState = "_entityState";
        this._entityUUIDIsMutated = "_entityUUIDIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._userUUIDIsMutated = "_userUUIDIsMutated";
        this.attributeDataType = "attributeDataType";
        this.attributeUUID = "attributeUUID";
        this.attributeValue = "attributeValue";
        this.createdDate = "createdDate";
        this.entityId = "entityId";
        this.entityNamespace = "entityNamespace";
        this.entityUUID = "entityUUID";
        this._id = "_id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.userUUID = "userUUID";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.History";
        this.mongDataModeName = "History";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class History extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._attributeDataTypeIsMutated = false;
        this._attributeUUIDIsMutated = false;
        this._attributeValueIsMutated = false;
        this._entityIdIsMutated = false;
        this._entityNamespaceIsMutated = false;
        this._entityUUIDIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isRemoveFromRelationship = false;
        this._isRemoveFromRelationshipIsMutated = false;
        this._userUUIDIsMutated = false;
        this.attributeDataType = 0;
        this.attributeUUID = null;
        this.attributeValue = null;
        this.entityId = null;
        this.entityNamespace = null;
        this.entityUUID = null;
        this.id = null;
        this.jsonType = "com.salesstryke.entity.classes.persistable.History";
        this.userUUID = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._attributeDataTypeIsMutated = false;
        this._attributeUUIDIsMutated = false;
        this._attributeValueIsMutated = false;
        this._entityIdIsMutated = false;
        this._entityNamespaceIsMutated = false;
        this._entityUUIDIsMutated = false;
        this._userUUIDIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.History");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsAttributeDataTypeMutated() {
        return (this._attributeDataTypeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAttributeUUIDMutated() {
        return (this._attributeUUIDIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAttributeValueMutated() {
        return (this._attributeValueIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsEntityIdMutated() {
        return (this._entityIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsEntityNamespaceMutated() {
        return (this._entityNamespaceIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsEntityUUIDMutated() {
        return (this._entityUUIDIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship() {
        return (this._isRemoveFromRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated() {
        return (this._isRemoveFromRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUserUUIDMutated() {
        return (this._userUUIDIsMutated);
    }
    /**
     * The the attribute DataType.
     * @returns number
     */
    getAttributeDataType() {
        return (this.attributeDataType);
    }
    /**
     * The Entity Attribute UUID value.
     * @returns string | null
     */
    getAttributeUUID() {
        return (this.attributeUUID);
    }
    /**
     * The Entity Attribute UUID value.
     * @returns string | null
     */
    getAttributeValue() {
        return (this.attributeValue);
    }
    /**
     * The Entity ID value for the specific document.
     * @returns string | null
     */
    getEntityId() {
        return (this.entityId);
    }
    /**
     * The Entity namespace value. DO NOT USE THIS TO Query against. If the Entity Name is changed, this will not be accurate. ONLY query by entityUUID.
     * @returns string | null
     */
    getEntityNamespace() {
        return (this.entityNamespace);
    }
    /**
     * The Entity UUID value, for the Entity type. This is NOT a document ID.
     * @returns string | null
     */
    getEntityUUID() {
        return (this.entityUUID);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The userUUID that made the change.
     * @returns string | null
     */
    getUserUUID() {
        return (this.userUUID);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAttributeDataTypeMutated(_attributeDataTypeIsMutated) {
        this._attributeDataTypeIsMutated = _attributeDataTypeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAttributeUUIDMutated(_attributeUUIDIsMutated) {
        this._attributeUUIDIsMutated = _attributeUUIDIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAttributeValueMutated(_attributeValueIsMutated) {
        this._attributeValueIsMutated = _attributeValueIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEntityIdMutated(_entityIdIsMutated) {
        this._entityIdIsMutated = _entityIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEntityNamespaceMutated(_entityNamespaceIsMutated) {
        this._entityNamespaceIsMutated = _entityNamespaceIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEntityUUIDMutated(_entityUUIDIsMutated) {
        this._entityUUIDIsMutated = _entityUUIDIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship) {
        if (this._isRemoveFromRelationship !== _isRemoveFromRelationship) {
            this._setIsRemoveFromRelationshipMutated(true);
        }
        this._isRemoveFromRelationship = _isRemoveFromRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated) {
        this._isRemoveFromRelationshipIsMutated = _isRemoveFromRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUserUUIDMutated(_userUUIDIsMutated) {
        this._userUUIDIsMutated = _userUUIDIsMutated;
        return (this);
    }
    /**
* ```
     * The the attribute DataType.
* ```
     */
    setAttributeDataType(attributeDataType) {
        if (!this._getIsMutateSuppressed() && this.attributeDataType !== attributeDataType) {
            this._setIsAttributeDataTypeMutated(true);
        }
        this.attributeDataType = attributeDataType;
        return (this);
    }
    /**
* ```
     * The Entity Attribute UUID value.
* ```
     */
    setAttributeUUID(attributeUUID) {
        if (!this._getIsMutateSuppressed() && this.attributeUUID !== attributeUUID) {
            this._setIsAttributeUUIDMutated(true);
        }
        this.attributeUUID = attributeUUID;
        return (this);
    }
    /**
* ```
     * The Entity Attribute UUID value.
* ```
     */
    setAttributeValue(attributeValue) {
        if (!this._getIsMutateSuppressed() && this.attributeValue !== attributeValue) {
            this._setIsAttributeValueMutated(true);
        }
        this.attributeValue = attributeValue;
        return (this);
    }
    /**
* ```
     * The Entity ID value for the specific document.
* ```
     */
    setEntityId(entityId) {
        if (!this._getIsMutateSuppressed() && this.entityId !== entityId) {
            this._setIsEntityIdMutated(true);
        }
        this.entityId = entityId;
        return (this);
    }
    /**
* ```
     * The Entity namespace value. DO NOT USE THIS TO Query against. If the Entity Name is changed, this will not be accurate. ONLY query by entityUUID.
* ```
     */
    setEntityNamespace(entityNamespace) {
        if (!this._getIsMutateSuppressed() && this.entityNamespace !== entityNamespace) {
            this._setIsEntityNamespaceMutated(true);
        }
        this.entityNamespace = entityNamespace;
        return (this);
    }
    /**
* ```
     * The Entity UUID value, for the Entity type. This is NOT a document ID.
* ```
     */
    setEntityUUID(entityUUID) {
        if (!this._getIsMutateSuppressed() && this.entityUUID !== entityUUID) {
            this._setIsEntityUUIDMutated(true);
        }
        this.entityUUID = entityUUID;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The userUUID that made the change.
* ```
     */
    setUserUUID(userUUID) {
        if (!this._getIsMutateSuppressed() && this.userUUID !== userUUID) {
            this._setIsUserUUIDMutated(true);
        }
        this.userUUID = userUUID;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'attributeDataType',
            value: this.attributeDataType
        });
        this._setCurrentState2({
            attributeName: 'attributeUUID',
            value: this.attributeUUID
        });
        this._setCurrentState2({
            attributeName: 'attributeValue',
            value: this.attributeValue
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'entityId',
            value: this.entityId
        });
        this._setCurrentState2({
            attributeName: 'entityNamespace',
            value: this.entityNamespace
        });
        this._setCurrentState2({
            attributeName: 'entityUUID',
            value: this.entityUUID
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'userUUID',
            value: this.userUUID
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'attributeDataType',
            value: this.attributeDataType
        });
        this._setInitializedState2({
            attributeName: 'attributeUUID',
            value: this.attributeUUID
        });
        this._setInitializedState2({
            attributeName: 'attributeValue',
            value: this.attributeValue
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'entityId',
            value: this.entityId
        });
        this._setInitializedState2({
            attributeName: 'entityNamespace',
            value: this.entityNamespace
        });
        this._setInitializedState2({
            attributeName: 'entityUUID',
            value: this.entityUUID
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'userUUID',
            value: this.userUUID
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this._isRemoveFromRelationship);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.attributeDataType);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.attributeUUID);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.attributeValue);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.entityId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.entityNamespace);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.entityUUID);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.userUUID);
        return (hashCode_n);
    }
}
exports.History = History;
History.metaDataForHistory = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.History", History);
//# sourceMappingURL=History.js.map