/**
 * This file is auto generated DO NOT EDIT.
 */
import { Organization } from './Organization';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _entityState: string;
    _firstNameIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _lastNameIsMutated: string;
    _loginIsMutated: string;
    _organizationIsMutated: string;
    _passwordIsMutated: string;
    createdDate: string;
    firstName: string;
    id: string;
    jsonType: string;
    lastName: string;
    login: string;
    modifiedDate: string;
    organization: string;
    password: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _entityState: string;
    _firstNameIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _lastNameIsMutated: string;
    _loginIsMutated: string;
    _organizationIsMutated: string;
    _passwordIsMutated: string;
    createdDate: string;
    firstName: string;
    _id: string;
    jsonType: string;
    lastName: string;
    login: string;
    modifiedDate: string;
    organizationRef: string;
    password: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class SecureAuthentication extends JsonApiPersistableBase {
    static metaDataForSecureAuthentication: MetaData;
    private _firstNameIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _lastNameIsMutated;
    private _loginIsMutated;
    private _organizationIsMutated;
    private _passwordIsMutated;
    private firstName;
    private id;
    private jsonType;
    private lastName;
    private login;
    private organization;
    private password;
    constructor();
    /**
     * Returns true if any data has been modified.
     * @returns
     */
    _getIsMutated(): boolean;
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): SecureAuthentication;
    getClassName(): string;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsFirstNameMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLastNameMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLoginMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsPasswordMutated(): boolean;
    /**
     * The users first name.
     * @returns string | null
     */
    getFirstName(): string | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The users last name.
     * @returns string | null
     */
    getLastName(): string | null;
    /**
     * The user login
     * @returns string | null
     */
    getLogin(): string | null;
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * The user password
     * @returns string | null
     */
    getPassword(): string | null;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): SecureAuthentication;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): SecureAuthentication;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): SecureAuthentication;
    /**
* ```
     *
* ```
     */
    _setIsFirstNameMutated(_firstNameIsMutated: boolean): SecureAuthentication;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): SecureAuthentication;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): SecureAuthentication;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): SecureAuthentication;
    /**
* ```
     *
* ```
     */
    _setIsLastNameMutated(_lastNameIsMutated: boolean): SecureAuthentication;
    /**
* ```
     *
* ```
     */
    _setIsLoginMutated(_loginIsMutated: boolean): SecureAuthentication;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): SecureAuthentication;
    /**
* ```
     *
* ```
     */
    _setIsPasswordMutated(_passwordIsMutated: boolean): SecureAuthentication;
    /**
* ```
     * The users first name.
* ```
     */
    setFirstName(firstName: string | null): SecureAuthentication;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): SecureAuthentication;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): SecureAuthentication;
    /**
* ```
     * The users last name.
* ```
     */
    setLastName(lastName: string | null): SecureAuthentication;
    /**
* ```
     * The user login
* ```
     */
    setLogin(login: string | null): SecureAuthentication;
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): SecureAuthentication;
    /**
* ```
     * The user password
* ```
     */
    setPassword(password: string | null): SecureAuthentication;
    getHashCode(): number;
}
export {};
