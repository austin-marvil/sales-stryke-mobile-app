"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceWidget = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistenceType_1 = require("../../../data/PersistenceType");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._activeEndDateIsMutated = "_activeEndDateIsMutated";
        this._activeStartDateIsMutated = "_activeStartDateIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._mapShowPolygonsIsMutated = "_mapShowPolygonsIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._pandaDocWebHookEnabledIsMutated = "_pandaDocWebHookEnabledIsMutated";
        this._siteButtonHoverBackgroundColorIsMutated = "_siteButtonHoverBackgroundColorIsMutated";
        this._siteCustomerSupportNumberIsMutated = "_siteCustomerSupportNumberIsMutated";
        this._siteDescriptionIsMutated = "_siteDescriptionIsMutated";
        this._siteEmailIsMutated = "_siteEmailIsMutated";
        this._siteLogoHeightIsMutated = "_siteLogoHeightIsMutated";
        this._siteLogoPathIsMutated = "_siteLogoPathIsMutated";
        this._siteUrlPathIsMutated = "_siteUrlPathIsMutated";
        this._styleButtonEnabledBackgroundColorIsMutated = "_styleButtonEnabledBackgroundColorIsMutated";
        this._styleButtonEnabledColorIsMutated = "_styleButtonEnabledColorIsMutated";
        this._styleLayoutBoarderColorIsMutated = "_styleLayoutBoarderColorIsMutated";
        this._stylePrimaryColorIsMutated = "_stylePrimaryColorIsMutated";
        this._styleSecondaryColorIsMutated = "_styleSecondaryColorIsMutated";
        this._styleTeriaryColorIsMutated = "_styleTeriaryColorIsMutated";
        this._workspaceTemplatesIsMutated = "_workspaceTemplatesIsMutated";
        this._workspaceWidgetAttributesIsMutated = "_workspaceWidgetAttributesIsMutated";
        this._workspaceWidgetEndpointIsMutated = "_workspaceWidgetEndpointIsMutated";
        this._workspaceWidgetViewsIsMutated = "_workspaceWidgetViewsIsMutated";
        this.activeEndDate = "activeEndDate";
        this.activeStartDate = "activeStartDate";
        this.createdDate = "createdDate";
        this.description = "description";
        this.id = "id";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.mapShowPolygons = "mapShowPolygons";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.pandaDocWebHookEnabled = "pandaDocWebHookEnabled";
        this.siteButtonHoverBackgroundColor = "siteButtonHoverBackgroundColor";
        this.siteCustomerSupportNumber = "siteCustomerSupportNumber";
        this.siteDescription = "siteDescription";
        this.siteEmail = "siteEmail";
        this.siteLogoHeight = "siteLogoHeight";
        this.siteLogoPath = "siteLogoPath";
        this.siteUrlPath = "siteUrlPath";
        this.styleButtonEnabledBackgroundColor = "styleButtonEnabledBackgroundColor";
        this.styleButtonEnabledColor = "styleButtonEnabledColor";
        this.styleLayoutBoarderColor = "styleLayoutBoarderColor";
        this.stylePrimaryColor = "stylePrimaryColor";
        this.styleSecondaryColor = "styleSecondaryColor";
        this.styleTeriaryColor = "styleTeriaryColor";
        this.workspaceTemplates = "workspaceTemplates";
        this.workspaceWidgetAttributes = "workspaceWidgetAttributes";
        this.workspaceWidgetEndpoint = "workspaceWidgetEndpoint";
        this.workspaceWidgetViews = "workspaceWidgetViews";
    }
}
class MongoVirtual {
    constructor() {
        this.workspaceWidgetAttributes = "workspaceWidgetAttributes";
        this.workspaceWidgetViews = "workspaceWidgetViews";
    }
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._activeEndDateIsMutated = "_activeEndDateIsMutated";
        this._activeStartDateIsMutated = "_activeStartDateIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._mapShowPolygonsIsMutated = "_mapShowPolygonsIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._pandaDocWebHookEnabledIsMutated = "_pandaDocWebHookEnabledIsMutated";
        this._siteButtonHoverBackgroundColorIsMutated = "_siteButtonHoverBackgroundColorIsMutated";
        this._siteCustomerSupportNumberIsMutated = "_siteCustomerSupportNumberIsMutated";
        this._siteDescriptionIsMutated = "_siteDescriptionIsMutated";
        this._siteEmailIsMutated = "_siteEmailIsMutated";
        this._siteLogoHeightIsMutated = "_siteLogoHeightIsMutated";
        this._siteLogoPathIsMutated = "_siteLogoPathIsMutated";
        this._siteUrlPathIsMutated = "_siteUrlPathIsMutated";
        this._styleButtonEnabledBackgroundColorIsMutated = "_styleButtonEnabledBackgroundColorIsMutated";
        this._styleButtonEnabledColorIsMutated = "_styleButtonEnabledColorIsMutated";
        this._styleLayoutBoarderColorIsMutated = "_styleLayoutBoarderColorIsMutated";
        this._stylePrimaryColorIsMutated = "_stylePrimaryColorIsMutated";
        this._styleSecondaryColorIsMutated = "_styleSecondaryColorIsMutated";
        this._styleTeriaryColorIsMutated = "_styleTeriaryColorIsMutated";
        this._workspaceTemplatesIsMutated = "_workspaceTemplatesIsMutated";
        this._workspaceWidgetAttributesIsMutated = "_workspaceWidgetAttributesIsMutated";
        this._workspaceWidgetEndpointIsMutated = "_workspaceWidgetEndpointIsMutated";
        this._workspaceWidgetViewsIsMutated = "_workspaceWidgetViewsIsMutated";
        this.activeEndDate = "activeEndDate";
        this.activeStartDate = "activeStartDate";
        this.createdDate = "createdDate";
        this.description = "description";
        this._id = "_id";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.mapShowPolygons = "mapShowPolygons";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.pandaDocWebHookEnabled = "pandaDocWebHookEnabled";
        this.siteButtonHoverBackgroundColor = "siteButtonHoverBackgroundColor";
        this.siteCustomerSupportNumber = "siteCustomerSupportNumber";
        this.siteDescription = "siteDescription";
        this.siteEmail = "siteEmail";
        this.siteLogoHeight = "siteLogoHeight";
        this.siteLogoPath = "siteLogoPath";
        this.siteUrlPath = "siteUrlPath";
        this.styleButtonEnabledBackgroundColor = "styleButtonEnabledBackgroundColor";
        this.styleButtonEnabledColor = "styleButtonEnabledColor";
        this.styleLayoutBoarderColor = "styleLayoutBoarderColor";
        this.stylePrimaryColor = "stylePrimaryColor";
        this.styleSecondaryColor = "styleSecondaryColor";
        this.styleTeriaryColor = "styleTeriaryColor";
        this.workspaceTemplates = "workspaceTemplates";
        this.workspaceWidgetAttributes = "workspaceWidgetAttributes";
        this.workspaceWidgetEndpoint = "workspaceWidgetEndpoint";
        this.workspaceWidgetViews = "workspaceWidgetViews";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.WorkspaceWidget";
        this.mongDataModeName = "WorkspaceWidget";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class WorkspaceWidget extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._activeEndDateIsMutated = false;
        this._activeStartDateIsMutated = false;
        this._descriptionIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isActiveIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isRemoveFromRelationship = false;
        this._isRemoveFromRelationshipIsMutated = false;
        this._mapShowPolygonsIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._pandaDocWebHookEnabledIsMutated = false;
        this._siteButtonHoverBackgroundColorIsMutated = false;
        this._siteCustomerSupportNumberIsMutated = false;
        this._siteDescriptionIsMutated = false;
        this._siteEmailIsMutated = false;
        this._siteLogoHeightIsMutated = false;
        this._siteLogoPathIsMutated = false;
        this._siteUrlPathIsMutated = false;
        this._styleButtonEnabledBackgroundColorIsMutated = false;
        this._styleButtonEnabledColorIsMutated = false;
        this._styleLayoutBoarderColorIsMutated = false;
        this._stylePrimaryColorIsMutated = false;
        this._styleSecondaryColorIsMutated = false;
        this._styleTeriaryColorIsMutated = false;
        this._workspaceTemplatesIsMutated = false;
        this._workspaceWidgetAttributesIsMutated = false;
        this._workspaceWidgetEndpointIsMutated = false;
        this._workspaceWidgetViewsIsMutated = false;
        this.activeEndDate = null;
        this.activeStartDate = null;
        this.description = null;
        this.id = null;
        this.isActive = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.WorkspaceWidget";
        this.mapShowPolygons = undefined;
        this.name = null;
        this.organization = null;
        this.pandaDocWebHookEnabled = undefined;
        this.siteButtonHoverBackgroundColor = null;
        this.siteCustomerSupportNumber = null;
        this.siteDescription = null;
        this.siteEmail = null;
        this.siteLogoHeight = 0;
        this.siteLogoPath = null;
        this.siteUrlPath = null;
        this.styleButtonEnabledBackgroundColor = null;
        this.styleButtonEnabledColor = null;
        this.styleLayoutBoarderColor = null;
        this.stylePrimaryColor = null;
        this.styleSecondaryColor = null;
        this.styleTeriaryColor = null;
        this.workspaceTemplates = new Array();
        this.workspaceWidgetAttributes = new Array();
        this.workspaceWidgetEndpoint = null;
        this.workspaceWidgetViews = new Array();
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._activeEndDateIsMutated = false;
        this._activeStartDateIsMutated = false;
        this._descriptionIsMutated = false;
        this._isActiveIsMutated = false;
        this._mapShowPolygonsIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._pandaDocWebHookEnabledIsMutated = false;
        this._siteButtonHoverBackgroundColorIsMutated = false;
        this._siteCustomerSupportNumberIsMutated = false;
        this._siteDescriptionIsMutated = false;
        this._siteEmailIsMutated = false;
        this._siteLogoHeightIsMutated = false;
        this._siteLogoPathIsMutated = false;
        this._siteUrlPathIsMutated = false;
        this._styleButtonEnabledBackgroundColorIsMutated = false;
        this._styleButtonEnabledColorIsMutated = false;
        this._styleLayoutBoarderColorIsMutated = false;
        this._stylePrimaryColorIsMutated = false;
        this._styleSecondaryColorIsMutated = false;
        this._styleTeriaryColorIsMutated = false;
        this._workspaceTemplatesIsMutated = false;
        this._workspaceWidgetAttributesIsMutated = false;
        this._workspaceWidgetEndpointIsMutated = false;
        this._workspaceWidgetViewsIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.WorkspaceWidget");
    }
    /**
     * A WorkspaceTemplate for this Widget.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspaceTemplate(workspaceTemplate, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            workspaceTemplate._trackMutations();
        }
        workspaceTemplate._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceTemplates.push(workspaceTemplate);
        return (this);
    }
    /**
     * A WorkspaceTemplate for this Widget.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspaceTemplate(workspaceTemplate, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            workspaceTemplate._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.workspaceTemplates.findIndex(obj => obj === workspaceTemplate);
            if (index !== -1) {
                this.workspaceTemplates.splice(index, 1);
            }
            workspaceTemplate._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        workspaceTemplate._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceTemplates.push(workspaceTemplate);
        return (this);
    }
    /**
     * The attributes for the widget.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspaceWidgetAttribute(workspaceWidgetAttribute, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            workspaceWidgetAttribute._trackMutations();
        }
        workspaceWidgetAttribute._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceWidgetAttributes.push(workspaceWidgetAttribute);
        return (this);
    }
    /**
     * The attributes for the widget.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspaceWidgetAttribute(workspaceWidgetAttribute, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            workspaceWidgetAttribute._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.workspaceWidgetAttributes.findIndex(obj => obj === workspaceWidgetAttribute);
            if (index !== -1) {
                this.workspaceWidgetAttributes.splice(index, 1);
            }
            workspaceWidgetAttribute._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        workspaceWidgetAttribute._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceWidgetAttributes.push(workspaceWidgetAttribute);
        return (this);
    }
    /**
     * The views for the widget.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspaceWidgetView(workspaceWidgetView, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            workspaceWidgetView._trackMutations();
        }
        workspaceWidgetView._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceWidgetViews.push(workspaceWidgetView);
        return (this);
    }
    /**
     * The views for the widget.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspaceWidgetView(workspaceWidgetView, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            workspaceWidgetView._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.workspaceWidgetViews.findIndex(obj => obj === workspaceWidgetView);
            if (index !== -1) {
                this.workspaceWidgetViews.splice(index, 1);
            }
            workspaceWidgetView._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        workspaceWidgetView._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceWidgetViews.push(workspaceWidgetView);
        return (this);
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveEndDateMutated() {
        return (this._activeEndDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveStartDateMutated() {
        return (this._activeStartDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated() {
        return (this._isActiveIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship() {
        return (this._isRemoveFromRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated() {
        return (this._isRemoveFromRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsMapShowPolygonsMutated() {
        return (this._mapShowPolygonsIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPandaDocWebHookEnabledMutated() {
        return (this._pandaDocWebHookEnabledIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSiteButtonHoverBackgroundColorMutated() {
        return (this._siteButtonHoverBackgroundColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSiteCustomerSupportNumberMutated() {
        return (this._siteCustomerSupportNumberIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSiteDescriptionMutated() {
        return (this._siteDescriptionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSiteEmailMutated() {
        return (this._siteEmailIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSiteLogoHeightMutated() {
        return (this._siteLogoHeightIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSiteLogoPathMutated() {
        return (this._siteLogoPathIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSiteUrlPathMutated() {
        return (this._siteUrlPathIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsStyleButtonEnabledBackgroundColorMutated() {
        return (this._styleButtonEnabledBackgroundColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsStyleButtonEnabledColorMutated() {
        return (this._styleButtonEnabledColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsStyleLayoutBoarderColorMutated() {
        return (this._styleLayoutBoarderColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsStylePrimaryColorMutated() {
        return (this._stylePrimaryColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsStyleSecondaryColorMutated() {
        return (this._styleSecondaryColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsStyleTeriaryColorMutated() {
        return (this._styleTeriaryColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceTemplatesMutated() {
        return (this._workspaceTemplatesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceWidgetAttributesMutated() {
        return (this._workspaceWidgetAttributesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceWidgetEndpointMutated() {
        return (this._workspaceWidgetEndpointIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceWidgetViewsMutated() {
        return (this._workspaceWidgetViewsIsMutated);
    }
    /**
     * The widget active end date.
     * @returns Date | null
     */
    getActiveEndDate() {
        return (this.activeEndDate);
    }
    /**
     * The widget active start date.
     * @returns Date | null
     */
    getActiveStartDate() {
        return (this.activeStartDate);
    }
    /**
     * The widget description.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * Identifies if the widget is active.
     * @returns boolean
     */
    getIsActive() {
        return ((this.isActive === undefined) ? false : this.isActive);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * Identifies if the map polygons should be shown from the Google Map.
     * @returns boolean
     */
    getMapShowPolygons() {
        return ((this.mapShowPolygons === undefined) ? false : this.mapShowPolygons);
    }
    /**
     * The widget name.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The tenant Organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * Identifies if the PandaDoc webhook has been enabled.
     * @returns boolean
     */
    getPandaDocWebHookEnabled() {
        return ((this.pandaDocWebHookEnabled === undefined) ? false : this.pandaDocWebHookEnabled);
    }
    /**
     * The widget button hover background color, should match the site default. Is required.
     * @returns string | null
     */
    getSiteButtonHoverBackgroundColor() {
        return (this.siteButtonHoverBackgroundColor);
    }
    /**
     * The widget text that will show the customers support number. Is optional.
     * @returns string | null
     */
    getSiteCustomerSupportNumber() {
        return (this.siteCustomerSupportNumber);
    }
    /**
     * The widget text that displays the site description. Is optional.
     * @returns string | null
     */
    getSiteDescription() {
        return (this.siteDescription);
    }
    /**
     * The widget text that displays the site contact email address. Is optional.
     * @returns string | null
     */
    getSiteEmail() {
        return (this.siteEmail);
    }
    /**
     * The site logo height. Is optional.
     * @returns number
     */
    getSiteLogoHeight() {
        return (this.siteLogoHeight);
    }
    /**
     * The path to the site logo. Is optional.
     * @returns string | null
     */
    getSiteLogoPath() {
        return (this.siteLogoPath);
    }
    /**
     * The path to the website. Is required.
     * @returns string | null
     */
    getSiteUrlPath() {
        return (this.siteUrlPath);
    }
    /**
     * The widget button enabled background color. Is required.
     * @returns string | null
     */
    getStyleButtonEnabledBackgroundColor() {
        return (this.styleButtonEnabledBackgroundColor);
    }
    /**
     * The widget button enabled color. Is required.
     * @returns string | null
     */
    getStyleButtonEnabledColor() {
        return (this.styleButtonEnabledColor);
    }
    /**
     * The widget layout boarder color. Is required.
     * @returns string | null
     */
    getStyleLayoutBoarderColor() {
        return (this.styleLayoutBoarderColor);
    }
    /**
     * The widget primary color. Is required.
     * @returns string | null
     */
    getStylePrimaryColor() {
        return (this.stylePrimaryColor);
    }
    /**
     * The widget secondary color. Is required.
     * @returns string | null
     */
    getStyleSecondaryColor() {
        return (this.styleSecondaryColor);
    }
    /**
     * The widget teriary color. Is required.
     * @returns string | null
     */
    getStyleTeriaryColor() {
        return (this.styleTeriaryColor);
    }
    /**
     * A WorkspaceTemplate for this Widget.
     * @returns Array<WorkspaceTemplate>
     */
    getWorkspaceTemplates() {
        return (this.workspaceTemplates);
    }
    /**
     * The attributes for the widget.
     * @returns Array<WorkspaceWidgetAttribute>
     */
    getWorkspaceWidgetAttributes() {
        return (this.workspaceWidgetAttributes);
    }
    /**
     * The endpoint this widget belongs to.
     * @returns WorkspaceWidgetEndpoint | null
     */
    getWorkspaceWidgetEndpoint() {
        return (this.workspaceWidgetEndpoint);
    }
    /**
     * The views for the widget.
     * @returns Array<WorkspaceWidgetView>
     */
    getWorkspaceWidgetViews() {
        return (this.workspaceWidgetViews);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveEndDateMutated(_activeEndDateIsMutated) {
        this._activeEndDateIsMutated = _activeEndDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveStartDateMutated(_activeStartDateIsMutated) {
        this._activeStartDateIsMutated = _activeStartDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated) {
        this._isActiveIsMutated = _isActiveIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship) {
        if (this._isRemoveFromRelationship !== _isRemoveFromRelationship) {
            this._setIsRemoveFromRelationshipMutated(true);
        }
        this._isRemoveFromRelationship = _isRemoveFromRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated) {
        this._isRemoveFromRelationshipIsMutated = _isRemoveFromRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsMapShowPolygonsMutated(_mapShowPolygonsIsMutated) {
        this._mapShowPolygonsIsMutated = _mapShowPolygonsIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPandaDocWebHookEnabledMutated(_pandaDocWebHookEnabledIsMutated) {
        this._pandaDocWebHookEnabledIsMutated = _pandaDocWebHookEnabledIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSiteButtonHoverBackgroundColorMutated(_siteButtonHoverBackgroundColorIsMutated) {
        this._siteButtonHoverBackgroundColorIsMutated = _siteButtonHoverBackgroundColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSiteCustomerSupportNumberMutated(_siteCustomerSupportNumberIsMutated) {
        this._siteCustomerSupportNumberIsMutated = _siteCustomerSupportNumberIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSiteDescriptionMutated(_siteDescriptionIsMutated) {
        this._siteDescriptionIsMutated = _siteDescriptionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSiteEmailMutated(_siteEmailIsMutated) {
        this._siteEmailIsMutated = _siteEmailIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSiteLogoHeightMutated(_siteLogoHeightIsMutated) {
        this._siteLogoHeightIsMutated = _siteLogoHeightIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSiteLogoPathMutated(_siteLogoPathIsMutated) {
        this._siteLogoPathIsMutated = _siteLogoPathIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSiteUrlPathMutated(_siteUrlPathIsMutated) {
        this._siteUrlPathIsMutated = _siteUrlPathIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsStyleButtonEnabledBackgroundColorMutated(_styleButtonEnabledBackgroundColorIsMutated) {
        this._styleButtonEnabledBackgroundColorIsMutated = _styleButtonEnabledBackgroundColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsStyleButtonEnabledColorMutated(_styleButtonEnabledColorIsMutated) {
        this._styleButtonEnabledColorIsMutated = _styleButtonEnabledColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsStyleLayoutBoarderColorMutated(_styleLayoutBoarderColorIsMutated) {
        this._styleLayoutBoarderColorIsMutated = _styleLayoutBoarderColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsStylePrimaryColorMutated(_stylePrimaryColorIsMutated) {
        this._stylePrimaryColorIsMutated = _stylePrimaryColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsStyleSecondaryColorMutated(_styleSecondaryColorIsMutated) {
        this._styleSecondaryColorIsMutated = _styleSecondaryColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsStyleTeriaryColorMutated(_styleTeriaryColorIsMutated) {
        this._styleTeriaryColorIsMutated = _styleTeriaryColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceTemplatesMutated(_workspaceTemplatesIsMutated) {
        this._workspaceTemplatesIsMutated = _workspaceTemplatesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceWidgetAttributesMutated(_workspaceWidgetAttributesIsMutated) {
        this._workspaceWidgetAttributesIsMutated = _workspaceWidgetAttributesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceWidgetEndpointMutated(_workspaceWidgetEndpointIsMutated) {
        this._workspaceWidgetEndpointIsMutated = _workspaceWidgetEndpointIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceWidgetViewsMutated(_workspaceWidgetViewsIsMutated) {
        this._workspaceWidgetViewsIsMutated = _workspaceWidgetViewsIsMutated;
        return (this);
    }
    /**
* ```
     * The widget active end date.
* ```
     */
    setActiveEndDate(activeEndDate) {
        if (!this._getIsMutateSuppressed() && this.activeEndDate !== activeEndDate) {
            this._setIsActiveEndDateMutated(true);
        }
        this.activeEndDate = activeEndDate;
        return (this);
    }
    /**
* ```
     * The widget active start date.
* ```
     */
    setActiveStartDate(activeStartDate) {
        if (!this._getIsMutateSuppressed() && this.activeStartDate !== activeStartDate) {
            this._setIsActiveStartDateMutated(true);
        }
        this.activeStartDate = activeStartDate;
        return (this);
    }
    /**
* ```
     * The widget description.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * Identifies if the widget is active.
* ```
     */
    setIsActive(isActive) {
        if (!this._getIsMutateSuppressed() && this.isActive !== isActive) {
            this._setIsActiveMutated(true);
        }
        this.isActive = isActive;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * Identifies if the map polygons should be shown from the Google Map.
* ```
     */
    setMapShowPolygons(mapShowPolygons) {
        if (!this._getIsMutateSuppressed() && this.mapShowPolygons !== mapShowPolygons) {
            this._setIsMapShowPolygonsMutated(true);
        }
        this.mapShowPolygons = mapShowPolygons;
        return (this);
    }
    /**
* ```
     * The widget name.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The tenant Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * Identifies if the PandaDoc webhook has been enabled.
* ```
     */
    setPandaDocWebHookEnabled(pandaDocWebHookEnabled) {
        if (!this._getIsMutateSuppressed() && this.pandaDocWebHookEnabled !== pandaDocWebHookEnabled) {
            this._setIsPandaDocWebHookEnabledMutated(true);
        }
        this.pandaDocWebHookEnabled = pandaDocWebHookEnabled;
        return (this);
    }
    /**
* ```
     * The widget button hover background color, should match the site default. Is required.
* ```
     */
    setSiteButtonHoverBackgroundColor(siteButtonHoverBackgroundColor) {
        if (!this._getIsMutateSuppressed() && this.siteButtonHoverBackgroundColor !== siteButtonHoverBackgroundColor) {
            this._setIsSiteButtonHoverBackgroundColorMutated(true);
        }
        this.siteButtonHoverBackgroundColor = siteButtonHoverBackgroundColor;
        return (this);
    }
    /**
* ```
     * The widget text that will show the customers support number. Is optional.
* ```
     */
    setSiteCustomerSupportNumber(siteCustomerSupportNumber) {
        if (!this._getIsMutateSuppressed() && this.siteCustomerSupportNumber !== siteCustomerSupportNumber) {
            this._setIsSiteCustomerSupportNumberMutated(true);
        }
        this.siteCustomerSupportNumber = siteCustomerSupportNumber;
        return (this);
    }
    /**
* ```
     * The widget text that displays the site description. Is optional.
* ```
     */
    setSiteDescription(siteDescription) {
        if (!this._getIsMutateSuppressed() && this.siteDescription !== siteDescription) {
            this._setIsSiteDescriptionMutated(true);
        }
        this.siteDescription = siteDescription;
        return (this);
    }
    /**
* ```
     * The widget text that displays the site contact email address. Is optional.
* ```
     */
    setSiteEmail(siteEmail) {
        if (!this._getIsMutateSuppressed() && this.siteEmail !== siteEmail) {
            this._setIsSiteEmailMutated(true);
        }
        this.siteEmail = siteEmail;
        return (this);
    }
    /**
* ```
     * The site logo height. Is optional.
* ```
     */
    setSiteLogoHeight(siteLogoHeight) {
        if (!this._getIsMutateSuppressed() && this.siteLogoHeight !== siteLogoHeight) {
            this._setIsSiteLogoHeightMutated(true);
        }
        this.siteLogoHeight = siteLogoHeight;
        return (this);
    }
    /**
* ```
     * The path to the site logo. Is optional.
* ```
     */
    setSiteLogoPath(siteLogoPath) {
        if (!this._getIsMutateSuppressed() && this.siteLogoPath !== siteLogoPath) {
            this._setIsSiteLogoPathMutated(true);
        }
        this.siteLogoPath = siteLogoPath;
        return (this);
    }
    /**
* ```
     * The path to the website. Is required.
* ```
     */
    setSiteUrlPath(siteUrlPath) {
        if (!this._getIsMutateSuppressed() && this.siteUrlPath !== siteUrlPath) {
            this._setIsSiteUrlPathMutated(true);
        }
        this.siteUrlPath = siteUrlPath;
        return (this);
    }
    /**
* ```
     * The widget button enabled background color. Is required.
* ```
     */
    setStyleButtonEnabledBackgroundColor(styleButtonEnabledBackgroundColor) {
        if (!this._getIsMutateSuppressed() && this.styleButtonEnabledBackgroundColor !== styleButtonEnabledBackgroundColor) {
            this._setIsStyleButtonEnabledBackgroundColorMutated(true);
        }
        this.styleButtonEnabledBackgroundColor = styleButtonEnabledBackgroundColor;
        return (this);
    }
    /**
* ```
     * The widget button enabled color. Is required.
* ```
     */
    setStyleButtonEnabledColor(styleButtonEnabledColor) {
        if (!this._getIsMutateSuppressed() && this.styleButtonEnabledColor !== styleButtonEnabledColor) {
            this._setIsStyleButtonEnabledColorMutated(true);
        }
        this.styleButtonEnabledColor = styleButtonEnabledColor;
        return (this);
    }
    /**
* ```
     * The widget layout boarder color. Is required.
* ```
     */
    setStyleLayoutBoarderColor(styleLayoutBoarderColor) {
        if (!this._getIsMutateSuppressed() && this.styleLayoutBoarderColor !== styleLayoutBoarderColor) {
            this._setIsStyleLayoutBoarderColorMutated(true);
        }
        this.styleLayoutBoarderColor = styleLayoutBoarderColor;
        return (this);
    }
    /**
* ```
     * The widget primary color. Is required.
* ```
     */
    setStylePrimaryColor(stylePrimaryColor) {
        if (!this._getIsMutateSuppressed() && this.stylePrimaryColor !== stylePrimaryColor) {
            this._setIsStylePrimaryColorMutated(true);
        }
        this.stylePrimaryColor = stylePrimaryColor;
        return (this);
    }
    /**
* ```
     * The widget secondary color. Is required.
* ```
     */
    setStyleSecondaryColor(styleSecondaryColor) {
        if (!this._getIsMutateSuppressed() && this.styleSecondaryColor !== styleSecondaryColor) {
            this._setIsStyleSecondaryColorMutated(true);
        }
        this.styleSecondaryColor = styleSecondaryColor;
        return (this);
    }
    /**
* ```
     * The widget teriary color. Is required.
* ```
     */
    setStyleTeriaryColor(styleTeriaryColor) {
        if (!this._getIsMutateSuppressed() && this.styleTeriaryColor !== styleTeriaryColor) {
            this._setIsStyleTeriaryColorMutated(true);
        }
        this.styleTeriaryColor = styleTeriaryColor;
        return (this);
    }
    /**
* ```
     * A WorkspaceTemplate for this Widget.
* ```
     */
    setWorkspaceTemplates(workspaceTemplates) {
        if (!this._getIsMutateSuppressed() && this.workspaceTemplates !== workspaceTemplates) {
            this._setIsWorkspaceTemplatesMutated(true);
        }
        this.workspaceTemplates = workspaceTemplates;
        return (this);
    }
    /**
* ```
     * The attributes for the widget.
* ```
     */
    setWorkspaceWidgetAttributes(workspaceWidgetAttributes) {
        if (!this._getIsMutateSuppressed() && this.workspaceWidgetAttributes !== workspaceWidgetAttributes) {
            this._setIsWorkspaceWidgetAttributesMutated(true);
        }
        this.workspaceWidgetAttributes = workspaceWidgetAttributes;
        return (this);
    }
    /**
* ```
     * The endpoint this widget belongs to.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspaceWidgetEndpoint(workspaceWidgetEndpoint, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.workspaceWidgetEndpoint !== workspaceWidgetEndpoint) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(workspaceWidgetEndpoint, persistanceType);
            this._setIsWorkspaceWidgetEndpointMutated(true);
        }
        this.workspaceWidgetEndpoint = workspaceWidgetEndpoint;
        return (this);
    }
    /**
* ```
     * The views for the widget.
* ```
     */
    setWorkspaceWidgetViews(workspaceWidgetViews) {
        if (!this._getIsMutateSuppressed() && this.workspaceWidgetViews !== workspaceWidgetViews) {
            this._setIsWorkspaceWidgetViewsMutated(true);
        }
        this.workspaceWidgetViews = workspaceWidgetViews;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setCurrentState2({
            attributeName: 'activeEndDate',
            value: this.activeEndDate
        });
        this._setCurrentState2({
            attributeName: 'activeStartDate',
            value: this.activeStartDate
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setCurrentState2({
            attributeName: 'mapShowPolygons',
            value: this.mapShowPolygons
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'pandaDocWebHookEnabled',
            value: this.pandaDocWebHookEnabled
        });
        this._setCurrentState2({
            attributeName: 'siteButtonHoverBackgroundColor',
            value: this.siteButtonHoverBackgroundColor
        });
        this._setCurrentState2({
            attributeName: 'siteCustomerSupportNumber',
            value: this.siteCustomerSupportNumber
        });
        this._setCurrentState2({
            attributeName: 'siteDescription',
            value: this.siteDescription
        });
        this._setCurrentState2({
            attributeName: 'siteEmail',
            value: this.siteEmail
        });
        this._setCurrentState2({
            attributeName: 'siteLogoHeight',
            value: this.siteLogoHeight
        });
        this._setCurrentState2({
            attributeName: 'siteLogoPath',
            value: this.siteLogoPath
        });
        this._setCurrentState2({
            attributeName: 'siteUrlPath',
            value: this.siteUrlPath
        });
        this._setCurrentState2({
            attributeName: 'styleButtonEnabledBackgroundColor',
            value: this.styleButtonEnabledBackgroundColor
        });
        this._setCurrentState2({
            attributeName: 'styleButtonEnabledColor',
            value: this.styleButtonEnabledColor
        });
        this._setCurrentState2({
            attributeName: 'styleLayoutBoarderColor',
            value: this.styleLayoutBoarderColor
        });
        this._setCurrentState2({
            attributeName: 'stylePrimaryColor',
            value: this.stylePrimaryColor
        });
        this._setCurrentState2({
            attributeName: 'styleSecondaryColor',
            value: this.styleSecondaryColor
        });
        this._setCurrentState2({
            attributeName: 'styleTeriaryColor',
            value: this.styleTeriaryColor
        });
        this._setCurrentState2({
            attributeName: 'workspaceTemplates',
            value: this.workspaceTemplates
        });
        this._setCurrentState2({
            attributeName: 'workspaceWidgetAttributes',
            value: this.workspaceWidgetAttributes
        });
        this._setCurrentState2({
            attributeName: 'workspaceWidgetEndpoint',
            value: this.workspaceWidgetEndpoint
        });
        this._setCurrentState2({
            attributeName: 'workspaceWidgetViews',
            value: this.workspaceWidgetViews
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setInitializedState2({
            attributeName: 'activeEndDate',
            value: this.activeEndDate
        });
        this._setInitializedState2({
            attributeName: 'activeStartDate',
            value: this.activeStartDate
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setInitializedState2({
            attributeName: 'mapShowPolygons',
            value: this.mapShowPolygons
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'pandaDocWebHookEnabled',
            value: this.pandaDocWebHookEnabled
        });
        this._setInitializedState2({
            attributeName: 'siteButtonHoverBackgroundColor',
            value: this.siteButtonHoverBackgroundColor
        });
        this._setInitializedState2({
            attributeName: 'siteCustomerSupportNumber',
            value: this.siteCustomerSupportNumber
        });
        this._setInitializedState2({
            attributeName: 'siteDescription',
            value: this.siteDescription
        });
        this._setInitializedState2({
            attributeName: 'siteEmail',
            value: this.siteEmail
        });
        this._setInitializedState2({
            attributeName: 'siteLogoHeight',
            value: this.siteLogoHeight
        });
        this._setInitializedState2({
            attributeName: 'siteLogoPath',
            value: this.siteLogoPath
        });
        this._setInitializedState2({
            attributeName: 'siteUrlPath',
            value: this.siteUrlPath
        });
        this._setInitializedState2({
            attributeName: 'styleButtonEnabledBackgroundColor',
            value: this.styleButtonEnabledBackgroundColor
        });
        this._setInitializedState2({
            attributeName: 'styleButtonEnabledColor',
            value: this.styleButtonEnabledColor
        });
        this._setInitializedState2({
            attributeName: 'styleLayoutBoarderColor',
            value: this.styleLayoutBoarderColor
        });
        this._setInitializedState2({
            attributeName: 'stylePrimaryColor',
            value: this.stylePrimaryColor
        });
        this._setInitializedState2({
            attributeName: 'styleSecondaryColor',
            value: this.styleSecondaryColor
        });
        this._setInitializedState2({
            attributeName: 'styleTeriaryColor',
            value: this.styleTeriaryColor
        });
        this._setInitializedState2({
            attributeName: 'workspaceTemplates',
            value: this.workspaceTemplates
        });
        this._setInitializedState2({
            attributeName: 'workspaceWidgetAttributes',
            value: this.workspaceWidgetAttributes
        });
        this._setInitializedState2({
            attributeName: 'workspaceWidgetEndpoint',
            value: this.workspaceWidgetEndpoint
        });
        this._setInitializedState2({
            attributeName: 'workspaceWidgetViews',
            value: this.workspaceWidgetViews
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this._isRemoveFromRelationship);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.activeEndDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.activeStartDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isActive);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.mapShowPolygons);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.pandaDocWebHookEnabled);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.siteButtonHoverBackgroundColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.siteCustomerSupportNumber);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.siteDescription);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.siteEmail);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.siteLogoHeight);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.siteLogoPath);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.siteUrlPath);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.styleButtonEnabledBackgroundColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.styleButtonEnabledColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.styleLayoutBoarderColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.stylePrimaryColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.styleSecondaryColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.styleTeriaryColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspaceTemplates);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspaceWidgetAttributes);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspaceWidgetEndpoint);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspaceWidgetViews);
        return (hashCode_n);
    }
}
exports.WorkspaceWidget = WorkspaceWidget;
WorkspaceWidget.metaDataForWorkspaceWidget = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.WorkspaceWidget", WorkspaceWidget);
//# sourceMappingURL=WorkspaceWidget.js.map