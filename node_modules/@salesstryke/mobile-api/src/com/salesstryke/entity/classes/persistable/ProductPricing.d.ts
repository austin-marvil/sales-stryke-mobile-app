/**
 * This file is auto generated DO NOT EDIT.
 */
import { DurationType } from './DurationType';
import { Organization } from './Organization';
import { Product } from './Product';
import { ProductPricingRecurringPeriodType } from './ProductPricingRecurringPeriodType';
import { Tax } from './Tax';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _activeEndDateIsMutated: string;
    _activeStartDateIsMutated: string;
    _descriptionIsMutated: string;
    _durationTypeIsMutated: string;
    _entityState: string;
    _feeIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isPriceLockedIsMutated: string;
    _isRecurringIsMutated: string;
    _isUrgentIsMutated: string;
    _jsonStateStr: string;
    _maxQuantityAtUnitPriceIsMutated: string;
    _minQuantityAtUnitPriceIsMutated: string;
    _nameIsMutated: string;
    _organizationIsMutated: string;
    _productIsMutated: string;
    _productPricingReccuringPeriodTypeIsMutated: string;
    _recurringUnitPriceIsMutated: string;
    _relationshipPersistableType: string;
    _taxIdIsMutated: string;
    _unitPriceIsMutated: string;
    _useAsUnitPriceIfInQuantityRangeIsMutated: string;
    _weightPerBagIsMutated: string;
    activeEndDate: string;
    activeStartDate: string;
    createdDate: string;
    description: string;
    durationType: string;
    fee: string;
    id: string;
    isPriceLocked: string;
    isRecurring: string;
    isUrgent: string;
    jsonType: string;
    maxQuantityAtUnitPrice: string;
    minQuantityAtUnitPrice: string;
    modifiedDate: string;
    name: string;
    organization: string;
    product: string;
    productPricingReccuringPeriodType: string;
    recurringUnitPrice: string;
    taxId: string;
    unitPrice: string;
    useAsUnitPriceIfInQuantityRange: string;
    weightPerBag: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _activeEndDateIsMutated: string;
    _activeStartDateIsMutated: string;
    _descriptionIsMutated: string;
    _durationTypeIsMutated: string;
    _entityState: string;
    _feeIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isPriceLockedIsMutated: string;
    _isRecurringIsMutated: string;
    _isUrgentIsMutated: string;
    _jsonStateStr: string;
    _maxQuantityAtUnitPriceIsMutated: string;
    _minQuantityAtUnitPriceIsMutated: string;
    _nameIsMutated: string;
    _organizationIsMutated: string;
    _productIsMutated: string;
    _productPricingReccuringPeriodTypeIsMutated: string;
    _recurringUnitPriceIsMutated: string;
    _relationshipPersistableType: string;
    _taxIdIsMutated: string;
    _unitPriceIsMutated: string;
    _useAsUnitPriceIfInQuantityRangeIsMutated: string;
    _weightPerBagIsMutated: string;
    activeEndDate: string;
    activeStartDate: string;
    createdDate: string;
    description: string;
    durationType: string;
    fee: string;
    _id: string;
    isPriceLocked: string;
    isRecurring: string;
    isUrgent: string;
    jsonType: string;
    maxQuantityAtUnitPrice: string;
    minQuantityAtUnitPrice: string;
    modifiedDate: string;
    name: string;
    organization: string;
    product: string;
    productPricingReccuringPeriodType: string;
    recurringUnitPrice: string;
    taxId: string;
    unitPrice: string;
    useAsUnitPriceIfInQuantityRange: string;
    weightPerBag: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class ProductPricing extends JsonApiPersistableBase {
    static metaDataForProductPricing: MetaData;
    private _activeEndDateIsMutated;
    private _activeStartDateIsMutated;
    private _descriptionIsMutated;
    private _durationTypeIsMutated;
    private _feeIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _isPriceLockedIsMutated;
    private _isRecurringIsMutated;
    private _isUrgentIsMutated;
    private _maxQuantityAtUnitPriceIsMutated;
    private _minQuantityAtUnitPriceIsMutated;
    private _nameIsMutated;
    private _organizationIsMutated;
    private _productIsMutated;
    private _productPricingReccuringPeriodTypeIsMutated;
    private _recurringUnitPriceIsMutated;
    private _taxIdIsMutated;
    private _unitPriceIsMutated;
    private _useAsUnitPriceIfInQuantityRangeIsMutated;
    private _weightPerBagIsMutated;
    private activeEndDate;
    private activeStartDate;
    private description;
    private durationType;
    private fee;
    private id;
    private isPriceLocked;
    private isRecurring;
    private isUrgent;
    private jsonType;
    private maxQuantityAtUnitPrice;
    private minQuantityAtUnitPrice;
    private name;
    private organization;
    private product;
    private productPricingReccuringPeriodType;
    private recurringUnitPrice;
    private taxId;
    private unitPrice;
    private useAsUnitPriceIfInQuantityRange;
    private weightPerBag;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): ProductPricing;
    getClassName(): string;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType(): number;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsActiveEndDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsActiveStartDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsDurationTypeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsFeeMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsPriceLockedMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRecurringMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsUrgentMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsMaxQuantityAtUnitPriceMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsMinQuantityAtUnitPriceMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsProductMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsProductPricingReccuringPeriodTypeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRecurringUnitPriceMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsTaxIdMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsUnitPriceMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsUseAsUnitPriceIfInQuantityRangeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsWeightPerBagMutated(): boolean;
    /**
     * Active end date.
     * @returns Date | null
     */
    getActiveEndDate(): Date | null;
    /**
     * Active start date.
     * @returns Date | null
     */
    getActiveStartDate(): Date | null;
    /**
     * Description of product price.
     * @returns string | null
     */
    getDescription(): string | null;
    /**
     * The duration type.
     * @returns DurationType | null
     */
    getDurationType(): DurationType | null;
    /**
     * Product fee.
     * @returns number
     */
    getFee(): number;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * The product price is locked.
     * @returns boolean
     */
    getIsPriceLocked(): boolean;
    /**
     * Product is recurring charge.
     * @returns boolean
     */
    getIsRecurring(): boolean;
    /**
     * The product is an urgent request.
     * @returns boolean
     */
    getIsUrgent(): boolean;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * Max quantity at unit price.
     * @returns number
     */
    getMaxQuantityAtUnitPrice(): number;
    /**
     * Min quantity at unit price.
     * @returns number
     */
    getMinQuantityAtUnitPrice(): number;
    /**
     * Name of product price.
     * @returns string | null
     */
    getName(): string | null;
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * The Product.
     * @returns Product | null
     */
    getProduct(): Product | null;
    /**
     * The organization.
     * @returns ProductPricingRecurringPeriodType | null
     */
    getProductPricingReccuringPeriodType(): ProductPricingRecurringPeriodType | null;
    /**
     * Price per unit for recurring.
     * @returns number
     */
    getRecurringUnitPrice(): number;
    /**
     * The tax type.
     * @returns Tax | null
     */
    getTaxId(): Tax | null;
    /**
     * Unit price.
     * @returns number
     */
    getUnitPrice(): number;
    /**
     * Use as unit price if in quantity range.
     * @returns boolean
     */
    getUseAsUnitPriceIfInQuantityRange(): boolean;
    /**
     * Weight per bag.
     * @returns number
     */
    getWeightPerBag(): number;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): ProductPricing;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): ProductPricing;
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType: number): ProductPricing;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): ProductPricing;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsActiveEndDateMutated(_activeEndDateIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsActiveStartDateMutated(_activeStartDateIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsDurationTypeMutated(_durationTypeIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsFeeMutated(_feeIsMutated: boolean): ProductPricing;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): ProductPricing;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsPriceLockedMutated(_isPriceLockedIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsRecurringMutated(_isRecurringIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsUrgentMutated(_isUrgentIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsMaxQuantityAtUnitPriceMutated(_maxQuantityAtUnitPriceIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsMinQuantityAtUnitPriceMutated(_minQuantityAtUnitPriceIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsProductMutated(_productIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsProductPricingReccuringPeriodTypeMutated(_productPricingReccuringPeriodTypeIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsRecurringUnitPriceMutated(_recurringUnitPriceIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsTaxIdMutated(_taxIdIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsUnitPriceMutated(_unitPriceIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsUseAsUnitPriceIfInQuantityRangeMutated(_useAsUnitPriceIfInQuantityRangeIsMutated: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    _setIsWeightPerBagMutated(_weightPerBagIsMutated: boolean): ProductPricing;
    /**
* ```
     * Active end date.
* ```
     */
    setActiveEndDate(activeEndDate: Date | null): ProductPricing;
    /**
* ```
     * Active start date.
* ```
     */
    setActiveStartDate(activeStartDate: Date | null): ProductPricing;
    /**
* ```
     * Description of product price.
* ```
     */
    setDescription(description: string | null): ProductPricing;
    /**
* ```
     * The duration type.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setDurationType(durationType: DurationType | null, persistanceType?: PersistenceType): ProductPricing;
    /**
* ```
     * Product fee.
* ```
     */
    setFee(fee: number): ProductPricing;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): ProductPricing;
    /**
* ```
     * The product price is locked.
* ```
     */
    setIsPriceLocked(isPriceLocked: boolean): ProductPricing;
    /**
* ```
     * Product is recurring charge.
* ```
     */
    setIsRecurring(isRecurring: boolean): ProductPricing;
    /**
* ```
     * The product is an urgent request.
* ```
     */
    setIsUrgent(isUrgent: boolean): ProductPricing;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): ProductPricing;
    /**
* ```
     * Max quantity at unit price.
* ```
     */
    setMaxQuantityAtUnitPrice(maxQuantityAtUnitPrice: number): ProductPricing;
    /**
* ```
     * Min quantity at unit price.
* ```
     */
    setMinQuantityAtUnitPrice(minQuantityAtUnitPrice: number): ProductPricing;
    /**
* ```
     * Name of product price.
* ```
     */
    setName(name: string | null): ProductPricing;
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): ProductPricing;
    /**
* ```
     * The Product.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setProduct(product: Product | null, persistanceType?: PersistenceType): ProductPricing;
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setProductPricingReccuringPeriodType(productPricingReccuringPeriodType: ProductPricingRecurringPeriodType | null, persistanceType?: PersistenceType): ProductPricing;
    /**
* ```
     * Price per unit for recurring.
* ```
     */
    setRecurringUnitPrice(recurringUnitPrice: number): ProductPricing;
    /**
* ```
     * The tax type.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setTaxId(taxId: Tax | null, persistanceType?: PersistenceType): ProductPricing;
    /**
* ```
     * Unit price.
* ```
     */
    setUnitPrice(unitPrice: number): ProductPricing;
    /**
* ```
     * Use as unit price if in quantity range.
* ```
     */
    setUseAsUnitPriceIfInQuantityRange(useAsUnitPriceIfInQuantityRange: boolean): ProductPricing;
    /**
* ```
     * Weight per bag.
* ```
     */
    setWeightPerBag(weightPerBag: number): ProductPricing;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
