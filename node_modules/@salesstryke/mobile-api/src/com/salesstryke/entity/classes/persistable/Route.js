"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistenceType_1 = require("../../../data/PersistenceType");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._clientRouteIdIsMutated = "_clientRouteIdIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._productCategoryRoutesIsMutated = "_productCategoryRoutesIsMutated";
        this._productColorRoutesIsMutated = "_productColorRoutesIsMutated";
        this._productPricingRoutesIsMutated = "_productPricingRoutesIsMutated";
        this._productRoutesIsMutated = "_productRoutesIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.clientRouteId = "clientRouteId";
        this.createdDate = "createdDate";
        this.id = "id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.productCategoryRoutes = "productCategoryRoutes";
        this.productColorRoutes = "productColorRoutes";
        this.productPricingRoutes = "productPricingRoutes";
        this.productRoutes = "productRoutes";
        this.workspace = "workspace";
    }
}
class MongoVirtual {
    constructor() {
        this.productCategoryRoutes = "productCategoryRoutes";
        this.productColorRoutes = "productColorRoutes";
        this.productPricingRoutes = "productPricingRoutes";
        this.productRoutes = "productRoutes";
    }
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._clientRouteIdIsMutated = "_clientRouteIdIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._productCategoryRoutesIsMutated = "_productCategoryRoutesIsMutated";
        this._productColorRoutesIsMutated = "_productColorRoutesIsMutated";
        this._productPricingRoutesIsMutated = "_productPricingRoutesIsMutated";
        this._productRoutesIsMutated = "_productRoutesIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.clientRouteId = "clientRouteId";
        this.createdDate = "createdDate";
        this._id = "_id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.productCategoryRoutes = "productCategoryRoutes";
        this.productColorRoutes = "productColorRoutes";
        this.productPricingRoutes = "productPricingRoutes";
        this.productRoutes = "productRoutes";
        this.workspace = "workspace";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.Route";
        this.mongDataModeName = "Route";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class Route extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._clientRouteIdIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._productCategoryRoutesIsMutated = false;
        this._productColorRoutesIsMutated = false;
        this._productPricingRoutesIsMutated = false;
        this._productRoutesIsMutated = false;
        this._workspaceIsMutated = false;
        this.clientRouteId = null;
        this.id = null;
        this.jsonType = "com.salesstryke.entity.classes.persistable.Route";
        this.name = null;
        this.organization = null;
        this.productCategoryRoutes = new Array();
        this.productColorRoutes = new Array();
        this.productPricingRoutes = new Array();
        this.productRoutes = new Array();
        this.workspace = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._clientRouteIdIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._productCategoryRoutesIsMutated = false;
        this._productColorRoutesIsMutated = false;
        this._productPricingRoutesIsMutated = false;
        this._productRoutesIsMutated = false;
        this._workspaceIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.Route");
    }
    /**
     * The product category route
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductCategoryRoute(productCategoryRoute, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            productCategoryRoute._trackMutations();
        }
        productCategoryRoute._setRelationshipPersistableType(persistanceType.getId());
        this.productCategoryRoutes.push(productCategoryRoute);
        return (this);
    }
    /**
     * The product category route
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductCategoryRoute(productCategoryRoute, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            productCategoryRoute._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.productCategoryRoutes.findIndex(obj => obj === productCategoryRoute);
            if (index !== -1) {
                this.productCategoryRoutes.splice(index, 1);
            }
            productCategoryRoute._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        productCategoryRoute._setRelationshipPersistableType(persistanceType.getId());
        this.productCategoryRoutes.push(productCategoryRoute);
        return (this);
    }
    /**
     * The product color route
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductColorRoute(productColorRoute, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            productColorRoute._trackMutations();
        }
        productColorRoute._setRelationshipPersistableType(persistanceType.getId());
        this.productColorRoutes.push(productColorRoute);
        return (this);
    }
    /**
     * The product color route
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductColorRoute(productColorRoute, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            productColorRoute._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.productColorRoutes.findIndex(obj => obj === productColorRoute);
            if (index !== -1) {
                this.productColorRoutes.splice(index, 1);
            }
            productColorRoute._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        productColorRoute._setRelationshipPersistableType(persistanceType.getId());
        this.productColorRoutes.push(productColorRoute);
        return (this);
    }
    /**
     * The product pricing route
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductPricingRoute(productPricingRoute, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            productPricingRoute._trackMutations();
        }
        productPricingRoute._setRelationshipPersistableType(persistanceType.getId());
        this.productPricingRoutes.push(productPricingRoute);
        return (this);
    }
    /**
     * The product pricing route
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductPricingRoute(productPricingRoute, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            productPricingRoute._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.productPricingRoutes.findIndex(obj => obj === productPricingRoute);
            if (index !== -1) {
                this.productPricingRoutes.splice(index, 1);
            }
            productPricingRoute._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        productPricingRoute._setRelationshipPersistableType(persistanceType.getId());
        this.productPricingRoutes.push(productPricingRoute);
        return (this);
    }
    /**
     * The product route
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductRoute(productRoute, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            productRoute._trackMutations();
        }
        productRoute._setRelationshipPersistableType(persistanceType.getId());
        this.productRoutes.push(productRoute);
        return (this);
    }
    /**
     * The product route
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductRoute(productRoute, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            productRoute._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.productRoutes.findIndex(obj => obj === productRoute);
            if (index !== -1) {
                this.productRoutes.splice(index, 1);
            }
            productRoute._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        productRoute._setRelationshipPersistableType(persistanceType.getId());
        this.productRoutes.push(productRoute);
        return (this);
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsClientRouteIdMutated() {
        return (this._clientRouteIdIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductCategoryRoutesMutated() {
        return (this._productCategoryRoutesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductColorRoutesMutated() {
        return (this._productColorRoutesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductPricingRoutesMutated() {
        return (this._productPricingRoutesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductRoutesMutated() {
        return (this._productRoutesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceMutated() {
        return (this._workspaceIsMutated);
    }
    /**
     * The client route ID.
     * @returns string | null
     */
    getClientRouteId() {
        return (this.clientRouteId);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The name of the route.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The product category route
     * @returns Array<ProductCategoryRoute>
     */
    getProductCategoryRoutes() {
        return (this.productCategoryRoutes);
    }
    /**
     * The product color route
     * @returns Array<ProductColorRoute>
     */
    getProductColorRoutes() {
        return (this.productColorRoutes);
    }
    /**
     * The product pricing route
     * @returns Array<ProductPricingRoute>
     */
    getProductPricingRoutes() {
        return (this.productPricingRoutes);
    }
    /**
     * The product route
     * @returns Array<ProductRoute>
     */
    getProductRoutes() {
        return (this.productRoutes);
    }
    /**
     * The workspace.
     * @returns Workspace | null
     */
    getWorkspace() {
        return (this.workspace);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsClientRouteIdMutated(_clientRouteIdIsMutated) {
        this._clientRouteIdIsMutated = _clientRouteIdIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductCategoryRoutesMutated(_productCategoryRoutesIsMutated) {
        this._productCategoryRoutesIsMutated = _productCategoryRoutesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductColorRoutesMutated(_productColorRoutesIsMutated) {
        this._productColorRoutesIsMutated = _productColorRoutesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductPricingRoutesMutated(_productPricingRoutesIsMutated) {
        this._productPricingRoutesIsMutated = _productPricingRoutesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductRoutesMutated(_productRoutesIsMutated) {
        this._productRoutesIsMutated = _productRoutesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceMutated(_workspaceIsMutated) {
        this._workspaceIsMutated = _workspaceIsMutated;
        return (this);
    }
    /**
* ```
     * The client route ID.
* ```
     */
    setClientRouteId(clientRouteId) {
        if (!this._getIsMutateSuppressed() && this.clientRouteId !== clientRouteId) {
            this._setIsClientRouteIdMutated(true);
        }
        this.clientRouteId = clientRouteId;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The name of the route.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The product category route
* ```
     */
    setProductCategoryRoutes(productCategoryRoutes) {
        if (!this._getIsMutateSuppressed() && this.productCategoryRoutes !== productCategoryRoutes) {
            this._setIsProductCategoryRoutesMutated(true);
        }
        this.productCategoryRoutes = productCategoryRoutes;
        return (this);
    }
    /**
* ```
     * The product color route
* ```
     */
    setProductColorRoutes(productColorRoutes) {
        if (!this._getIsMutateSuppressed() && this.productColorRoutes !== productColorRoutes) {
            this._setIsProductColorRoutesMutated(true);
        }
        this.productColorRoutes = productColorRoutes;
        return (this);
    }
    /**
* ```
     * The product pricing route
* ```
     */
    setProductPricingRoutes(productPricingRoutes) {
        if (!this._getIsMutateSuppressed() && this.productPricingRoutes !== productPricingRoutes) {
            this._setIsProductPricingRoutesMutated(true);
        }
        this.productPricingRoutes = productPricingRoutes;
        return (this);
    }
    /**
* ```
     * The product route
* ```
     */
    setProductRoutes(productRoutes) {
        if (!this._getIsMutateSuppressed() && this.productRoutes !== productRoutes) {
            this._setIsProductRoutesMutated(true);
        }
        this.productRoutes = productRoutes;
        return (this);
    }
    /**
* ```
     * The workspace.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspace(workspace, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.workspace !== workspace) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(workspace, persistanceType);
            this._setIsWorkspaceMutated(true);
        }
        this.workspace = workspace;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'clientRouteId',
            value: this.clientRouteId
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'productCategoryRoutes',
            value: this.productCategoryRoutes
        });
        this._setCurrentState2({
            attributeName: 'productColorRoutes',
            value: this.productColorRoutes
        });
        this._setCurrentState2({
            attributeName: 'productPricingRoutes',
            value: this.productPricingRoutes
        });
        this._setCurrentState2({
            attributeName: 'productRoutes',
            value: this.productRoutes
        });
        this._setCurrentState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'clientRouteId',
            value: this.clientRouteId
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'productCategoryRoutes',
            value: this.productCategoryRoutes
        });
        this._setInitializedState2({
            attributeName: 'productColorRoutes',
            value: this.productColorRoutes
        });
        this._setInitializedState2({
            attributeName: 'productPricingRoutes',
            value: this.productPricingRoutes
        });
        this._setInitializedState2({
            attributeName: 'productRoutes',
            value: this.productRoutes
        });
        this._setInitializedState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.clientRouteId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productCategoryRoutes);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productColorRoutes);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productPricingRoutes);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productRoutes);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspace);
        return (hashCode_n);
    }
}
exports.Route = Route;
Route.metaDataForRoute = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.Route", Route);
//# sourceMappingURL=Route.js.map