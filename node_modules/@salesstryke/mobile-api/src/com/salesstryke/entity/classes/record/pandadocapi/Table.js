"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const ClassFor_1 = require("../../../../data/ClassFor");
const JsonApiRecordBase_1 = require("../../../../jsonApi/JsonApiRecordBase");
class EntityAttributes {
    constructor() {
        this._nameIsMutated = "_nameIsMutated";
        this._totalIsMutated = "_totalIsMutated";
        this.items = "items";
        this.name = "name";
        this.summary = "summary";
        this.total = "total";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._nameIsMutated = "_nameIsMutated";
        this._totalIsMutated = "_totalIsMutated";
        this.items = "items";
        this.name = "name";
        this.summary = "summary";
        this.total = "total";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.record.pandadocapi.Table";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class Table extends JsonApiRecordBase_1.JsonApiRecordBase {
    constructor() {
        super();
        this._nameIsMutated = false;
        this._totalIsMutated = false;
        this.items = new Array();
        this.name = null;
        this.summary = null;
        this.total = 0;
    }
    /**
     * Returns true if any data has been modified.
     * @returns
     */
    _getIsMutated() {
        let isMutated_b = false;
        return (isMutated_b);
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.record.pandadocapi.Table");
    }
    /**
     * The Organizations's employees.
     */
    addItem(item) {
        this.items.push(item);
        return (this);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsTotalMutated() {
        return (this._totalIsMutated);
    }
    /**
     * The Organizations's employees.
     * @returns Array<Item>
     */
    getItems() {
        return (this.items);
    }
    /**
     * The name of the document.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The summary for the document.
     * @returns Summary | null
     */
    getSummary() {
        return (this.summary);
    }
    /**
     * The total.
     * @returns number
     */
    getTotal() {
        return (this.total);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsTotalMutated(_totalIsMutated) {
        this._totalIsMutated = _totalIsMutated;
        return (this);
    }
    /**
* ```
     * The Organizations's employees.
* ```
     */
    setItems(items) {
        this.items = items;
        return (this);
    }
    /**
* ```
     * The name of the document.
* ```
     */
    setName(name) {
        if (this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The summary for the document.
* ```
     */
    setSummary(summary) {
        this.summary = summary;
        return (this);
    }
    /**
* ```
     * The total.
* ```
     */
    setTotal(total) {
        if (this.total !== total) {
            this._setIsTotalMutated(true);
        }
        this.total = total;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        /**
                hashCode_n += HashCodeUtil.toHashCode(this._nameIsMutated);
                hashCode_n += HashCodeUtil.toHashCode(this._totalIsMutated);
                hashCode_n += HashCodeUtil.toHashCode(this.name);
                hashCode_n += HashCodeUtil.toHashCode(this.total);
        
        */
        return (hashCode_n);
    }
}
exports.Table = Table;
Table.metaDataForTable = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.record.pandadocapi.Table", Table);
//# sourceMappingURL=Table.js.map