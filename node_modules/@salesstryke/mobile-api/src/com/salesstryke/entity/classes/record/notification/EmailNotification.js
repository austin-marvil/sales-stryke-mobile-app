"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailNotification = void 0;
const ClassFor_1 = require("../../../../data/ClassFor");
const JsonApiRecordBase_1 = require("../../../../jsonApi/JsonApiRecordBase");
const HashCodeUtil_1 = require("../../../../utils/HashCodeUtil");
class EntityAttributes {
    constructor() {
        this._ccRecipientIsMutated = "_ccRecipientIsMutated";
        this._clientNameIsMutated = "_clientNameIsMutated";
        this._emailRecipientIsMutated = "_emailRecipientIsMutated";
        this._messageIsMutated = "_messageIsMutated";
        this._subjectIsMutated = "_subjectIsMutated";
        this._titleIsMutated = "_titleIsMutated";
        this.ccRecipient = "ccRecipient";
        this.clientName = "clientName";
        this.customerDatas = "customerDatas";
        this.emailRecipient = "emailRecipient";
        this.errors = "errors";
        this.jsonType = "jsonType";
        this.message = "message";
        this.selectedDatas = "selectedDatas";
        this.subject = "subject";
        this.title = "title";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._ccRecipientIsMutated = "_ccRecipientIsMutated";
        this._clientNameIsMutated = "_clientNameIsMutated";
        this._emailRecipientIsMutated = "_emailRecipientIsMutated";
        this._messageIsMutated = "_messageIsMutated";
        this._subjectIsMutated = "_subjectIsMutated";
        this._titleIsMutated = "_titleIsMutated";
        this.ccRecipient = "ccRecipient";
        this.clientName = "clientName";
        this.customerDatas = "customerDatas";
        this.emailRecipient = "emailRecipient";
        this.errors = "errors";
        this.jsonType = "jsonType";
        this.message = "message";
        this.selectedDatas = "selectedDatas";
        this.subject = "subject";
        this.title = "title";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.record.notification.EmailNotification";
        this.mongDataModeName = "EmailNotification";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class EmailNotification extends JsonApiRecordBase_1.JsonApiRecordBase {
    constructor(p) {
        super(p);
        this._ccRecipientIsMutated = false;
        this._clientNameIsMutated = false;
        this._emailRecipientIsMutated = false;
        this._messageIsMutated = false;
        this._subjectIsMutated = false;
        this._titleIsMutated = false;
        this.ccRecipient = null;
        this.clientName = null;
        this.customerDatas = new Array();
        this.emailRecipient = null;
        this.errors = new Array();
        this.jsonType = "com.salesstryke.entity.classes.record.notification.EmailNotification";
        this.message = null;
        this.selectedDatas = new Array();
        this.subject = null;
        this.title = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.record.notification.EmailNotification");
    }
    /**
     * customerData of the email
     */
    addCustomerData(customerData) {
        this.customerDatas.push(customerData);
        return (this);
    }
    /**
     * The error that occur during the server
     */
    addError(error) {
        this.errors.push(error);
        return (this);
    }
    /**
     * The selectedData that occur during the server
     */
    addSelectedData(selectedData) {
        this.selectedDatas.push(selectedData);
        return (this);
    }
    /**
     *
     * @returns boolean
     */
    _getIsCcRecipientMutated() {
        return (this._ccRecipientIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsClientNameMutated() {
        return (this._clientNameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsEmailRecipientMutated() {
        return (this._emailRecipientIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsMessageMutated() {
        return (this._messageIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSubjectMutated() {
        return (this._subjectIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsTitleMutated() {
        return (this._titleIsMutated);
    }
    /**
     * ccRecipient of the notification
     * @returns string | null
     */
    getCcRecipient() {
        return (this.ccRecipient);
    }
    /**
     * clientName of the email
     * @returns string | null
     */
    getClientName() {
        return (this.clientName);
    }
    /**
     * customerData of the email
     * @returns Array<EmailNotificationCustomerData>
     */
    getCustomerDatas() {
        return (this.customerDatas);
    }
    /**
     * emailRecipient of the notification
     * @returns string | null
     */
    getEmailRecipient() {
        return (this.emailRecipient);
    }
    /**
     * The error that occur during the server
     * @returns Array<EmailNotificationError>
     */
    getErrors() {
        return (this.errors);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * message of the email
     * @returns string | null
     */
    getMessage() {
        return (this.message);
    }
    /**
     * The selectedData that occur during the server
     * @returns Array<EmailNotificationSelectedData>
     */
    getSelectedDatas() {
        return (this.selectedDatas);
    }
    /**
     * Subject of the email
     * @returns string | null
     */
    getSubject() {
        return (this.subject);
    }
    /**
     * title of the email
     * @returns string | null
     */
    getTitle() {
        return (this.title);
    }
    /**
* ```
     *
* ```
     */
    _setIsCcRecipientMutated(_ccRecipientIsMutated) {
        this._ccRecipientIsMutated = _ccRecipientIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsClientNameMutated(_clientNameIsMutated) {
        this._clientNameIsMutated = _clientNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEmailRecipientMutated(_emailRecipientIsMutated) {
        this._emailRecipientIsMutated = _emailRecipientIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsMessageMutated(_messageIsMutated) {
        this._messageIsMutated = _messageIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSubjectMutated(_subjectIsMutated) {
        this._subjectIsMutated = _subjectIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsTitleMutated(_titleIsMutated) {
        this._titleIsMutated = _titleIsMutated;
        return (this);
    }
    /**
* ```
     * ccRecipient of the notification
* ```
     */
    setCcRecipient(ccRecipient) {
        if (this.ccRecipient !== ccRecipient) {
            this._setIsCcRecipientMutated(true);
        }
        this.ccRecipient = ccRecipient;
        return (this);
    }
    /**
* ```
     * clientName of the email
* ```
     */
    setClientName(clientName) {
        if (this.clientName !== clientName) {
            this._setIsClientNameMutated(true);
        }
        this.clientName = clientName;
        return (this);
    }
    /**
* ```
     * customerData of the email
* ```
     */
    setCustomerDatas(customerDatas) {
        this.customerDatas = customerDatas;
        return (this);
    }
    /**
* ```
     * emailRecipient of the notification
* ```
     */
    setEmailRecipient(emailRecipient) {
        if (this.emailRecipient !== emailRecipient) {
            this._setIsEmailRecipientMutated(true);
        }
        this.emailRecipient = emailRecipient;
        return (this);
    }
    /**
* ```
     * The error that occur during the server
* ```
     */
    setErrors(errors) {
        this.errors = errors;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * message of the email
* ```
     */
    setMessage(message) {
        if (this.message !== message) {
            this._setIsMessageMutated(true);
        }
        this.message = message;
        return (this);
    }
    /**
* ```
     * The selectedData that occur during the server
* ```
     */
    setSelectedDatas(selectedDatas) {
        this.selectedDatas = selectedDatas;
        return (this);
    }
    /**
* ```
     * Subject of the email
* ```
     */
    setSubject(subject) {
        if (this.subject !== subject) {
            this._setIsSubjectMutated(true);
        }
        this.subject = subject;
        return (this);
    }
    /**
* ```
     * title of the email
* ```
     */
    setTitle(title) {
        if (this.title !== title) {
            this._setIsTitleMutated(true);
        }
        this.title = title;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: 'ccRecipient',
            value: this.ccRecipient
        });
        this._setCurrentState2({
            attributeName: 'clientName',
            value: this.clientName
        });
        this._setCurrentState2({
            attributeName: 'customerDatas',
            value: this.customerDatas
        });
        this._setCurrentState2({
            attributeName: 'emailRecipient',
            value: this.emailRecipient
        });
        this._setCurrentState2({
            attributeName: 'errors',
            value: this.errors
        });
        this._setCurrentState2({
            attributeName: 'message',
            value: this.message
        });
        this._setCurrentState2({
            attributeName: 'selectedDatas',
            value: this.selectedDatas
        });
        this._setCurrentState2({
            attributeName: 'subject',
            value: this.subject
        });
        this._setCurrentState2({
            attributeName: 'title',
            value: this.title
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: 'ccRecipient',
            value: this.ccRecipient
        });
        this._setInitializedState2({
            attributeName: 'clientName',
            value: this.clientName
        });
        this._setInitializedState2({
            attributeName: 'customerDatas',
            value: this.customerDatas
        });
        this._setInitializedState2({
            attributeName: 'emailRecipient',
            value: this.emailRecipient
        });
        this._setInitializedState2({
            attributeName: 'errors',
            value: this.errors
        });
        this._setInitializedState2({
            attributeName: 'message',
            value: this.message
        });
        this._setInitializedState2({
            attributeName: 'selectedDatas',
            value: this.selectedDatas
        });
        this._setInitializedState2({
            attributeName: 'subject',
            value: this.subject
        });
        this._setInitializedState2({
            attributeName: 'title',
            value: this.title
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.ccRecipient);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.clientName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.customerDatas);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.emailRecipient);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.errors);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.message);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.selectedDatas);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.subject);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.title);
        return (hashCode_n);
    }
}
exports.EmailNotification = EmailNotification;
EmailNotification.metaDataForEmailNotification = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.record.notification.EmailNotification", EmailNotification);
//# sourceMappingURL=EmailNotification.js.map