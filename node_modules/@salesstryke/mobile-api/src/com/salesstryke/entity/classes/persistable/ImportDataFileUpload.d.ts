/**
 * This file is auto generated DO NOT EDIT.
 */
import { ImportDataMap } from './ImportDataMap';
import { Organization } from './Organization';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _entityState: string;
    _fileNameIsMutated: string;
    _idSetBySystem: string;
    _importDataMapIsMutated: string;
    _importStatusIsMutated: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _jsonStateStr: string;
    _nameIsMutated: string;
    _organizationIsMutated: string;
    _presignedUrlIsMutated: string;
    _relationshipPersistableType: string;
    _s3BucketNameIsMutated: string;
    createdDate: string;
    fileName: string;
    id: string;
    importDataMap: string;
    importStatus: string;
    jsonType: string;
    modifiedDate: string;
    name: string;
    organization: string;
    presignedUrl: string;
    s3BucketName: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _entityState: string;
    _fileNameIsMutated: string;
    _idSetBySystem: string;
    _importDataMapIsMutated: string;
    _importStatusIsMutated: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _jsonStateStr: string;
    _nameIsMutated: string;
    _organizationIsMutated: string;
    _presignedUrlIsMutated: string;
    _relationshipPersistableType: string;
    _s3BucketNameIsMutated: string;
    createdDate: string;
    fileName: string;
    _id: string;
    importDataMap: string;
    importStatus: string;
    jsonType: string;
    modifiedDate: string;
    name: string;
    organization: string;
    presignedUrl: string;
    s3BucketName: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class ImportDataFileUpload extends JsonApiPersistableBase {
    static metaDataForImportDataFileUpload: MetaData;
    private _fileNameIsMutated;
    private _idSetBySystem;
    private _importDataMapIsMutated;
    private _importStatusIsMutated;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _nameIsMutated;
    private _organizationIsMutated;
    private _presignedUrlIsMutated;
    private _s3BucketNameIsMutated;
    private fileName;
    private id;
    private importDataMap;
    private importStatus;
    private jsonType;
    private name;
    private organization;
    private presignedUrl;
    private s3BucketName;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): ImportDataFileUpload;
    getClassName(): string;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType(): number;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsFileNameMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsImportDataMapMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsImportStatusMutated(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsPresignedUrlMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsS3BucketNameMutated(): boolean;
    /**
     * The import file name.
     * @returns string | null
     */
    getFileName(): string | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * The ImportDataMap for the data.
     * @returns ImportDataMap | null
     */
    getImportDataMap(): ImportDataMap | null;
    /**
     * The import status.
     * @returns string | null
     */
    getImportStatus(): string | null;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The original file name.
     * @returns string | null
     */
    getName(): string | null;
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * The pre signed url for s3.
     * @returns string | null
     */
    getPresignedUrl(): string | null;
    /**
     * The S3 Bucket name.
     * @returns string | null
     */
    getS3BucketName(): string | null;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): ImportDataFileUpload;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): ImportDataFileUpload;
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType: number): ImportDataFileUpload;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): ImportDataFileUpload;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsFileNameMutated(_fileNameIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsImportDataMapMutated(_importDataMapIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsImportStatusMutated(_importStatusIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsPresignedUrlMutated(_presignedUrlIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    _setIsS3BucketNameMutated(_s3BucketNameIsMutated: boolean): ImportDataFileUpload;
    /**
* ```
     * The import file name.
* ```
     */
    setFileName(fileName: string | null): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): ImportDataFileUpload;
    /**
* ```
     * The ImportDataMap for the data.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setImportDataMap(importDataMap: ImportDataMap | null, persistanceType?: PersistenceType): ImportDataFileUpload;
    /**
* ```
     * The import status.
* ```
     */
    setImportStatus(importStatus: string | null): ImportDataFileUpload;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): ImportDataFileUpload;
    /**
* ```
     * The original file name.
* ```
     */
    setName(name: string | null): ImportDataFileUpload;
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): ImportDataFileUpload;
    /**
* ```
     * The pre signed url for s3.
* ```
     */
    setPresignedUrl(presignedUrl: string | null): ImportDataFileUpload;
    /**
* ```
     * The S3 Bucket name.
* ```
     */
    setS3BucketName(s3BucketName: string | null): ImportDataFileUpload;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
