"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workspace = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistenceType_1 = require("../../../data/PersistenceType");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._deploymentDomainNameIsMutated = "_deploymentDomainNameIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRoutingSoftwareSyncActiveIsMutated = "_isRoutingSoftwareSyncActiveIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._pandaDocAccessTokenIsMutated = "_pandaDocAccessTokenIsMutated";
        this._pandaDocClientIdIsMutated = "_pandaDocClientIdIsMutated";
        this._pandaDocClientSecretIsMutated = "_pandaDocClientSecretIsMutated";
        this._pandaDocCronJobLockKeyIsMutated = "_pandaDocCronJobLockKeyIsMutated";
        this._pandaDocLastSyncTimestampIsMutated = "_pandaDocLastSyncTimestampIsMutated";
        this._pandaDocRefreshTokenIsMutated = "_pandaDocRefreshTokenIsMutated";
        this._receiverEmailsBccIsMutated = "_receiverEmailsBccIsMutated";
        this._receiverEmailsIsMutated = "_receiverEmailsIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._routingSoftwareCronJobLockKeyIsMutated = "_routingSoftwareCronJobLockKeyIsMutated";
        this._routingSoftwareLastSyncTimestampIsMutated = "_routingSoftwareLastSyncTimestampIsMutated";
        this._routingSoftwareTypeIsMutated = "_routingSoftwareTypeIsMutated";
        this._routingSoftwareVersionIsMutated = "_routingSoftwareVersionIsMutated";
        this._workspaceDocumentsIsMutated = "_workspaceDocumentsIsMutated";
        this._workspaceTemplatesIsMutated = "_workspaceTemplatesIsMutated";
        this.createdDate = "createdDate";
        this.deploymentDomainName = "deploymentDomainName";
        this.description = "description";
        this.id = "id";
        this.isActive = "isActive";
        this.isRoutingSoftwareSyncActive = "isRoutingSoftwareSyncActive";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.pandaDocAccessToken = "pandaDocAccessToken";
        this.pandaDocClientId = "pandaDocClientId";
        this.pandaDocClientSecret = "pandaDocClientSecret";
        this.pandaDocCronJobLockKey = "pandaDocCronJobLockKey";
        this.pandaDocLastSyncTimestamp = "pandaDocLastSyncTimestamp";
        this.pandaDocRefreshToken = "pandaDocRefreshToken";
        this.receiverEmails = "receiverEmails";
        this.receiverEmailsBcc = "receiverEmailsBcc";
        this.routingSoftwareCronJobLockKey = "routingSoftwareCronJobLockKey";
        this.routingSoftwareLastSyncTimestamp = "routingSoftwareLastSyncTimestamp";
        this.routingSoftwareType = "routingSoftwareType";
        this.routingSoftwareVersion = "routingSoftwareVersion";
        this.workspaceDocuments = "workspaceDocuments";
        this.workspaceTemplates = "workspaceTemplates";
    }
}
class MongoVirtual {
    constructor() {
        this.workspaceDocuments = "workspaceDocuments";
        this.workspaceTemplates = "workspaceTemplates";
    }
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._deploymentDomainNameIsMutated = "_deploymentDomainNameIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRoutingSoftwareSyncActiveIsMutated = "_isRoutingSoftwareSyncActiveIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._pandaDocAccessTokenIsMutated = "_pandaDocAccessTokenIsMutated";
        this._pandaDocClientIdIsMutated = "_pandaDocClientIdIsMutated";
        this._pandaDocClientSecretIsMutated = "_pandaDocClientSecretIsMutated";
        this._pandaDocCronJobLockKeyIsMutated = "_pandaDocCronJobLockKeyIsMutated";
        this._pandaDocLastSyncTimestampIsMutated = "_pandaDocLastSyncTimestampIsMutated";
        this._pandaDocRefreshTokenIsMutated = "_pandaDocRefreshTokenIsMutated";
        this._receiverEmailsBccIsMutated = "_receiverEmailsBccIsMutated";
        this._receiverEmailsIsMutated = "_receiverEmailsIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._routingSoftwareCronJobLockKeyIsMutated = "_routingSoftwareCronJobLockKeyIsMutated";
        this._routingSoftwareLastSyncTimestampIsMutated = "_routingSoftwareLastSyncTimestampIsMutated";
        this._routingSoftwareTypeIsMutated = "_routingSoftwareTypeIsMutated";
        this._routingSoftwareVersionIsMutated = "_routingSoftwareVersionIsMutated";
        this._workspaceDocumentsIsMutated = "_workspaceDocumentsIsMutated";
        this._workspaceTemplatesIsMutated = "_workspaceTemplatesIsMutated";
        this.createdDate = "createdDate";
        this.deploymentDomainName = "deploymentDomainName";
        this.description = "description";
        this._id = "_id";
        this.isActive = "isActive";
        this.isRoutingSoftwareSyncActive = "isRoutingSoftwareSyncActive";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.pandaDocAccessToken = "pandaDocAccessToken";
        this.pandaDocClientId = "pandaDocClientId";
        this.pandaDocClientSecret = "pandaDocClientSecret";
        this.pandaDocCronJobLockKey = "pandaDocCronJobLockKey";
        this.pandaDocLastSyncTimestamp = "pandaDocLastSyncTimestamp";
        this.pandaDocRefreshToken = "pandaDocRefreshToken";
        this.receiverEmails = "receiverEmails";
        this.receiverEmailsBcc = "receiverEmailsBcc";
        this.routingSoftwareCronJobLockKey = "routingSoftwareCronJobLockKey";
        this.routingSoftwareLastSyncTimestamp = "routingSoftwareLastSyncTimestamp";
        this.routingSoftwareType = "routingSoftwareType";
        this.routingSoftwareVersion = "routingSoftwareVersion";
        this.workspaceDocuments = "workspaceDocuments";
        this.workspaceTemplates = "workspaceTemplates";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.Workspace";
        this.mongDataModeName = "Workspace";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class Workspace extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._deploymentDomainNameIsMutated = false;
        this._descriptionIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isActiveIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isRoutingSoftwareSyncActiveIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._pandaDocAccessTokenIsMutated = false;
        this._pandaDocClientIdIsMutated = false;
        this._pandaDocClientSecretIsMutated = false;
        this._pandaDocCronJobLockKeyIsMutated = false;
        this._pandaDocLastSyncTimestampIsMutated = false;
        this._pandaDocRefreshTokenIsMutated = false;
        this._receiverEmailsBccIsMutated = false;
        this._receiverEmailsIsMutated = false;
        this._routingSoftwareCronJobLockKeyIsMutated = false;
        this._routingSoftwareLastSyncTimestampIsMutated = false;
        this._routingSoftwareTypeIsMutated = false;
        this._routingSoftwareVersionIsMutated = false;
        this._workspaceDocumentsIsMutated = false;
        this._workspaceTemplatesIsMutated = false;
        this.deploymentDomainName = null;
        this.description = null;
        this.id = null;
        this.isActive = undefined;
        this.isRoutingSoftwareSyncActive = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.Workspace";
        this.name = null;
        this.organization = null;
        this.pandaDocAccessToken = null;
        this.pandaDocClientId = null;
        this.pandaDocClientSecret = null;
        this.pandaDocCronJobLockKey = null;
        this.pandaDocLastSyncTimestamp = null;
        this.pandaDocRefreshToken = null;
        this.receiverEmails = new Array();
        this.receiverEmailsBcc = new Array();
        this.routingSoftwareCronJobLockKey = null;
        this.routingSoftwareLastSyncTimestamp = null;
        this.routingSoftwareType = null;
        this.routingSoftwareVersion = null;
        this.workspaceDocuments = new Array();
        this.workspaceTemplates = new Array();
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._deploymentDomainNameIsMutated = false;
        this._descriptionIsMutated = false;
        this._isActiveIsMutated = false;
        this._isRoutingSoftwareSyncActiveIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._pandaDocAccessTokenIsMutated = false;
        this._pandaDocClientIdIsMutated = false;
        this._pandaDocClientSecretIsMutated = false;
        this._pandaDocCronJobLockKeyIsMutated = false;
        this._pandaDocLastSyncTimestampIsMutated = false;
        this._pandaDocRefreshTokenIsMutated = false;
        this._receiverEmailsIsMutated = false;
        this._receiverEmailsBccIsMutated = false;
        this._routingSoftwareCronJobLockKeyIsMutated = false;
        this._routingSoftwareLastSyncTimestampIsMutated = false;
        this._routingSoftwareTypeIsMutated = false;
        this._routingSoftwareVersionIsMutated = false;
        this._workspaceDocumentsIsMutated = false;
        this._workspaceTemplatesIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.Workspace");
    }
    /**
     * The email address to send email to.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addReceiverEmail(receiverEmail, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            receiverEmail._trackMutations();
        }
        receiverEmail._setRelationshipPersistableType(persistanceType.getId());
        this.receiverEmails.push(receiverEmail);
        return (this);
    }
    /**
     * The email address to send email to.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeReceiverEmail(receiverEmail, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            receiverEmail._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.receiverEmails.findIndex(obj => obj === receiverEmail);
            if (index !== -1) {
                this.receiverEmails.splice(index, 1);
            }
            receiverEmail._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        receiverEmail._setRelationshipPersistableType(persistanceType.getId());
        this.receiverEmails.push(receiverEmail);
        return (this);
    }
    /**
     * The email address to send bcc email to.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addReceiverEmailBcc(receiverEmailBcc, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            receiverEmailBcc._trackMutations();
        }
        receiverEmailBcc._setRelationshipPersistableType(persistanceType.getId());
        this.receiverEmailsBcc.push(receiverEmailBcc);
        return (this);
    }
    /**
     * The email address to send bcc email to.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeReceiverEmailBcc(receiverEmailBcc, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            receiverEmailBcc._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.receiverEmailsBcc.findIndex(obj => obj === receiverEmailBcc);
            if (index !== -1) {
                this.receiverEmailsBcc.splice(index, 1);
            }
            receiverEmailBcc._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        receiverEmailBcc._setRelationshipPersistableType(persistanceType.getId());
        this.receiverEmailsBcc.push(receiverEmailBcc);
        return (this);
    }
    /**
     * The documents for the workspace.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspaceDocument(workspaceDocument, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            workspaceDocument._trackMutations();
        }
        workspaceDocument._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceDocuments.push(workspaceDocument);
        return (this);
    }
    /**
     * The documents for the workspace.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspaceDocument(workspaceDocument, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            workspaceDocument._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.workspaceDocuments.findIndex(obj => obj === workspaceDocument);
            if (index !== -1) {
                this.workspaceDocuments.splice(index, 1);
            }
            workspaceDocument._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        workspaceDocument._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceDocuments.push(workspaceDocument);
        return (this);
    }
    /**
     * The workspace templates for the workspace.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspaceTemplate(workspaceTemplate, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            workspaceTemplate._trackMutations();
        }
        workspaceTemplate._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceTemplates.push(workspaceTemplate);
        return (this);
    }
    /**
     * The workspace templates for the workspace.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspaceTemplate(workspaceTemplate, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            workspaceTemplate._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.workspaceTemplates.findIndex(obj => obj === workspaceTemplate);
            if (index !== -1) {
                this.workspaceTemplates.splice(index, 1);
            }
            workspaceTemplate._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        workspaceTemplate._setRelationshipPersistableType(persistanceType.getId());
        this.workspaceTemplates.push(workspaceTemplate);
        return (this);
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsDeploymentDomainNameMutated() {
        return (this._deploymentDomainNameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated() {
        return (this._isActiveIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRoutingSoftwareSyncActiveMutated() {
        return (this._isRoutingSoftwareSyncActiveIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPandaDocAccessTokenMutated() {
        return (this._pandaDocAccessTokenIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPandaDocClientIdMutated() {
        return (this._pandaDocClientIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPandaDocClientSecretMutated() {
        return (this._pandaDocClientSecretIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPandaDocCronJobLockKeyMutated() {
        return (this._pandaDocCronJobLockKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPandaDocLastSyncTimestampMutated() {
        return (this._pandaDocLastSyncTimestampIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPandaDocRefreshTokenMutated() {
        return (this._pandaDocRefreshTokenIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsReceiverEmailsBccMutated() {
        return (this._receiverEmailsBccIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsReceiverEmailsMutated() {
        return (this._receiverEmailsIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRoutingSoftwareCronJobLockKeyMutated() {
        return (this._routingSoftwareCronJobLockKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRoutingSoftwareLastSyncTimestampMutated() {
        return (this._routingSoftwareLastSyncTimestampIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRoutingSoftwareTypeMutated() {
        return (this._routingSoftwareTypeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRoutingSoftwareVersionMutated() {
        return (this._routingSoftwareVersionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceDocumentsMutated() {
        return (this._workspaceDocumentsIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceTemplatesMutated() {
        return (this._workspaceTemplatesIsMutated);
    }
    /**
     * The domain where the wiget will be deployed.
     * @returns string | null
     */
    getDeploymentDomainName() {
        return (this.deploymentDomainName);
    }
    /**
     * The workspace description.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * Identifies if the WorkSpace is active.
     * @returns boolean
     */
    getIsActive() {
        return ((this.isActive === undefined) ? false : this.isActive);
    }
    /**
     * Identifies if the workspace is syncing to the routing software
     * @returns boolean
     */
    getIsRoutingSoftwareSyncActive() {
        return ((this.isRoutingSoftwareSyncActive === undefined) ? false : this.isRoutingSoftwareSyncActive);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The data type
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The tenant Organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The PandaDoc access_token.
     * @returns string | null
     */
    getPandaDocAccessToken() {
        return (this.pandaDocAccessToken);
    }
    /**
     * The PandaDoc client_id.
     * @returns string | null
     */
    getPandaDocClientId() {
        return (this.pandaDocClientId);
    }
    /**
     * The PandaDoc client_secret.
     * @returns string | null
     */
    getPandaDocClientSecret() {
        return (this.pandaDocClientSecret);
    }
    /**
     * The cron job is currently on a system that has multiple instances running. Each thread has a random timer to request the lock, the first one in wins. This will be moved to another services as time permits.
     * @returns string | null
     */
    getPandaDocCronJobLockKey() {
        return (this.pandaDocCronJobLockKey);
    }
    /**
     * The timestamp that indicates how far back in time to query to sync data.
     * @returns string | null
     */
    getPandaDocLastSyncTimestamp() {
        return (this.pandaDocLastSyncTimestamp);
    }
    /**
     * The PandaDoc refresh_token.
     * @returns string | null
     */
    getPandaDocRefreshToken() {
        return (this.pandaDocRefreshToken);
    }
    /**
     * The email address to send email to.
     * @returns Array<EmailAddress>
     */
    getReceiverEmails() {
        return (this.receiverEmails);
    }
    /**
     * The email address to send bcc email to.
     * @returns Array<EmailAddress>
     */
    getReceiverEmailsBcc() {
        return (this.receiverEmailsBcc);
    }
    /**
     * The cron job is currently on a system that has multiple instances running. Each thread has a random timer to request the lock, the first one in wins.
     * @returns string | null
     */
    getRoutingSoftwareCronJobLockKey() {
        return (this.routingSoftwareCronJobLockKey);
    }
    /**
     * The timestamp that indicates how far back in time to query to sync data.
     * @returns string | null
     */
    getRoutingSoftwareLastSyncTimestamp() {
        return (this.routingSoftwareLastSyncTimestamp);
    }
    /**
     * The RoutingSoftwareType.
     * @returns RoutingSoftwareType | null
     */
    getRoutingSoftwareType() {
        return (this.routingSoftwareType);
    }
    /**
     * The RoutingSoftwareVersion.
     * @returns RoutingSoftwareVersion | null
     */
    getRoutingSoftwareVersion() {
        return (this.routingSoftwareVersion);
    }
    /**
     * The documents for the workspace.
     * @returns Array<WorkspaceDocument>
     */
    getWorkspaceDocuments() {
        return (this.workspaceDocuments);
    }
    /**
     * The workspace templates for the workspace.
     * @returns Array<WorkspaceTemplate>
     */
    getWorkspaceTemplates() {
        return (this.workspaceTemplates);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDeploymentDomainNameMutated(_deploymentDomainNameIsMutated) {
        this._deploymentDomainNameIsMutated = _deploymentDomainNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated) {
        this._isActiveIsMutated = _isActiveIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRoutingSoftwareSyncActiveMutated(_isRoutingSoftwareSyncActiveIsMutated) {
        this._isRoutingSoftwareSyncActiveIsMutated = _isRoutingSoftwareSyncActiveIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPandaDocAccessTokenMutated(_pandaDocAccessTokenIsMutated) {
        this._pandaDocAccessTokenIsMutated = _pandaDocAccessTokenIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPandaDocClientIdMutated(_pandaDocClientIdIsMutated) {
        this._pandaDocClientIdIsMutated = _pandaDocClientIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPandaDocClientSecretMutated(_pandaDocClientSecretIsMutated) {
        this._pandaDocClientSecretIsMutated = _pandaDocClientSecretIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPandaDocCronJobLockKeyMutated(_pandaDocCronJobLockKeyIsMutated) {
        this._pandaDocCronJobLockKeyIsMutated = _pandaDocCronJobLockKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPandaDocLastSyncTimestampMutated(_pandaDocLastSyncTimestampIsMutated) {
        this._pandaDocLastSyncTimestampIsMutated = _pandaDocLastSyncTimestampIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPandaDocRefreshTokenMutated(_pandaDocRefreshTokenIsMutated) {
        this._pandaDocRefreshTokenIsMutated = _pandaDocRefreshTokenIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsReceiverEmailsBccMutated(_receiverEmailsBccIsMutated) {
        this._receiverEmailsBccIsMutated = _receiverEmailsBccIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsReceiverEmailsMutated(_receiverEmailsIsMutated) {
        this._receiverEmailsIsMutated = _receiverEmailsIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRoutingSoftwareCronJobLockKeyMutated(_routingSoftwareCronJobLockKeyIsMutated) {
        this._routingSoftwareCronJobLockKeyIsMutated = _routingSoftwareCronJobLockKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRoutingSoftwareLastSyncTimestampMutated(_routingSoftwareLastSyncTimestampIsMutated) {
        this._routingSoftwareLastSyncTimestampIsMutated = _routingSoftwareLastSyncTimestampIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRoutingSoftwareTypeMutated(_routingSoftwareTypeIsMutated) {
        this._routingSoftwareTypeIsMutated = _routingSoftwareTypeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRoutingSoftwareVersionMutated(_routingSoftwareVersionIsMutated) {
        this._routingSoftwareVersionIsMutated = _routingSoftwareVersionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceDocumentsMutated(_workspaceDocumentsIsMutated) {
        this._workspaceDocumentsIsMutated = _workspaceDocumentsIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceTemplatesMutated(_workspaceTemplatesIsMutated) {
        this._workspaceTemplatesIsMutated = _workspaceTemplatesIsMutated;
        return (this);
    }
    /**
* ```
     * The domain where the wiget will be deployed.
* ```
     */
    setDeploymentDomainName(deploymentDomainName) {
        if (!this._getIsMutateSuppressed() && this.deploymentDomainName !== deploymentDomainName) {
            this._setIsDeploymentDomainNameMutated(true);
        }
        this.deploymentDomainName = deploymentDomainName;
        return (this);
    }
    /**
* ```
     * The workspace description.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * Identifies if the WorkSpace is active.
* ```
     */
    setIsActive(isActive) {
        if (!this._getIsMutateSuppressed() && this.isActive !== isActive) {
            this._setIsActiveMutated(true);
        }
        this.isActive = isActive;
        return (this);
    }
    /**
* ```
     * Identifies if the workspace is syncing to the routing software
* ```
     */
    setIsRoutingSoftwareSyncActive(isRoutingSoftwareSyncActive) {
        if (!this._getIsMutateSuppressed() && this.isRoutingSoftwareSyncActive !== isRoutingSoftwareSyncActive) {
            this._setIsRoutingSoftwareSyncActiveMutated(true);
        }
        this.isRoutingSoftwareSyncActive = isRoutingSoftwareSyncActive;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The data type
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The tenant Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The PandaDoc access_token.
* ```
     */
    setPandaDocAccessToken(pandaDocAccessToken) {
        if (!this._getIsMutateSuppressed() && this.pandaDocAccessToken !== pandaDocAccessToken) {
            this._setIsPandaDocAccessTokenMutated(true);
        }
        this.pandaDocAccessToken = pandaDocAccessToken;
        return (this);
    }
    /**
* ```
     * The PandaDoc client_id.
* ```
     */
    setPandaDocClientId(pandaDocClientId) {
        if (!this._getIsMutateSuppressed() && this.pandaDocClientId !== pandaDocClientId) {
            this._setIsPandaDocClientIdMutated(true);
        }
        this.pandaDocClientId = pandaDocClientId;
        return (this);
    }
    /**
* ```
     * The PandaDoc client_secret.
* ```
     */
    setPandaDocClientSecret(pandaDocClientSecret) {
        if (!this._getIsMutateSuppressed() && this.pandaDocClientSecret !== pandaDocClientSecret) {
            this._setIsPandaDocClientSecretMutated(true);
        }
        this.pandaDocClientSecret = pandaDocClientSecret;
        return (this);
    }
    /**
* ```
     * The cron job is currently on a system that has multiple instances running. Each thread has a random timer to request the lock, the first one in wins. This will be moved to another services as time permits.
* ```
     */
    setPandaDocCronJobLockKey(pandaDocCronJobLockKey) {
        if (!this._getIsMutateSuppressed() && this.pandaDocCronJobLockKey !== pandaDocCronJobLockKey) {
            this._setIsPandaDocCronJobLockKeyMutated(true);
        }
        this.pandaDocCronJobLockKey = pandaDocCronJobLockKey;
        return (this);
    }
    /**
* ```
     * The timestamp that indicates how far back in time to query to sync data.
* ```
     */
    setPandaDocLastSyncTimestamp(pandaDocLastSyncTimestamp) {
        if (!this._getIsMutateSuppressed() && this.pandaDocLastSyncTimestamp !== pandaDocLastSyncTimestamp) {
            this._setIsPandaDocLastSyncTimestampMutated(true);
        }
        this.pandaDocLastSyncTimestamp = pandaDocLastSyncTimestamp;
        return (this);
    }
    /**
* ```
     * The PandaDoc refresh_token.
* ```
     */
    setPandaDocRefreshToken(pandaDocRefreshToken) {
        if (!this._getIsMutateSuppressed() && this.pandaDocRefreshToken !== pandaDocRefreshToken) {
            this._setIsPandaDocRefreshTokenMutated(true);
        }
        this.pandaDocRefreshToken = pandaDocRefreshToken;
        return (this);
    }
    /**
* ```
     * The email address to send email to.
* ```
     */
    setReceiverEmails(receiverEmails) {
        if (!this._getIsMutateSuppressed() && this.receiverEmails !== receiverEmails) {
            this._setIsReceiverEmailsMutated(true);
        }
        this.receiverEmails = receiverEmails;
        return (this);
    }
    /**
* ```
     * The email address to send bcc email to.
* ```
     */
    setReceiverEmailsBcc(receiverEmailsBcc) {
        if (!this._getIsMutateSuppressed() && this.receiverEmailsBcc !== receiverEmailsBcc) {
            this._setIsReceiverEmailsBccMutated(true);
        }
        this.receiverEmailsBcc = receiverEmailsBcc;
        return (this);
    }
    /**
* ```
     * The cron job is currently on a system that has multiple instances running. Each thread has a random timer to request the lock, the first one in wins.
* ```
     */
    setRoutingSoftwareCronJobLockKey(routingSoftwareCronJobLockKey) {
        if (!this._getIsMutateSuppressed() && this.routingSoftwareCronJobLockKey !== routingSoftwareCronJobLockKey) {
            this._setIsRoutingSoftwareCronJobLockKeyMutated(true);
        }
        this.routingSoftwareCronJobLockKey = routingSoftwareCronJobLockKey;
        return (this);
    }
    /**
* ```
     * The timestamp that indicates how far back in time to query to sync data.
* ```
     */
    setRoutingSoftwareLastSyncTimestamp(routingSoftwareLastSyncTimestamp) {
        if (!this._getIsMutateSuppressed() && this.routingSoftwareLastSyncTimestamp !== routingSoftwareLastSyncTimestamp) {
            this._setIsRoutingSoftwareLastSyncTimestampMutated(true);
        }
        this.routingSoftwareLastSyncTimestamp = routingSoftwareLastSyncTimestamp;
        return (this);
    }
    /**
* ```
     * The RoutingSoftwareType.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setRoutingSoftwareType(routingSoftwareType, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.routingSoftwareType !== routingSoftwareType) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(routingSoftwareType, persistanceType);
            this._setIsRoutingSoftwareTypeMutated(true);
        }
        this.routingSoftwareType = routingSoftwareType;
        return (this);
    }
    /**
* ```
     * The RoutingSoftwareVersion.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setRoutingSoftwareVersion(routingSoftwareVersion, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.routingSoftwareVersion !== routingSoftwareVersion) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(routingSoftwareVersion, persistanceType);
            this._setIsRoutingSoftwareVersionMutated(true);
        }
        this.routingSoftwareVersion = routingSoftwareVersion;
        return (this);
    }
    /**
* ```
     * The documents for the workspace.
* ```
     */
    setWorkspaceDocuments(workspaceDocuments) {
        if (!this._getIsMutateSuppressed() && this.workspaceDocuments !== workspaceDocuments) {
            this._setIsWorkspaceDocumentsMutated(true);
        }
        this.workspaceDocuments = workspaceDocuments;
        return (this);
    }
    /**
* ```
     * The workspace templates for the workspace.
* ```
     */
    setWorkspaceTemplates(workspaceTemplates) {
        if (!this._getIsMutateSuppressed() && this.workspaceTemplates !== workspaceTemplates) {
            this._setIsWorkspaceTemplatesMutated(true);
        }
        this.workspaceTemplates = workspaceTemplates;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'deploymentDomainName',
            value: this.deploymentDomainName
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setCurrentState2({
            attributeName: 'isRoutingSoftwareSyncActive',
            value: this.isRoutingSoftwareSyncActive
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'pandaDocAccessToken',
            value: this.pandaDocAccessToken
        });
        this._setCurrentState2({
            attributeName: 'pandaDocClientId',
            value: this.pandaDocClientId
        });
        this._setCurrentState2({
            attributeName: 'pandaDocClientSecret',
            value: this.pandaDocClientSecret
        });
        this._setCurrentState2({
            attributeName: 'pandaDocCronJobLockKey',
            value: this.pandaDocCronJobLockKey
        });
        this._setCurrentState2({
            attributeName: 'pandaDocLastSyncTimestamp',
            value: this.pandaDocLastSyncTimestamp
        });
        this._setCurrentState2({
            attributeName: 'pandaDocRefreshToken',
            value: this.pandaDocRefreshToken
        });
        this._setCurrentState2({
            attributeName: 'receiverEmails',
            value: this.receiverEmails
        });
        this._setCurrentState2({
            attributeName: 'receiverEmailsBcc',
            value: this.receiverEmailsBcc
        });
        this._setCurrentState2({
            attributeName: 'routingSoftwareCronJobLockKey',
            value: this.routingSoftwareCronJobLockKey
        });
        this._setCurrentState2({
            attributeName: 'routingSoftwareLastSyncTimestamp',
            value: this.routingSoftwareLastSyncTimestamp
        });
        this._setCurrentState2({
            attributeName: 'routingSoftwareType',
            value: this.routingSoftwareType
        });
        this._setCurrentState2({
            attributeName: 'routingSoftwareVersion',
            value: this.routingSoftwareVersion
        });
        this._setCurrentState2({
            attributeName: 'workspaceDocuments',
            value: this.workspaceDocuments
        });
        this._setCurrentState2({
            attributeName: 'workspaceTemplates',
            value: this.workspaceTemplates
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'deploymentDomainName',
            value: this.deploymentDomainName
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setInitializedState2({
            attributeName: 'isRoutingSoftwareSyncActive',
            value: this.isRoutingSoftwareSyncActive
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'pandaDocAccessToken',
            value: this.pandaDocAccessToken
        });
        this._setInitializedState2({
            attributeName: 'pandaDocClientId',
            value: this.pandaDocClientId
        });
        this._setInitializedState2({
            attributeName: 'pandaDocClientSecret',
            value: this.pandaDocClientSecret
        });
        this._setInitializedState2({
            attributeName: 'pandaDocCronJobLockKey',
            value: this.pandaDocCronJobLockKey
        });
        this._setInitializedState2({
            attributeName: 'pandaDocLastSyncTimestamp',
            value: this.pandaDocLastSyncTimestamp
        });
        this._setInitializedState2({
            attributeName: 'pandaDocRefreshToken',
            value: this.pandaDocRefreshToken
        });
        this._setInitializedState2({
            attributeName: 'receiverEmails',
            value: this.receiverEmails
        });
        this._setInitializedState2({
            attributeName: 'receiverEmailsBcc',
            value: this.receiverEmailsBcc
        });
        this._setInitializedState2({
            attributeName: 'routingSoftwareCronJobLockKey',
            value: this.routingSoftwareCronJobLockKey
        });
        this._setInitializedState2({
            attributeName: 'routingSoftwareLastSyncTimestamp',
            value: this.routingSoftwareLastSyncTimestamp
        });
        this._setInitializedState2({
            attributeName: 'routingSoftwareType',
            value: this.routingSoftwareType
        });
        this._setInitializedState2({
            attributeName: 'routingSoftwareVersion',
            value: this.routingSoftwareVersion
        });
        this._setInitializedState2({
            attributeName: 'workspaceDocuments',
            value: this.workspaceDocuments
        });
        this._setInitializedState2({
            attributeName: 'workspaceTemplates',
            value: this.workspaceTemplates
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.deploymentDomainName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isActive);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isRoutingSoftwareSyncActive);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.pandaDocAccessToken);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.pandaDocClientId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.pandaDocClientSecret);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.pandaDocCronJobLockKey);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.pandaDocLastSyncTimestamp);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.pandaDocRefreshToken);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.receiverEmails);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.receiverEmailsBcc);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.routingSoftwareCronJobLockKey);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.routingSoftwareLastSyncTimestamp);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.routingSoftwareType);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.routingSoftwareVersion);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspaceDocuments);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspaceTemplates);
        return (hashCode_n);
    }
}
exports.Workspace = Workspace;
Workspace.metaDataForWorkspace = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.Workspace", Workspace);
//# sourceMappingURL=Workspace.js.map