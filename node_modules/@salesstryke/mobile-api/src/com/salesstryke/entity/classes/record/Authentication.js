"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authentication = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiRecordBase_1 = require("../../../jsonApi/JsonApiRecordBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
class EntityAttributes {
    constructor() {
        this._firstNameIsMutated = "_firstNameIsMutated";
        this._isValidIsMutated = "_isValidIsMutated";
        this._jwtTokenIsMutated = "_jwtTokenIsMutated";
        this._lastNameIsMutated = "_lastNameIsMutated";
        this._loginIsMutated = "_loginIsMutated";
        this._passwordIsMutated = "_passwordIsMutated";
        this.firstName = "firstName";
        this.isValid = "isValid";
        this.jwtToken = "jwtToken";
        this.lastName = "lastName";
        this.login = "login";
        this.password = "password";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._firstNameIsMutated = "_firstNameIsMutated";
        this._isValidIsMutated = "_isValidIsMutated";
        this._jwtTokenIsMutated = "_jwtTokenIsMutated";
        this._lastNameIsMutated = "_lastNameIsMutated";
        this._loginIsMutated = "_loginIsMutated";
        this._passwordIsMutated = "_passwordIsMutated";
        this.firstName = "firstName";
        this.isValid = "isValid";
        this.jwtToken = "jwtToken";
        this.lastName = "lastName";
        this.login = "login";
        this.password = "password";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.record.Authentication";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class Authentication extends JsonApiRecordBase_1.JsonApiRecordBase {
    constructor(p) {
        super(p);
        this._firstNameIsMutated = false;
        this._isValidIsMutated = false;
        this._jwtTokenIsMutated = false;
        this._lastNameIsMutated = false;
        this._loginIsMutated = false;
        this._passwordIsMutated = false;
        this.firstName = null;
        this.isValid = false;
        this.jwtToken = null;
        this.lastName = null;
        this.login = null;
        this.password = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.record.Authentication");
    }
    /**
     *
     * @returns boolean
     */
    _getIsFirstNameMutated() {
        return (this._firstNameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsValidMutated() {
        return (this._isValidIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsJwtTokenMutated() {
        return (this._jwtTokenIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLastNameMutated() {
        return (this._lastNameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLoginMutated() {
        return (this._loginIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPasswordMutated() {
        return (this._passwordIsMutated);
    }
    /**
     * The user first name for Authentication
     * @returns string | null
     */
    getFirstName() {
        return (this.firstName);
    }
    /**
     * Indicates if authenication was successful or not. Is true if successful.
     * @returns boolean
     */
    getIsValid() {
        return (this.isValid);
    }
    /**
     * The jwtToken for Authentication
     * @returns string | null
     */
    getJwtToken() {
        return (this.jwtToken);
    }
    /**
     * The user last name for Authentication
     * @returns string | null
     */
    getLastName() {
        return (this.lastName);
    }
    /**
     * The user login for Authentication
     * @returns string | null
     */
    getLogin() {
        return (this.login);
    }
    /**
     * The user password for Authentication
     * @returns string | null
     */
    getPassword() {
        return (this.password);
    }
    /**
* ```
     *
* ```
     */
    _setIsFirstNameMutated(_firstNameIsMutated) {
        this._firstNameIsMutated = _firstNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsValidMutated(_isValidIsMutated) {
        this._isValidIsMutated = _isValidIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsJwtTokenMutated(_jwtTokenIsMutated) {
        this._jwtTokenIsMutated = _jwtTokenIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLastNameMutated(_lastNameIsMutated) {
        this._lastNameIsMutated = _lastNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLoginMutated(_loginIsMutated) {
        this._loginIsMutated = _loginIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPasswordMutated(_passwordIsMutated) {
        this._passwordIsMutated = _passwordIsMutated;
        return (this);
    }
    /**
* ```
     * The user first name for Authentication
* ```
     */
    setFirstName(firstName) {
        if (this.firstName !== firstName) {
            this._setIsFirstNameMutated(true);
        }
        this.firstName = firstName;
        return (this);
    }
    /**
* ```
     * Indicates if authenication was successful or not. Is true if successful.
* ```
     */
    setIsValid(isValid) {
        if (this.isValid !== isValid) {
            this._setIsValidMutated(true);
        }
        this.isValid = isValid;
        return (this);
    }
    /**
* ```
     * The jwtToken for Authentication
* ```
     */
    setJwtToken(jwtToken) {
        if (this.jwtToken !== jwtToken) {
            this._setIsJwtTokenMutated(true);
        }
        this.jwtToken = jwtToken;
        return (this);
    }
    /**
* ```
     * The user last name for Authentication
* ```
     */
    setLastName(lastName) {
        if (this.lastName !== lastName) {
            this._setIsLastNameMutated(true);
        }
        this.lastName = lastName;
        return (this);
    }
    /**
* ```
     * The user login for Authentication
* ```
     */
    setLogin(login) {
        if (this.login !== login) {
            this._setIsLoginMutated(true);
        }
        this.login = login;
        return (this);
    }
    /**
* ```
     * The user password for Authentication
* ```
     */
    setPassword(password) {
        if (this.password !== password) {
            this._setIsPasswordMutated(true);
        }
        this.password = password;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: 'firstName',
            value: this.firstName
        });
        this._setCurrentState2({
            attributeName: 'isValid',
            value: this.isValid
        });
        this._setCurrentState2({
            attributeName: 'jwtToken',
            value: this.jwtToken
        });
        this._setCurrentState2({
            attributeName: 'lastName',
            value: this.lastName
        });
        this._setCurrentState2({
            attributeName: 'login',
            value: this.login
        });
        this._setCurrentState2({
            attributeName: 'password',
            value: this.password
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: 'firstName',
            value: this.firstName
        });
        this._setInitializedState2({
            attributeName: 'isValid',
            value: this.isValid
        });
        this._setInitializedState2({
            attributeName: 'jwtToken',
            value: this.jwtToken
        });
        this._setInitializedState2({
            attributeName: 'lastName',
            value: this.lastName
        });
        this._setInitializedState2({
            attributeName: 'login',
            value: this.login
        });
        this._setInitializedState2({
            attributeName: 'password',
            value: this.password
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.firstName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isValid);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.jwtToken);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.lastName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.login);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.password);
        return (hashCode_n);
    }
}
exports.Authentication = Authentication;
Authentication.metaDataForAuthentication = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.record.Authentication", Authentication);
//# sourceMappingURL=Authentication.js.map