"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoftPakTaxBodyCode = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._countyIsMutated = "_countyIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._organizationIsMutated = "_organizationIsMutated";
        this._regionIsMutated = "_regionIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._routingSoftwareVersionIsMutated = "_routingSoftwareVersionIsMutated";
        this._taxBodyCodeIsMutated = "_taxBodyCodeIsMutated";
        this._usStateIsMutated = "_usStateIsMutated";
        this.county = "county";
        this.createdDate = "createdDate";
        this.id = "id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.region = "region";
        this.routingSoftwareVersion = "routingSoftwareVersion";
        this.taxBodyCode = "taxBodyCode";
        this.usState = "usState";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._countyIsMutated = "_countyIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._organizationIsMutated = "_organizationIsMutated";
        this._regionIsMutated = "_regionIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._routingSoftwareVersionIsMutated = "_routingSoftwareVersionIsMutated";
        this._taxBodyCodeIsMutated = "_taxBodyCodeIsMutated";
        this._usStateIsMutated = "_usStateIsMutated";
        this.county = "county";
        this.createdDate = "createdDate";
        this._id = "_id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.region = "region";
        this.routingSoftwareVersion = "routingSoftwareVersion";
        this.taxBodyCode = "taxBodyCode";
        this.usState = "usState";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.SoftPakTaxBodyCode";
        this.mongDataModeName = "SoftPakTaxBodyCode";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class SoftPakTaxBodyCode extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._countyIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isRemoveFromRelationship = false;
        this._isRemoveFromRelationshipIsMutated = false;
        this._organizationIsMutated = false;
        this._regionIsMutated = false;
        this._routingSoftwareVersionIsMutated = false;
        this._taxBodyCodeIsMutated = false;
        this._usStateIsMutated = false;
        this.county = null;
        this.id = null;
        this.jsonType = "com.salesstryke.entity.classes.persistable.SoftPakTaxBodyCode";
        this.organization = null;
        this.region = null;
        this.routingSoftwareVersion = null;
        this.taxBodyCode = null;
        this.usState = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._countyIsMutated = false;
        this._organizationIsMutated = false;
        this._regionIsMutated = false;
        this._routingSoftwareVersionIsMutated = false;
        this._taxBodyCodeIsMutated = false;
        this._usStateIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.SoftPakTaxBodyCode");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsCountyMutated() {
        return (this._countyIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship() {
        return (this._isRemoveFromRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated() {
        return (this._isRemoveFromRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRegionMutated() {
        return (this._regionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRoutingSoftwareVersionMutated() {
        return (this._routingSoftwareVersionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsTaxBodyCodeMutated() {
        return (this._taxBodyCodeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUsStateMutated() {
        return (this._usStateIsMutated);
    }
    /**
     * The US county
     * @returns string | null
     */
    getCounty() {
        return (this.county);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The city, parish, township, etc.
     * @returns string | null
     */
    getRegion() {
        return (this.region);
    }
    /**
     * The Routing Software Version.
     * @returns RoutingSoftwareVersion | null
     */
    getRoutingSoftwareVersion() {
        return (this.routingSoftwareVersion);
    }
    /**
     * The 6 character tax body code.
     * @returns string | null
     */
    getTaxBodyCode() {
        return (this.taxBodyCode);
    }
    /**
     * The two character US state.
     * @returns string | null
     */
    getUsState() {
        return (this.usState);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsCountyMutated(_countyIsMutated) {
        this._countyIsMutated = _countyIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship) {
        if (this._isRemoveFromRelationship !== _isRemoveFromRelationship) {
            this._setIsRemoveFromRelationshipMutated(true);
        }
        this._isRemoveFromRelationship = _isRemoveFromRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated) {
        this._isRemoveFromRelationshipIsMutated = _isRemoveFromRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRegionMutated(_regionIsMutated) {
        this._regionIsMutated = _regionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRoutingSoftwareVersionMutated(_routingSoftwareVersionIsMutated) {
        this._routingSoftwareVersionIsMutated = _routingSoftwareVersionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsTaxBodyCodeMutated(_taxBodyCodeIsMutated) {
        this._taxBodyCodeIsMutated = _taxBodyCodeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUsStateMutated(_usStateIsMutated) {
        this._usStateIsMutated = _usStateIsMutated;
        return (this);
    }
    /**
* ```
     * The US county
* ```
     */
    setCounty(county) {
        if (!this._getIsMutateSuppressed() && this.county !== county) {
            this._setIsCountyMutated(true);
        }
        this.county = county;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The city, parish, township, etc.
* ```
     */
    setRegion(region) {
        if (!this._getIsMutateSuppressed() && this.region !== region) {
            this._setIsRegionMutated(true);
        }
        this.region = region;
        return (this);
    }
    /**
* ```
     * The Routing Software Version.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setRoutingSoftwareVersion(routingSoftwareVersion, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.routingSoftwareVersion !== routingSoftwareVersion) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(routingSoftwareVersion, persistanceType);
            this._setIsRoutingSoftwareVersionMutated(true);
        }
        this.routingSoftwareVersion = routingSoftwareVersion;
        return (this);
    }
    /**
* ```
     * The 6 character tax body code.
* ```
     */
    setTaxBodyCode(taxBodyCode) {
        if (!this._getIsMutateSuppressed() && this.taxBodyCode !== taxBodyCode) {
            this._setIsTaxBodyCodeMutated(true);
        }
        this.taxBodyCode = taxBodyCode;
        return (this);
    }
    /**
* ```
     * The two character US state.
* ```
     */
    setUsState(usState) {
        if (!this._getIsMutateSuppressed() && this.usState !== usState) {
            this._setIsUsStateMutated(true);
        }
        this.usState = usState;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'county',
            value: this.county
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'region',
            value: this.region
        });
        this._setCurrentState2({
            attributeName: 'routingSoftwareVersion',
            value: this.routingSoftwareVersion
        });
        this._setCurrentState2({
            attributeName: 'taxBodyCode',
            value: this.taxBodyCode
        });
        this._setCurrentState2({
            attributeName: 'usState',
            value: this.usState
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'county',
            value: this.county
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'region',
            value: this.region
        });
        this._setInitializedState2({
            attributeName: 'routingSoftwareVersion',
            value: this.routingSoftwareVersion
        });
        this._setInitializedState2({
            attributeName: 'taxBodyCode',
            value: this.taxBodyCode
        });
        this._setInitializedState2({
            attributeName: 'usState',
            value: this.usState
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this._isRemoveFromRelationship);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.county);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.region);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.routingSoftwareVersion);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.taxBodyCode);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.usState);
        return (hashCode_n);
    }
}
exports.SoftPakTaxBodyCode = SoftPakTaxBodyCode;
SoftPakTaxBodyCode.metaDataForSoftPakTaxBodyCode = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.SoftPakTaxBodyCode", SoftPakTaxBodyCode);
//# sourceMappingURL=SoftPakTaxBodyCode.js.map