"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Product = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistenceType_1 = require("../../../data/PersistenceType");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._activeEndDateIsMutated = "_activeEndDateIsMutated";
        this._activeStartDateIsMutated = "_activeStartDateIsMutated";
        this._agreementDocumentIsMutated = "_agreementDocumentIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._kmlTypeIsMutated = "_kmlTypeIsMutated";
        this._labelIsMutated = "_labelIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._productCategoriesIsMutated = "_productCategoriesIsMutated";
        this._productColorsIsMutated = "_productColorsIsMutated";
        this._productImagesIsMutated = "_productImagesIsMutated";
        this._productPricingsIsMutated = "_productPricingsIsMutated";
        this._uiDescriptionIsMutated = "_uiDescriptionIsMutated";
        this._uiNameIsMutated = "_uiNameIsMutated";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.activeEndDate = "activeEndDate";
        this.activeStartDate = "activeStartDate";
        this.agreementDocument = "agreementDocument";
        this.createdDate = "createdDate";
        this.description = "description";
        this.id = "id";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.kmlType = "kmlType";
        this.label = "label";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.productCategories = "productCategories";
        this.productColors = "productColors";
        this.productImages = "productImages";
        this.productPricings = "productPricings";
        this.uiDescription = "uiDescription";
        this.uiName = "uiName";
        this.workspace = "workspace";
    }
}
class MongoVirtual {
    constructor() {
        this.productCategories = "productCategories";
        this.productColors = "productColors";
        this.productImages = "productImages";
        this.productPricings = "productPricings";
    }
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._activeEndDateIsMutated = "_activeEndDateIsMutated";
        this._activeStartDateIsMutated = "_activeStartDateIsMutated";
        this._agreementDocumentIsMutated = "_agreementDocumentIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._kmlTypeIsMutated = "_kmlTypeIsMutated";
        this._labelIsMutated = "_labelIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._productCategoriesIsMutated = "_productCategoriesIsMutated";
        this._productColorsIsMutated = "_productColorsIsMutated";
        this._productImagesIsMutated = "_productImagesIsMutated";
        this._productPricingsIsMutated = "_productPricingsIsMutated";
        this._uiDescriptionIsMutated = "_uiDescriptionIsMutated";
        this._uiNameIsMutated = "_uiNameIsMutated";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.activeEndDate = "activeEndDate";
        this.activeStartDate = "activeStartDate";
        this.agreementDocument = "agreementDocument";
        this.createdDate = "createdDate";
        this.description = "description";
        this._id = "_id";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.kmlType = "kmlType";
        this.label = "label";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.productCategories = "productCategories";
        this.productColors = "productColors";
        this.productImages = "productImages";
        this.productPricings = "productPricings";
        this.uiDescription = "uiDescription";
        this.uiName = "uiName";
        this.workspace = "workspace";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.Product";
        this.mongDataModeName = "Product";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class Product extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._activeEndDateIsMutated = false;
        this._activeStartDateIsMutated = false;
        this._agreementDocumentIsMutated = false;
        this._descriptionIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isActiveIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isRemoveFromRelationship = false;
        this._isRemoveFromRelationshipIsMutated = false;
        this._kmlTypeIsMutated = false;
        this._labelIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._productCategoriesIsMutated = false;
        this._productColorsIsMutated = false;
        this._productImagesIsMutated = false;
        this._productPricingsIsMutated = false;
        this._uiDescriptionIsMutated = false;
        this._uiNameIsMutated = false;
        this._workspaceIsMutated = false;
        this.activeEndDate = null;
        this.activeStartDate = null;
        this.agreementDocument = null;
        this.description = null;
        this.id = null;
        this.isActive = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.Product";
        this.kmlType = null;
        this.label = null;
        this.name = null;
        this.organization = null;
        this.productCategories = new Array();
        this.productColors = new Array();
        this.productImages = new Array();
        this.productPricings = new Array();
        this.uiDescription = null;
        this.uiName = null;
        this.workspace = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._activeEndDateIsMutated = false;
        this._activeStartDateIsMutated = false;
        this._agreementDocumentIsMutated = false;
        this._descriptionIsMutated = false;
        this._isActiveIsMutated = false;
        this._kmlTypeIsMutated = false;
        this._labelIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._productCategoriesIsMutated = false;
        this._productColorsIsMutated = false;
        this._productImagesIsMutated = false;
        this._productPricingsIsMutated = false;
        this._uiDescriptionIsMutated = false;
        this._uiNameIsMutated = false;
        this._workspaceIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.Product");
    }
    /**
     * The product category for the product.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductCategory(productCategory, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            productCategory._trackMutations();
        }
        productCategory._setRelationshipPersistableType(persistanceType.getId());
        this.productCategories.push(productCategory);
        return (this);
    }
    /**
     * The product category for the product.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductCategory(productCategory, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            productCategory._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.productCategories.findIndex(obj => obj === productCategory);
            if (index !== -1) {
                this.productCategories.splice(index, 1);
            }
            productCategory._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        productCategory._setRelationshipPersistableType(persistanceType.getId());
        this.productCategories.push(productCategory);
        return (this);
    }
    /**
     * The product color for the product.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductColor(productColor, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            productColor._trackMutations();
        }
        productColor._setRelationshipPersistableType(persistanceType.getId());
        this.productColors.push(productColor);
        return (this);
    }
    /**
     * The product color for the product.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductColor(productColor, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            productColor._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.productColors.findIndex(obj => obj === productColor);
            if (index !== -1) {
                this.productColors.splice(index, 1);
            }
            productColor._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        productColor._setRelationshipPersistableType(persistanceType.getId());
        this.productColors.push(productColor);
        return (this);
    }
    /**
     * The product image for the product.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductImage(productImage, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            productImage._trackMutations();
        }
        productImage._setRelationshipPersistableType(persistanceType.getId());
        this.productImages.push(productImage);
        return (this);
    }
    /**
     * The product image for the product.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductImage(productImage, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            productImage._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.productImages.findIndex(obj => obj === productImage);
            if (index !== -1) {
                this.productImages.splice(index, 1);
            }
            productImage._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        productImage._setRelationshipPersistableType(persistanceType.getId());
        this.productImages.push(productImage);
        return (this);
    }
    /**
     * The product pricing for the product.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductPricing(productPricing, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            productPricing._trackMutations();
        }
        productPricing._setRelationshipPersistableType(persistanceType.getId());
        this.productPricings.push(productPricing);
        return (this);
    }
    /**
     * The product pricing for the product.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductPricing(productPricing, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            productPricing._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.productPricings.findIndex(obj => obj === productPricing);
            if (index !== -1) {
                this.productPricings.splice(index, 1);
            }
            productPricing._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        productPricing._setRelationshipPersistableType(persistanceType.getId());
        this.productPricings.push(productPricing);
        return (this);
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveEndDateMutated() {
        return (this._activeEndDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveStartDateMutated() {
        return (this._activeStartDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAgreementDocumentMutated() {
        return (this._agreementDocumentIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated() {
        return (this._isActiveIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship() {
        return (this._isRemoveFromRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated() {
        return (this._isRemoveFromRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsKmlTypeMutated() {
        return (this._kmlTypeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLabelMutated() {
        return (this._labelIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductCategoriesMutated() {
        return (this._productCategoriesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductColorsMutated() {
        return (this._productColorsIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductImagesMutated() {
        return (this._productImagesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductPricingsMutated() {
        return (this._productPricingsIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUiDescriptionMutated() {
        return (this._uiDescriptionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUiNameMutated() {
        return (this._uiNameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceMutated() {
        return (this._workspaceIsMutated);
    }
    /**
     * Active end date.
     * @returns Date | null
     */
    getActiveEndDate() {
        return (this.activeEndDate);
    }
    /**
     * Active start date.
     * @returns Date | null
     */
    getActiveStartDate() {
        return (this.activeStartDate);
    }
    /**
     * The agreement document.
     * @returns AgreementDocument | null
     */
    getAgreementDocument() {
        return (this.agreementDocument);
    }
    /**
     * The description of product.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * Identifies if the product is active.
     * @returns boolean
     */
    getIsActive() {
        return ((this.isActive === undefined) ? false : this.isActive);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The Kml type for the product.
     * @returns KmlType | null
     */
    getKmlType() {
        return (this.kmlType);
    }
    /**
     * The label of product.
     * @returns string | null
     */
    getLabel() {
        return (this.label);
    }
    /**
     * The name of product.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The tenant Organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The product category for the product.
     * @returns Array<ProductCategoryProduct>
     */
    getProductCategories() {
        return (this.productCategories);
    }
    /**
     * The product color for the product.
     * @returns Array<ProductColor>
     */
    getProductColors() {
        return (this.productColors);
    }
    /**
     * The product image for the product.
     * @returns Array<ProductImage>
     */
    getProductImages() {
        return (this.productImages);
    }
    /**
     * The product pricing for the product.
     * @returns Array<ProductPricing>
     */
    getProductPricings() {
        return (this.productPricings);
    }
    /**
     * The description of product for the UI.
     * @returns string | null
     */
    getUiDescription() {
        return (this.uiDescription);
    }
    /**
     * The name of product for the UI.
     * @returns string | null
     */
    getUiName() {
        return (this.uiName);
    }
    /**
     * The product workspace id.
     * @returns Workspace | null
     */
    getWorkspace() {
        return (this.workspace);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveEndDateMutated(_activeEndDateIsMutated) {
        this._activeEndDateIsMutated = _activeEndDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveStartDateMutated(_activeStartDateIsMutated) {
        this._activeStartDateIsMutated = _activeStartDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAgreementDocumentMutated(_agreementDocumentIsMutated) {
        this._agreementDocumentIsMutated = _agreementDocumentIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated) {
        this._isActiveIsMutated = _isActiveIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship) {
        if (this._isRemoveFromRelationship !== _isRemoveFromRelationship) {
            this._setIsRemoveFromRelationshipMutated(true);
        }
        this._isRemoveFromRelationship = _isRemoveFromRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated) {
        this._isRemoveFromRelationshipIsMutated = _isRemoveFromRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsKmlTypeMutated(_kmlTypeIsMutated) {
        this._kmlTypeIsMutated = _kmlTypeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLabelMutated(_labelIsMutated) {
        this._labelIsMutated = _labelIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductCategoriesMutated(_productCategoriesIsMutated) {
        this._productCategoriesIsMutated = _productCategoriesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductColorsMutated(_productColorsIsMutated) {
        this._productColorsIsMutated = _productColorsIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductImagesMutated(_productImagesIsMutated) {
        this._productImagesIsMutated = _productImagesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductPricingsMutated(_productPricingsIsMutated) {
        this._productPricingsIsMutated = _productPricingsIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUiDescriptionMutated(_uiDescriptionIsMutated) {
        this._uiDescriptionIsMutated = _uiDescriptionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUiNameMutated(_uiNameIsMutated) {
        this._uiNameIsMutated = _uiNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceMutated(_workspaceIsMutated) {
        this._workspaceIsMutated = _workspaceIsMutated;
        return (this);
    }
    /**
* ```
     * Active end date.
* ```
     */
    setActiveEndDate(activeEndDate) {
        if (!this._getIsMutateSuppressed() && this.activeEndDate !== activeEndDate) {
            this._setIsActiveEndDateMutated(true);
        }
        this.activeEndDate = activeEndDate;
        return (this);
    }
    /**
* ```
     * Active start date.
* ```
     */
    setActiveStartDate(activeStartDate) {
        if (!this._getIsMutateSuppressed() && this.activeStartDate !== activeStartDate) {
            this._setIsActiveStartDateMutated(true);
        }
        this.activeStartDate = activeStartDate;
        return (this);
    }
    /**
* ```
     * The agreement document.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setAgreementDocument(agreementDocument, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.agreementDocument !== agreementDocument) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(agreementDocument, persistanceType);
            this._setIsAgreementDocumentMutated(true);
        }
        this.agreementDocument = agreementDocument;
        return (this);
    }
    /**
* ```
     * The description of product.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * Identifies if the product is active.
* ```
     */
    setIsActive(isActive) {
        if (!this._getIsMutateSuppressed() && this.isActive !== isActive) {
            this._setIsActiveMutated(true);
        }
        this.isActive = isActive;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The Kml type for the product.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setKmlType(kmlType, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.kmlType !== kmlType) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(kmlType, persistanceType);
            this._setIsKmlTypeMutated(true);
        }
        this.kmlType = kmlType;
        return (this);
    }
    /**
* ```
     * The label of product.
* ```
     */
    setLabel(label) {
        if (!this._getIsMutateSuppressed() && this.label !== label) {
            this._setIsLabelMutated(true);
        }
        this.label = label;
        return (this);
    }
    /**
* ```
     * The name of product.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The tenant Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The product category for the product.
* ```
     */
    setProductCategories(productCategories) {
        if (!this._getIsMutateSuppressed() && this.productCategories !== productCategories) {
            this._setIsProductCategoriesMutated(true);
        }
        this.productCategories = productCategories;
        return (this);
    }
    /**
* ```
     * The product color for the product.
* ```
     */
    setProductColors(productColors) {
        if (!this._getIsMutateSuppressed() && this.productColors !== productColors) {
            this._setIsProductColorsMutated(true);
        }
        this.productColors = productColors;
        return (this);
    }
    /**
* ```
     * The product image for the product.
* ```
     */
    setProductImages(productImages) {
        if (!this._getIsMutateSuppressed() && this.productImages !== productImages) {
            this._setIsProductImagesMutated(true);
        }
        this.productImages = productImages;
        return (this);
    }
    /**
* ```
     * The product pricing for the product.
* ```
     */
    setProductPricings(productPricings) {
        if (!this._getIsMutateSuppressed() && this.productPricings !== productPricings) {
            this._setIsProductPricingsMutated(true);
        }
        this.productPricings = productPricings;
        return (this);
    }
    /**
* ```
     * The description of product for the UI.
* ```
     */
    setUiDescription(uiDescription) {
        if (!this._getIsMutateSuppressed() && this.uiDescription !== uiDescription) {
            this._setIsUiDescriptionMutated(true);
        }
        this.uiDescription = uiDescription;
        return (this);
    }
    /**
* ```
     * The name of product for the UI.
* ```
     */
    setUiName(uiName) {
        if (!this._getIsMutateSuppressed() && this.uiName !== uiName) {
            this._setIsUiNameMutated(true);
        }
        this.uiName = uiName;
        return (this);
    }
    /**
* ```
     * The product workspace id.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspace(workspace, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.workspace !== workspace) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(workspace, persistanceType);
            this._setIsWorkspaceMutated(true);
        }
        this.workspace = workspace;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setCurrentState2({
            attributeName: 'activeEndDate',
            value: this.activeEndDate
        });
        this._setCurrentState2({
            attributeName: 'activeStartDate',
            value: this.activeStartDate
        });
        this._setCurrentState2({
            attributeName: 'agreementDocument',
            value: this.agreementDocument
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setCurrentState2({
            attributeName: 'kmlType',
            value: this.kmlType
        });
        this._setCurrentState2({
            attributeName: 'label',
            value: this.label
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'productCategories',
            value: this.productCategories
        });
        this._setCurrentState2({
            attributeName: 'productColors',
            value: this.productColors
        });
        this._setCurrentState2({
            attributeName: 'productImages',
            value: this.productImages
        });
        this._setCurrentState2({
            attributeName: 'productPricings',
            value: this.productPricings
        });
        this._setCurrentState2({
            attributeName: 'uiDescription',
            value: this.uiDescription
        });
        this._setCurrentState2({
            attributeName: 'uiName',
            value: this.uiName
        });
        this._setCurrentState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setInitializedState2({
            attributeName: 'activeEndDate',
            value: this.activeEndDate
        });
        this._setInitializedState2({
            attributeName: 'activeStartDate',
            value: this.activeStartDate
        });
        this._setInitializedState2({
            attributeName: 'agreementDocument',
            value: this.agreementDocument
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setInitializedState2({
            attributeName: 'kmlType',
            value: this.kmlType
        });
        this._setInitializedState2({
            attributeName: 'label',
            value: this.label
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'productCategories',
            value: this.productCategories
        });
        this._setInitializedState2({
            attributeName: 'productColors',
            value: this.productColors
        });
        this._setInitializedState2({
            attributeName: 'productImages',
            value: this.productImages
        });
        this._setInitializedState2({
            attributeName: 'productPricings',
            value: this.productPricings
        });
        this._setInitializedState2({
            attributeName: 'uiDescription',
            value: this.uiDescription
        });
        this._setInitializedState2({
            attributeName: 'uiName',
            value: this.uiName
        });
        this._setInitializedState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this._isRemoveFromRelationship);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.activeEndDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.activeStartDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.agreementDocument);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isActive);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.kmlType);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.label);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productCategories);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productColors);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productImages);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productPricings);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.uiDescription);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.uiName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspace);
        return (hashCode_n);
    }
}
exports.Product = Product;
Product.metaDataForProduct = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.Product", Product);
//# sourceMappingURL=Product.js.map