"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartItem = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._agreementDocumentAgreeIsMutated = "_agreementDocumentAgreeIsMutated";
        this._agreementDocumentVersionIsMutated = "_agreementDocumentVersionIsMutated";
        this._cartSessionIdIsMutated = "_cartSessionIdIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._inputValueIsMutated = "_inputValueIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRecurringIsMutated = "_isRecurringIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._priceAtTimeIsMutated = "_priceAtTimeIsMutated";
        this._priceIsMutated = "_priceIsMutated";
        this._productColorIsMutated = "_productColorIsMutated";
        this._productIsMutated = "_productIsMutated";
        this._productPricingIsMutated = "_productPricingIsMutated";
        this._quantityIsMutated = "_quantityIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._serviceStartDateIsMutated = "_serviceStartDateIsMutated";
        this._taxIsMutated = "_taxIsMutated";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.agreementDocumentAgree = "agreementDocumentAgree";
        this.agreementDocumentVersion = "agreementDocumentVersion";
        this.cartSessionId = "cartSessionId";
        this.createdDate = "createdDate";
        this.description = "description";
        this.id = "id";
        this.inputValue = "inputValue";
        this.isActive = "isActive";
        this.isRecurring = "isRecurring";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.price = "price";
        this.priceAtTime = "priceAtTime";
        this.product = "product";
        this.productColor = "productColor";
        this.productPricing = "productPricing";
        this.quantity = "quantity";
        this.serviceStartDate = "serviceStartDate";
        this.tax = "tax";
        this.workspace = "workspace";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._agreementDocumentAgreeIsMutated = "_agreementDocumentAgreeIsMutated";
        this._agreementDocumentVersionIsMutated = "_agreementDocumentVersionIsMutated";
        this._cartSessionIdIsMutated = "_cartSessionIdIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._inputValueIsMutated = "_inputValueIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRecurringIsMutated = "_isRecurringIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._priceAtTimeIsMutated = "_priceAtTimeIsMutated";
        this._priceIsMutated = "_priceIsMutated";
        this._productColorIsMutated = "_productColorIsMutated";
        this._productIsMutated = "_productIsMutated";
        this._productPricingIsMutated = "_productPricingIsMutated";
        this._quantityIsMutated = "_quantityIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._serviceStartDateIsMutated = "_serviceStartDateIsMutated";
        this._taxIsMutated = "_taxIsMutated";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.agreementDocumentAgree = "agreementDocumentAgree";
        this.agreementDocumentVersion = "agreementDocumentVersion";
        this.cartSessionId = "cartSessionId";
        this.createdDate = "createdDate";
        this.description = "description";
        this._id = "_id";
        this.inputValue = "inputValue";
        this.isActive = "isActive";
        this.isRecurring = "isRecurring";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.price = "price";
        this.priceAtTime = "priceAtTime";
        this.product = "product";
        this.productColor = "productColor";
        this.productPricing = "productPricing";
        this.quantity = "quantity";
        this.serviceStartDate = "serviceStartDate";
        this.tax = "tax";
        this.workspace = "workspace";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.CartItem";
        this.mongDataModeName = "CartItem";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class CartItem extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._agreementDocumentAgreeIsMutated = false;
        this._agreementDocumentVersionIsMutated = false;
        this._cartSessionIdIsMutated = false;
        this._descriptionIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._inputValueIsMutated = false;
        this._isActiveIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isRecurringIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._priceAtTimeIsMutated = false;
        this._priceIsMutated = false;
        this._productColorIsMutated = false;
        this._productIsMutated = false;
        this._productPricingIsMutated = false;
        this._quantityIsMutated = false;
        this._serviceStartDateIsMutated = false;
        this._taxIsMutated = false;
        this._workspaceIsMutated = false;
        this.agreementDocumentAgree = undefined;
        this.agreementDocumentVersion = null;
        this.cartSessionId = null;
        this.description = null;
        this.id = null;
        this.inputValue = null;
        this.isActive = undefined;
        this.isRecurring = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.CartItem";
        this.name = null;
        this.organization = null;
        this.price = 0;
        this.priceAtTime = null;
        this.product = null;
        this.productColor = null;
        this.productPricing = null;
        this.quantity = 0;
        this.serviceStartDate = null;
        this.tax = null;
        this.workspace = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._agreementDocumentAgreeIsMutated = false;
        this._agreementDocumentVersionIsMutated = false;
        this._cartSessionIdIsMutated = false;
        this._descriptionIsMutated = false;
        this._inputValueIsMutated = false;
        this._isActiveIsMutated = false;
        this._isRecurringIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._priceIsMutated = false;
        this._priceAtTimeIsMutated = false;
        this._productIsMutated = false;
        this._productColorIsMutated = false;
        this._productPricingIsMutated = false;
        this._quantityIsMutated = false;
        this._serviceStartDateIsMutated = false;
        this._taxIsMutated = false;
        this._workspaceIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.CartItem");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsAgreementDocumentAgreeMutated() {
        return (this._agreementDocumentAgreeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAgreementDocumentVersionMutated() {
        return (this._agreementDocumentVersionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsCartSessionIdMutated() {
        return (this._cartSessionIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInputValueMutated() {
        return (this._inputValueIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated() {
        return (this._isActiveIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRecurringMutated() {
        return (this._isRecurringIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPriceAtTimeMutated() {
        return (this._priceAtTimeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPriceMutated() {
        return (this._priceIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductColorMutated() {
        return (this._productColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductMutated() {
        return (this._productIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductPricingMutated() {
        return (this._productPricingIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsQuantityMutated() {
        return (this._quantityIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsServiceStartDateMutated() {
        return (this._serviceStartDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsTaxMutated() {
        return (this._taxIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceMutated() {
        return (this._workspaceIsMutated);
    }
    /**
     * Identifies if the agreement document is agreed to.
     * @returns boolean
     */
    getAgreementDocumentAgree() {
        return ((this.agreementDocumentAgree === undefined) ? false : this.agreementDocumentAgree);
    }
    /**
     * The agreement document version.
     * @returns AgreementDocumentVersion | null
     */
    getAgreementDocumentVersion() {
        return (this.agreementDocumentVersion);
    }
    /**
     * Cart session.
     * @returns CartSession | null
     */
    getCartSessionId() {
        return (this.cartSessionId);
    }
    /**
     * The description.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * input value
     * @returns string | null
     */
    getInputValue() {
        return (this.inputValue);
    }
    /**
     * Identifies if the cart item is active.
     * @returns boolean
     */
    getIsActive() {
        return ((this.isActive === undefined) ? false : this.isActive);
    }
    /**
     * Recurring check
     * @returns boolean
     */
    getIsRecurring() {
        return ((this.isRecurring === undefined) ? false : this.isRecurring);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The name.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The price.
     * @returns number
     */
    getPrice() {
        return (this.price);
    }
    /**
     * Price at time
     * @returns Date | null
     */
    getPriceAtTime() {
        return (this.priceAtTime);
    }
    /**
     * The product.
     * @returns Product | null
     */
    getProduct() {
        return (this.product);
    }
    /**
     * Product Color.
     * @returns ProductColor | null
     */
    getProductColor() {
        return (this.productColor);
    }
    /**
     * The product pricing.
     * @returns ProductPricing | null
     */
    getProductPricing() {
        return (this.productPricing);
    }
    /**
     * Quantity
     * @returns number
     */
    getQuantity() {
        return (this.quantity);
    }
    /**
     * Service start date
     * @returns Date | null
     */
    getServiceStartDate() {
        return (this.serviceStartDate);
    }
    /**
     * The tax type.
     * @returns Tax | null
     */
    getTax() {
        return (this.tax);
    }
    /**
     * The workspace.
     * @returns Workspace | null
     */
    getWorkspace() {
        return (this.workspace);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAgreementDocumentAgreeMutated(_agreementDocumentAgreeIsMutated) {
        this._agreementDocumentAgreeIsMutated = _agreementDocumentAgreeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAgreementDocumentVersionMutated(_agreementDocumentVersionIsMutated) {
        this._agreementDocumentVersionIsMutated = _agreementDocumentVersionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsCartSessionIdMutated(_cartSessionIdIsMutated) {
        this._cartSessionIdIsMutated = _cartSessionIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInputValueMutated(_inputValueIsMutated) {
        this._inputValueIsMutated = _inputValueIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated) {
        this._isActiveIsMutated = _isActiveIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRecurringMutated(_isRecurringIsMutated) {
        this._isRecurringIsMutated = _isRecurringIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPriceAtTimeMutated(_priceAtTimeIsMutated) {
        this._priceAtTimeIsMutated = _priceAtTimeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPriceMutated(_priceIsMutated) {
        this._priceIsMutated = _priceIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductColorMutated(_productColorIsMutated) {
        this._productColorIsMutated = _productColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductMutated(_productIsMutated) {
        this._productIsMutated = _productIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductPricingMutated(_productPricingIsMutated) {
        this._productPricingIsMutated = _productPricingIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsQuantityMutated(_quantityIsMutated) {
        this._quantityIsMutated = _quantityIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsServiceStartDateMutated(_serviceStartDateIsMutated) {
        this._serviceStartDateIsMutated = _serviceStartDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsTaxMutated(_taxIsMutated) {
        this._taxIsMutated = _taxIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceMutated(_workspaceIsMutated) {
        this._workspaceIsMutated = _workspaceIsMutated;
        return (this);
    }
    /**
* ```
     * Identifies if the agreement document is agreed to.
* ```
     */
    setAgreementDocumentAgree(agreementDocumentAgree) {
        if (!this._getIsMutateSuppressed() && this.agreementDocumentAgree !== agreementDocumentAgree) {
            this._setIsAgreementDocumentAgreeMutated(true);
        }
        this.agreementDocumentAgree = agreementDocumentAgree;
        return (this);
    }
    /**
* ```
     * The agreement document version.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setAgreementDocumentVersion(agreementDocumentVersion, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.agreementDocumentVersion !== agreementDocumentVersion) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(agreementDocumentVersion, persistanceType);
            this._setIsAgreementDocumentVersionMutated(true);
        }
        this.agreementDocumentVersion = agreementDocumentVersion;
        return (this);
    }
    /**
* ```
     * Cart session.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setCartSessionId(cartSessionId, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.cartSessionId !== cartSessionId) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(cartSessionId, persistanceType);
            this._setIsCartSessionIdMutated(true);
        }
        this.cartSessionId = cartSessionId;
        return (this);
    }
    /**
* ```
     * The description.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * input value
* ```
     */
    setInputValue(inputValue) {
        if (!this._getIsMutateSuppressed() && this.inputValue !== inputValue) {
            this._setIsInputValueMutated(true);
        }
        this.inputValue = inputValue;
        return (this);
    }
    /**
* ```
     * Identifies if the cart item is active.
* ```
     */
    setIsActive(isActive) {
        if (!this._getIsMutateSuppressed() && this.isActive !== isActive) {
            this._setIsActiveMutated(true);
        }
        this.isActive = isActive;
        return (this);
    }
    /**
* ```
     * Recurring check
* ```
     */
    setIsRecurring(isRecurring) {
        if (!this._getIsMutateSuppressed() && this.isRecurring !== isRecurring) {
            this._setIsRecurringMutated(true);
        }
        this.isRecurring = isRecurring;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The name.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The price.
* ```
     */
    setPrice(price) {
        if (!this._getIsMutateSuppressed() && this.price !== price) {
            this._setIsPriceMutated(true);
        }
        this.price = price;
        return (this);
    }
    /**
* ```
     * Price at time
* ```
     */
    setPriceAtTime(priceAtTime) {
        if (!this._getIsMutateSuppressed() && this.priceAtTime !== priceAtTime) {
            this._setIsPriceAtTimeMutated(true);
        }
        this.priceAtTime = priceAtTime;
        return (this);
    }
    /**
* ```
     * The product.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setProduct(product, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.product !== product) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(product, persistanceType);
            this._setIsProductMutated(true);
        }
        this.product = product;
        return (this);
    }
    /**
* ```
     * Product Color.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setProductColor(productColor, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.productColor !== productColor) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(productColor, persistanceType);
            this._setIsProductColorMutated(true);
        }
        this.productColor = productColor;
        return (this);
    }
    /**
* ```
     * The product pricing.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setProductPricing(productPricing, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.productPricing !== productPricing) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(productPricing, persistanceType);
            this._setIsProductPricingMutated(true);
        }
        this.productPricing = productPricing;
        return (this);
    }
    /**
* ```
     * Quantity
* ```
     */
    setQuantity(quantity) {
        if (!this._getIsMutateSuppressed() && this.quantity !== quantity) {
            this._setIsQuantityMutated(true);
        }
        this.quantity = quantity;
        return (this);
    }
    /**
* ```
     * Service start date
* ```
     */
    setServiceStartDate(serviceStartDate) {
        if (!this._getIsMutateSuppressed() && this.serviceStartDate !== serviceStartDate) {
            this._setIsServiceStartDateMutated(true);
        }
        this.serviceStartDate = serviceStartDate;
        return (this);
    }
    /**
* ```
     * The tax type.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setTax(tax, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.tax !== tax) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(tax, persistanceType);
            this._setIsTaxMutated(true);
        }
        this.tax = tax;
        return (this);
    }
    /**
* ```
     * The workspace.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspace(workspace, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.workspace !== workspace) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(workspace, persistanceType);
            this._setIsWorkspaceMutated(true);
        }
        this.workspace = workspace;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'agreementDocumentAgree',
            value: this.agreementDocumentAgree
        });
        this._setCurrentState2({
            attributeName: 'agreementDocumentVersion',
            value: this.agreementDocumentVersion
        });
        this._setCurrentState2({
            attributeName: 'cartSessionId',
            value: this.cartSessionId
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'inputValue',
            value: this.inputValue
        });
        this._setCurrentState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setCurrentState2({
            attributeName: 'isRecurring',
            value: this.isRecurring
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'price',
            value: this.price
        });
        this._setCurrentState2({
            attributeName: 'priceAtTime',
            value: this.priceAtTime
        });
        this._setCurrentState2({
            attributeName: 'product',
            value: this.product
        });
        this._setCurrentState2({
            attributeName: 'productColor',
            value: this.productColor
        });
        this._setCurrentState2({
            attributeName: 'productPricing',
            value: this.productPricing
        });
        this._setCurrentState2({
            attributeName: 'quantity',
            value: this.quantity
        });
        this._setCurrentState2({
            attributeName: 'serviceStartDate',
            value: this.serviceStartDate
        });
        this._setCurrentState2({
            attributeName: 'tax',
            value: this.tax
        });
        this._setCurrentState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'agreementDocumentAgree',
            value: this.agreementDocumentAgree
        });
        this._setInitializedState2({
            attributeName: 'agreementDocumentVersion',
            value: this.agreementDocumentVersion
        });
        this._setInitializedState2({
            attributeName: 'cartSessionId',
            value: this.cartSessionId
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'inputValue',
            value: this.inputValue
        });
        this._setInitializedState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setInitializedState2({
            attributeName: 'isRecurring',
            value: this.isRecurring
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'price',
            value: this.price
        });
        this._setInitializedState2({
            attributeName: 'priceAtTime',
            value: this.priceAtTime
        });
        this._setInitializedState2({
            attributeName: 'product',
            value: this.product
        });
        this._setInitializedState2({
            attributeName: 'productColor',
            value: this.productColor
        });
        this._setInitializedState2({
            attributeName: 'productPricing',
            value: this.productPricing
        });
        this._setInitializedState2({
            attributeName: 'quantity',
            value: this.quantity
        });
        this._setInitializedState2({
            attributeName: 'serviceStartDate',
            value: this.serviceStartDate
        });
        this._setInitializedState2({
            attributeName: 'tax',
            value: this.tax
        });
        this._setInitializedState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.agreementDocumentAgree);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.agreementDocumentVersion);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.cartSessionId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.inputValue);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isActive);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isRecurring);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.price);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.priceAtTime);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.product);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productPricing);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.quantity);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.serviceStartDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.tax);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspace);
        return (hashCode_n);
    }
}
exports.CartItem = CartItem;
CartItem.metaDataForCartItem = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.CartItem", CartItem);
//# sourceMappingURL=CartItem.js.map