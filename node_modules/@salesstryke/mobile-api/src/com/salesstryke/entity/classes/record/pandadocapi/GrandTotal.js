"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrandTotal = void 0;
const ClassFor_1 = require("../../../../data/ClassFor");
const JsonApiRecordBase_1 = require("../../../../jsonApi/JsonApiRecordBase");
const HashCodeUtil_1 = require("../../../../utils/HashCodeUtil");
class EntityAttributes {
    constructor() {
        this._amountIsMutated = "_amountIsMutated";
        this._currencyIsMutated = "_currencyIsMutated";
        this.amount = "amount";
        this.currency = "currency";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._amountIsMutated = "_amountIsMutated";
        this._currencyIsMutated = "_currencyIsMutated";
        this.amount = "amount";
        this.currency = "currency";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.record.pandadocapi.GrandTotal";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class GrandTotal extends JsonApiRecordBase_1.JsonApiRecordBase {
    constructor(p) {
        super(p);
        this._amountIsMutated = false;
        this._currencyIsMutated = false;
        this.amount = 0;
        this.currency = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.record.pandadocapi.GrandTotal");
    }
    /**
     *
     * @returns boolean
     */
    _getIsAmountMutated() {
        return (this._amountIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsCurrencyMutated() {
        return (this._currencyIsMutated);
    }
    /**
     * The grand total amount.
     * @returns number
     */
    getAmount() {
        return (this.amount);
    }
    /**
     * The grand total currency type.
     * @returns string | null
     */
    getCurrency() {
        return (this.currency);
    }
    /**
* ```
     *
* ```
     */
    _setIsAmountMutated(_amountIsMutated) {
        this._amountIsMutated = _amountIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsCurrencyMutated(_currencyIsMutated) {
        this._currencyIsMutated = _currencyIsMutated;
        return (this);
    }
    /**
* ```
     * The grand total amount.
* ```
     */
    setAmount(amount) {
        if (this.amount !== amount) {
            this._setIsAmountMutated(true);
        }
        this.amount = amount;
        return (this);
    }
    /**
* ```
     * The grand total currency type.
* ```
     */
    setCurrency(currency) {
        if (this.currency !== currency) {
            this._setIsCurrencyMutated(true);
        }
        this.currency = currency;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: 'amount',
            value: this.amount
        });
        this._setCurrentState2({
            attributeName: 'currency',
            value: this.currency
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: 'amount',
            value: this.amount
        });
        this._setInitializedState2({
            attributeName: 'currency',
            value: this.currency
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.amount);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.currency);
        return (hashCode_n);
    }
}
exports.GrandTotal = GrandTotal;
GrandTotal.metaDataForGrandTotal = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.record.pandadocapi.GrandTotal", GrandTotal);
//# sourceMappingURL=GrandTotal.js.map