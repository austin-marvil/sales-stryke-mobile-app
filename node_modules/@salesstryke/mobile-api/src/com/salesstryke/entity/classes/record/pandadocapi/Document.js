"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Document = void 0;
const ClassFor_1 = require("../../../../data/ClassFor");
const JsonApiRecordBase_1 = require("../../../../jsonApi/JsonApiRecordBase");
const HashCodeUtil_1 = require("../../../../utils/HashCodeUtil");
class EntityAttributes {
    constructor() {
        this._dateCreatedIsMutated = "_dateCreatedIsMutated";
        this._dateModifiedIsMutated = "_dateModifiedIsMutated";
        this._idIsMutated = "_idIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._statusIsMutated = "_statusIsMutated";
        this.dateCreated = "dateCreated";
        this.dateModified = "dateModified";
        this.fields = "fields";
        this.grandTotal = "grandTotal";
        this.id = "id";
        this.name = "name";
        this.pricing = "pricing";
        this.status = "status";
        this.template = "template";
        this.tokens = "tokens";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._dateCreatedIsMutated = "_dateCreatedIsMutated";
        this._dateModifiedIsMutated = "_dateModifiedIsMutated";
        this._idIsMutated = "_idIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._statusIsMutated = "_statusIsMutated";
        this.dateCreated = "dateCreated";
        this.dateModified = "dateModified";
        this.fields = "fields";
        this.grandTotal = "grandTotal";
        this.id = "id";
        this.name = "name";
        this.pricing = "pricing";
        this.status = "status";
        this.template = "template";
        this.tokens = "tokens";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.record.pandadocapi.Document";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class Document extends JsonApiRecordBase_1.JsonApiRecordBase {
    constructor(p) {
        super(p);
        this._dateCreatedIsMutated = false;
        this._dateModifiedIsMutated = false;
        this._idIsMutated = false;
        this._nameIsMutated = false;
        this._statusIsMutated = false;
        this.dateCreated = null;
        this.dateModified = null;
        this.fields = new Array();
        this.grandTotal = null;
        this.id = null;
        this.name = null;
        this.pricing = null;
        this.status = null;
        this.template = null;
        this.tokens = new Array();
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.record.pandadocapi.Document");
    }
    /**
     * The fields for the document.
     */
    addField(field) {
        this.fields.push(field);
        return (this);
    }
    /**
     * The tokens for the document.
     */
    addToken(token) {
        this.tokens.push(token);
        return (this);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDateCreatedMutated() {
        return (this._dateCreatedIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDateModifiedMutated() {
        return (this._dateModifiedIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsIdMutated() {
        return (this._idIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsStatusMutated() {
        return (this._statusIsMutated);
    }
    /**
     * The created date of the document.
     * @returns Date | null
     */
    getDateCreated() {
        return (this.dateCreated);
    }
    /**
     * The modified date of the document.
     * @returns Date | null
     */
    getDateModified() {
        return (this.dateModified);
    }
    /**
     * The fields for the document.
     * @returns Array<Field>
     */
    getFields() {
        return (this.fields);
    }
    /**
     * The grand total for the document.
     * @returns GrandTotal | null
     */
    getGrandTotal() {
        return (this.grandTotal);
    }
    /**
     * The id of the document.
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * The name of the document.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The pricing.
     * @returns Pricing | null
     */
    getPricing() {
        return (this.pricing);
    }
    /**
     * The status of the document.
     * @returns string | null
     */
    getStatus() {
        return (this.status);
    }
    /**
     * The template that was used to create the document.
     * @returns Template | null
     */
    getTemplate() {
        return (this.template);
    }
    /**
     * The tokens for the document.
     * @returns Array<Token>
     */
    getTokens() {
        return (this.tokens);
    }
    /**
* ```
     *
* ```
     */
    _setIsDateCreatedMutated(_dateCreatedIsMutated) {
        this._dateCreatedIsMutated = _dateCreatedIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDateModifiedMutated(_dateModifiedIsMutated) {
        this._dateModifiedIsMutated = _dateModifiedIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsIdMutated(_idIsMutated) {
        this._idIsMutated = _idIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsStatusMutated(_statusIsMutated) {
        this._statusIsMutated = _statusIsMutated;
        return (this);
    }
    /**
* ```
     * The created date of the document.
* ```
     */
    setDateCreated(dateCreated) {
        if (this.dateCreated !== dateCreated) {
            this._setIsDateCreatedMutated(true);
        }
        this.dateCreated = dateCreated;
        return (this);
    }
    /**
* ```
     * The modified date of the document.
* ```
     */
    setDateModified(dateModified) {
        if (this.dateModified !== dateModified) {
            this._setIsDateModifiedMutated(true);
        }
        this.dateModified = dateModified;
        return (this);
    }
    /**
* ```
     * The fields for the document.
* ```
     */
    setFields(fields) {
        this.fields = fields;
        return (this);
    }
    /**
* ```
     * The grand total for the document.
* ```
     */
    setGrandTotal(grandTotal) {
        this.grandTotal = grandTotal;
        return (this);
    }
    /**
* ```
     * The id of the document.
* ```
     */
    setId(id) {
        if (this.id !== id) {
            this._setIsIdMutated(true);
        }
        this.id = id;
        return (this);
    }
    /**
* ```
     * The name of the document.
* ```
     */
    setName(name) {
        if (this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The pricing.
* ```
     */
    setPricing(pricing) {
        this.pricing = pricing;
        return (this);
    }
    /**
* ```
     * The status of the document.
* ```
     */
    setStatus(status) {
        if (this.status !== status) {
            this._setIsStatusMutated(true);
        }
        this.status = status;
        return (this);
    }
    /**
* ```
     * The template that was used to create the document.
* ```
     */
    setTemplate(template) {
        this.template = template;
        return (this);
    }
    /**
* ```
     * The tokens for the document.
* ```
     */
    setTokens(tokens) {
        this.tokens = tokens;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: 'dateCreated',
            value: this.dateCreated
        });
        this._setCurrentState2({
            attributeName: 'dateModified',
            value: this.dateModified
        });
        this._setCurrentState2({
            attributeName: 'fields',
            value: this.fields
        });
        this._setCurrentState2({
            attributeName: 'grandTotal',
            value: this.grandTotal
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'pricing',
            value: this.pricing
        });
        this._setCurrentState2({
            attributeName: 'status',
            value: this.status
        });
        this._setCurrentState2({
            attributeName: 'template',
            value: this.template
        });
        this._setCurrentState2({
            attributeName: 'tokens',
            value: this.tokens
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: 'dateCreated',
            value: this.dateCreated
        });
        this._setInitializedState2({
            attributeName: 'dateModified',
            value: this.dateModified
        });
        this._setInitializedState2({
            attributeName: 'fields',
            value: this.fields
        });
        this._setInitializedState2({
            attributeName: 'grandTotal',
            value: this.grandTotal
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'pricing',
            value: this.pricing
        });
        this._setInitializedState2({
            attributeName: 'status',
            value: this.status
        });
        this._setInitializedState2({
            attributeName: 'template',
            value: this.template
        });
        this._setInitializedState2({
            attributeName: 'tokens',
            value: this.tokens
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.dateCreated);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.dateModified);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.fields);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.grandTotal);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.pricing);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.status);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.template);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.tokens);
        return (hashCode_n);
    }
}
exports.Document = Document;
Document.metaDataForDocument = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.record.pandadocapi.Document", Document);
//# sourceMappingURL=Document.js.map