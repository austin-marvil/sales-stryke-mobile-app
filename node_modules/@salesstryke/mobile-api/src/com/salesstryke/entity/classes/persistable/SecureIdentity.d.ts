/**
 * This file is auto generated DO NOT EDIT.
 */
import { Workspace } from './Workspace';
import { Organization } from './Organization';
import { SecurityRole } from './SecurityRole';
import { SecurityPermission } from './SecurityPermission';
import { Setting } from './Setting';
import { User } from './User';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _activeWorkspaceIsMutated: string;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isAuthenticatedIsMutated: string;
    _jsonStateStr: string;
    _jwtTokenIsMutated: string;
    _loginIsMutated: string;
    _organizationIsMutated: string;
    _passwordIsMutated: string;
    _rolesIsMutated: string;
    _securityPermissionsIsMutated: string;
    _settingIsMutated: string;
    _userIsMutated: string;
    _workspacesIsMutated: string;
    activeWorkspace: string;
    createdDate: string;
    id: string;
    isAuthenticated: string;
    jsonType: string;
    jwtToken: string;
    login: string;
    modifiedDate: string;
    organization: string;
    password: string;
    roles: string;
    securityPermissions: string;
    setting: string;
    user: string;
    workspaces: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _activeWorkspaceIsMutated: string;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isAuthenticatedIsMutated: string;
    _jsonStateStr: string;
    _jwtTokenIsMutated: string;
    _loginIsMutated: string;
    _organizationIsMutated: string;
    _passwordIsMutated: string;
    _rolesIsMutated: string;
    _securityPermissionsIsMutated: string;
    _settingIsMutated: string;
    _userIsMutated: string;
    _workspacesIsMutated: string;
    activeWorkspace: string;
    createdDate: string;
    _id: string;
    isAuthenticated: string;
    jsonType: string;
    jwtToken: string;
    login: string;
    modifiedDate: string;
    organization: string;
    password: string;
    roles: string;
    securityPermissions: string;
    setting: string;
    user: string;
    workspaces: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class SecureIdentity extends JsonApiPersistableBase {
    static metaDataForSecureIdentity: MetaData;
    private _activeWorkspaceIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _isAuthenticatedIsMutated;
    private _jwtTokenIsMutated;
    private _loginIsMutated;
    private _organizationIsMutated;
    private _passwordIsMutated;
    private _rolesIsMutated;
    private _securityPermissionsIsMutated;
    private _settingIsMutated;
    private _userIsMutated;
    private _workspacesIsMutated;
    private activeWorkspace;
    private id;
    private isAuthenticated;
    private jsonType;
    private jwtToken;
    private login;
    private organization;
    private password;
    private roles;
    private securityPermissions;
    private setting;
    private user;
    private workspaces;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): SecureIdentity;
    getClassName(): string;
    /**
     * The User Roles.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addRole(role: SecurityRole, persistanceType?: PersistenceType): SecureIdentity;
    /**
     * The User Roles.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeRole(role: SecurityRole, persistanceType?: PersistenceType): SecureIdentity;
    /**
     * MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addSecurityPermission(securityPermission: SecurityPermission, persistanceType?: PersistenceType): SecureIdentity;
    /**
     * MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeSecurityPermission(securityPermission: SecurityPermission, persistanceType?: PersistenceType): SecureIdentity;
    /**
     * Secure Identity Workspace allowed.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspace(workspace: Workspace, persistanceType?: PersistenceType): SecureIdentity;
    /**
     * Secure Identity Workspace allowed.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspace(workspace: Workspace, persistanceType?: PersistenceType): SecureIdentity;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsActiveWorkspaceMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAuthenticatedMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsJwtTokenMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLoginMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsPasswordMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRolesMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSecurityPermissionsMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSettingMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsUserMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsWorkspacesMutated(): boolean;
    /**
     * Current active workspace.
     * @returns Workspace | null
     */
    getActiveWorkspace(): Workspace | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * Identifies if the user is Authenticated.
     * @returns boolean
     */
    getIsAuthenticated(): boolean;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The JWT token for the Identity.
     * @returns string | null
     */
    getJwtToken(): string | null;
    /**
     * The user login for Authentication
     * @returns string | null
     */
    getLogin(): string | null;
    /**
     * The tenant Organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * The user password for Authentication
     * @returns string | null
     */
    getPassword(): string | null;
    /**
     * The User Roles.
     * @returns Array<SecurityRole>
     */
    getRoles(): Array<SecurityRole>;
    /**
     * MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.
     * @returns Array<SecurityPermission>
     */
    getSecurityPermissions(): Array<SecurityPermission>;
    /**
     * Organization Setting.
     * @returns Setting | null
     */
    getSetting(): Setting | null;
    /**
     * The User for the Identity.
     * @returns User | null
     */
    getUser(): User | null;
    /**
     * Secure Identity Workspace allowed.
     * @returns Array<Workspace>
     */
    getWorkspaces(): Array<Workspace>;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): SecureIdentity;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): SecureIdentity;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): SecureIdentity;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsActiveWorkspaceMutated(_activeWorkspaceIsMutated: boolean): SecureIdentity;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): SecureIdentity;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsAuthenticatedMutated(_isAuthenticatedIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsJwtTokenMutated(_jwtTokenIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsLoginMutated(_loginIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsPasswordMutated(_passwordIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsRolesMutated(_rolesIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsSecurityPermissionsMutated(_securityPermissionsIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsSettingMutated(_settingIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsUserMutated(_userIsMutated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    _setIsWorkspacesMutated(_workspacesIsMutated: boolean): SecureIdentity;
    /**
* ```
     * Current active workspace.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setActiveWorkspace(activeWorkspace: Workspace | null, persistanceType?: PersistenceType): SecureIdentity;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): SecureIdentity;
    /**
* ```
     * Identifies if the user is Authenticated.
* ```
     */
    setIsAuthenticated(isAuthenticated: boolean): SecureIdentity;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): SecureIdentity;
    /**
* ```
     * The JWT token for the Identity.
* ```
     */
    setJwtToken(jwtToken: string | null): SecureIdentity;
    /**
* ```
     * The user login for Authentication
* ```
     */
    setLogin(login: string | null): SecureIdentity;
    /**
* ```
     * The tenant Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): SecureIdentity;
    /**
* ```
     * The user password for Authentication
* ```
     */
    setPassword(password: string | null): SecureIdentity;
    /**
* ```
     * The User Roles.
* ```
     */
    setRoles(roles: Array<SecurityRole>): SecureIdentity;
    /**
* ```
     * MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.
* ```
     */
    setSecurityPermissions(securityPermissions: Array<SecurityPermission>): SecureIdentity;
    /**
* ```
     * Organization Setting.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSetting(setting: Setting | null, persistanceType?: PersistenceType): SecureIdentity;
    /**
* ```
     * The User for the Identity.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setUser(user: User | null, persistanceType?: PersistenceType): SecureIdentity;
    /**
* ```
     * Secure Identity Workspace allowed.
* ```
     */
    setWorkspaces(workspaces: Array<Workspace>): SecureIdentity;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
