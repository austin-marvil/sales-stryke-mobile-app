"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleBuilderField = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._defaultValueIsMutated = "_defaultValueIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._labelIsMutated = "_labelIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._operatorsIsMutated = "_operatorsIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._placeholderIsMutated = "_placeholderIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._valueEditorTypeIsMutated = "_valueEditorTypeIsMutated";
        this.createdDate = "createdDate";
        this.defaultValue = "defaultValue";
        this.description = "description";
        this.id = "id";
        this.jsonType = "jsonType";
        this.label = "label";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.operators = "operators";
        this.organization = "organization";
        this.placeholder = "placeholder";
        this.valueEditorType = "valueEditorType";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._defaultValueIsMutated = "_defaultValueIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._labelIsMutated = "_labelIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._operatorsIsMutated = "_operatorsIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._placeholderIsMutated = "_placeholderIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._valueEditorTypeIsMutated = "_valueEditorTypeIsMutated";
        this.createdDate = "createdDate";
        this.defaultValue = "defaultValue";
        this.description = "description";
        this._id = "_id";
        this.jsonType = "jsonType";
        this.label = "label";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.operators = "operators";
        this.organization = "organization";
        this.placeholder = "placeholder";
        this.valueEditorType = "valueEditorType";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.RuleBuilderField";
        this.mongDataModeName = "RuleBuilderField";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class RuleBuilderField extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._defaultValueIsMutated = false;
        this._descriptionIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._labelIsMutated = false;
        this._nameIsMutated = false;
        this._operatorsIsMutated = false;
        this._organizationIsMutated = false;
        this._placeholderIsMutated = false;
        this._valueEditorTypeIsMutated = false;
        this.defaultValue = null;
        this.description = null;
        this.id = null;
        this.jsonType = "com.salesstryke.entity.classes.persistable.RuleBuilderField";
        this.label = null;
        this.name = null;
        this.operators = null;
        this.organization = null;
        this.placeholder = null;
        this.valueEditorType = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._defaultValueIsMutated = false;
        this._descriptionIsMutated = false;
        this._labelIsMutated = false;
        this._nameIsMutated = false;
        this._operatorsIsMutated = false;
        this._organizationIsMutated = false;
        this._placeholderIsMutated = false;
        this._valueEditorTypeIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.RuleBuilderField");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsDefaultValueMutated() {
        return (this._defaultValueIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLabelMutated() {
        return (this._labelIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOperatorsMutated() {
        return (this._operatorsIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPlaceholderMutated() {
        return (this._placeholderIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsValueEditorTypeMutated() {
        return (this._valueEditorTypeIsMutated);
    }
    /**
     * The defaultValue of the rule builder field.
     * @returns string | null
     */
    getDefaultValue() {
        return (this.defaultValue);
    }
    /**
     * The description.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The label of the rule builder field.
     * @returns string | null
     */
    getLabel() {
        return (this.label);
    }
    /**
     * The name of the rule builder field.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The operators of the rule builder field.
     * @returns string | null
     */
    getOperators() {
        return (this.operators);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The placeholder of the rule builder field.
     * @returns string | null
     */
    getPlaceholder() {
        return (this.placeholder);
    }
    /**
     * The valueEditorType of the rule builder field.
     * @returns string | null
     */
    getValueEditorType() {
        return (this.valueEditorType);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDefaultValueMutated(_defaultValueIsMutated) {
        this._defaultValueIsMutated = _defaultValueIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLabelMutated(_labelIsMutated) {
        this._labelIsMutated = _labelIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOperatorsMutated(_operatorsIsMutated) {
        this._operatorsIsMutated = _operatorsIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPlaceholderMutated(_placeholderIsMutated) {
        this._placeholderIsMutated = _placeholderIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsValueEditorTypeMutated(_valueEditorTypeIsMutated) {
        this._valueEditorTypeIsMutated = _valueEditorTypeIsMutated;
        return (this);
    }
    /**
* ```
     * The defaultValue of the rule builder field.
* ```
     */
    setDefaultValue(defaultValue) {
        if (!this._getIsMutateSuppressed() && this.defaultValue !== defaultValue) {
            this._setIsDefaultValueMutated(true);
        }
        this.defaultValue = defaultValue;
        return (this);
    }
    /**
* ```
     * The description.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The label of the rule builder field.
* ```
     */
    setLabel(label) {
        if (!this._getIsMutateSuppressed() && this.label !== label) {
            this._setIsLabelMutated(true);
        }
        this.label = label;
        return (this);
    }
    /**
* ```
     * The name of the rule builder field.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The operators of the rule builder field.
* ```
     */
    setOperators(operators) {
        if (!this._getIsMutateSuppressed() && this.operators !== operators) {
            this._setIsOperatorsMutated(true);
        }
        this.operators = operators;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The placeholder of the rule builder field.
* ```
     */
    setPlaceholder(placeholder) {
        if (!this._getIsMutateSuppressed() && this.placeholder !== placeholder) {
            this._setIsPlaceholderMutated(true);
        }
        this.placeholder = placeholder;
        return (this);
    }
    /**
* ```
     * The valueEditorType of the rule builder field.
* ```
     */
    setValueEditorType(valueEditorType) {
        if (!this._getIsMutateSuppressed() && this.valueEditorType !== valueEditorType) {
            this._setIsValueEditorTypeMutated(true);
        }
        this.valueEditorType = valueEditorType;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'defaultValue',
            value: this.defaultValue
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'label',
            value: this.label
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'operators',
            value: this.operators
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'placeholder',
            value: this.placeholder
        });
        this._setCurrentState2({
            attributeName: 'valueEditorType',
            value: this.valueEditorType
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'defaultValue',
            value: this.defaultValue
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'label',
            value: this.label
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'operators',
            value: this.operators
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'placeholder',
            value: this.placeholder
        });
        this._setInitializedState2({
            attributeName: 'valueEditorType',
            value: this.valueEditorType
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.defaultValue);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.label);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.operators);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.placeholder);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.valueEditorType);
        return (hashCode_n);
    }
}
exports.RuleBuilderField = RuleBuilderField;
RuleBuilderField.metaDataForRuleBuilderField = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.RuleBuilderField", RuleBuilderField);
//# sourceMappingURL=RuleBuilderField.js.map