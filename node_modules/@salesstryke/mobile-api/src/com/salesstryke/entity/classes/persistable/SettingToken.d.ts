/**
 * This file is auto generated DO NOT EDIT.
 */
import { EmailAddress } from './EmailAddress';
import { Organization } from './Organization';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _entityState: string;
    _expirationIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _jsonStateStr: string;
    _notificationEmailsIsMutated: string;
    _organizationIsMutated: string;
    _parentIdIsMutated: string;
    _refreshTokenIsMutated: string;
    _relationshipPersistableType: string;
    _tokenIsMutated: string;
    createdDate: string;
    expiration: string;
    id: string;
    jsonType: string;
    modifiedDate: string;
    notificationEmails: string;
    organization: string;
    parentId: string;
    refreshToken: string;
    token: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _entityState: string;
    _expirationIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _jsonStateStr: string;
    _notificationEmailsIsMutated: string;
    _organizationIsMutated: string;
    _parentIdIsMutated: string;
    _refreshTokenIsMutated: string;
    _relationshipPersistableType: string;
    _tokenIsMutated: string;
    createdDate: string;
    expiration: string;
    _id: string;
    jsonType: string;
    modifiedDate: string;
    notificationEmails: string;
    organization: string;
    parentId: string;
    refreshToken: string;
    token: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class SettingToken extends JsonApiPersistableBase {
    static metaDataForSettingToken: MetaData;
    private _expirationIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _notificationEmailsIsMutated;
    private _organizationIsMutated;
    private _parentIdIsMutated;
    private _refreshTokenIsMutated;
    private _tokenIsMutated;
    private expiration;
    private id;
    private jsonType;
    private notificationEmails;
    private organization;
    private parentId;
    private refreshToken;
    private token;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): SettingToken;
    getClassName(): string;
    /**
     * The email address to send email to for expiration notifications.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addNotificationEmail(notificationEmail: EmailAddress, persistanceType?: PersistenceType): SettingToken;
    /**
     * The email address to send email to for expiration notifications.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeNotificationEmail(notificationEmail: EmailAddress, persistanceType?: PersistenceType): SettingToken;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType(): number;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsExpirationMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsNotificationEmailsMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsParentIdMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRefreshTokenMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsTokenMutated(): boolean;
    /**
     * The expiration date of the token.
     * @returns Date | null
     */
    getExpiration(): Date | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The email address to send email to for expiration notifications.
     * @returns Array<EmailAddress>
     */
    getNotificationEmails(): Array<EmailAddress>;
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * The parent ID
     * @returns string | null
     */
    getParentId(): string | null;
    /**
     * The refresh token
     * @returns string | null
     */
    getRefreshToken(): string | null;
    /**
     * The token
     * @returns string | null
     */
    getToken(): string | null;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): SettingToken;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): SettingToken;
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType: number): SettingToken;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): SettingToken;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsExpirationMutated(_expirationIsMutated: boolean): SettingToken;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): SettingToken;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsNotificationEmailsMutated(_notificationEmailsIsMutated: boolean): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsParentIdMutated(_parentIdIsMutated: boolean): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsRefreshTokenMutated(_refreshTokenIsMutated: boolean): SettingToken;
    /**
* ```
     *
* ```
     */
    _setIsTokenMutated(_tokenIsMutated: boolean): SettingToken;
    /**
* ```
     * The expiration date of the token.
* ```
     */
    setExpiration(expiration: Date | null): SettingToken;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): SettingToken;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): SettingToken;
    /**
* ```
     * The email address to send email to for expiration notifications.
* ```
     */
    setNotificationEmails(notificationEmails: Array<EmailAddress>): SettingToken;
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): SettingToken;
    /**
* ```
     * The parent ID
* ```
     */
    setParentId(parentId: string | null): SettingToken;
    /**
* ```
     * The refresh token
* ```
     */
    setRefreshToken(refreshToken: string | null): SettingToken;
    /**
* ```
     * The token
* ```
     */
    setToken(token: string | null): SettingToken;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
