/**
 * This file is auto generated DO NOT EDIT.
 */
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
declare class EntityAttributes {
    _attributeDataTypeIsMutated: string;
    _attributeUUIDIsMutated: string;
    _attributeValueIsMutated: string;
    _entityIdIsMutated: string;
    _entityNamespaceIsMutated: string;
    _entityState: string;
    _entityUUIDIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isRemoveFromRelationship: string;
    _isRemoveFromRelationshipIsMutated: string;
    _jsonStateStr: string;
    _relationshipPersistableType: string;
    _userUUIDIsMutated: string;
    attributeDataType: string;
    attributeUUID: string;
    attributeValue: string;
    createdDate: string;
    entityId: string;
    entityNamespace: string;
    entityUUID: string;
    id: string;
    jsonType: string;
    modifiedDate: string;
    userUUID: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _attributeDataTypeIsMutated: string;
    _attributeUUIDIsMutated: string;
    _attributeValueIsMutated: string;
    _entityIdIsMutated: string;
    _entityNamespaceIsMutated: string;
    _entityState: string;
    _entityUUIDIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isRemoveFromRelationship: string;
    _isRemoveFromRelationshipIsMutated: string;
    _jsonStateStr: string;
    _relationshipPersistableType: string;
    _userUUIDIsMutated: string;
    attributeDataType: string;
    attributeUUID: string;
    attributeValue: string;
    createdDate: string;
    entityId: string;
    entityNamespace: string;
    entityUUID: string;
    _id: string;
    jsonType: string;
    modifiedDate: string;
    userUUID: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class History extends JsonApiPersistableBase {
    static metaDataForHistory: MetaData;
    private _attributeDataTypeIsMutated;
    private _attributeUUIDIsMutated;
    private _attributeValueIsMutated;
    private _entityIdIsMutated;
    private _entityNamespaceIsMutated;
    private _entityUUIDIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _isRemoveFromRelationship;
    private _isRemoveFromRelationshipIsMutated;
    private _userUUIDIsMutated;
    private attributeDataType;
    private attributeUUID;
    private attributeValue;
    private entityId;
    private entityNamespace;
    private entityUUID;
    private id;
    private jsonType;
    private userUUID;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): History;
    getClassName(): string;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType(): number;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsAttributeDataTypeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAttributeUUIDMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAttributeValueMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsEntityIdMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsEntityNamespaceMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsEntityUUIDMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsUserUUIDMutated(): boolean;
    /**
     * The the attribute DataType.
     * @returns number
     */
    getAttributeDataType(): number;
    /**
     * The Entity Attribute UUID value.
     * @returns string | null
     */
    getAttributeUUID(): string | null;
    /**
     * The Entity Attribute UUID value.
     * @returns string | null
     */
    getAttributeValue(): string | null;
    /**
     * The Entity ID value for the specific document.
     * @returns string | null
     */
    getEntityId(): string | null;
    /**
     * The Entity namespace value. DO NOT USE THIS TO Query against. If the Entity Name is changed, this will not be accurate. ONLY query by entityUUID.
     * @returns string | null
     */
    getEntityNamespace(): string | null;
    /**
     * The Entity UUID value, for the Entity type. This is NOT a document ID.
     * @returns string | null
     */
    getEntityUUID(): string | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The userUUID that made the change.
     * @returns string | null
     */
    getUserUUID(): string | null;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): History;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): History;
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType: number): History;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): History;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): History;
    /**
* ```
     *
* ```
     */
    _setIsAttributeDataTypeMutated(_attributeDataTypeIsMutated: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsAttributeUUIDMutated(_attributeUUIDIsMutated: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsAttributeValueMutated(_attributeValueIsMutated: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsEntityIdMutated(_entityIdIsMutated: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsEntityNamespaceMutated(_entityNamespaceIsMutated: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsEntityUUIDMutated(_entityUUIDIsMutated: boolean): History;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): History;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): History;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated: boolean): History;
    /**
* ```
     *
* ```
     */
    _setIsUserUUIDMutated(_userUUIDIsMutated: boolean): History;
    /**
* ```
     * The the attribute DataType.
* ```
     */
    setAttributeDataType(attributeDataType: number): History;
    /**
* ```
     * The Entity Attribute UUID value.
* ```
     */
    setAttributeUUID(attributeUUID: string | null): History;
    /**
* ```
     * The Entity Attribute UUID value.
* ```
     */
    setAttributeValue(attributeValue: string | null): History;
    /**
* ```
     * The Entity ID value for the specific document.
* ```
     */
    setEntityId(entityId: string | null): History;
    /**
* ```
     * The Entity namespace value. DO NOT USE THIS TO Query against. If the Entity Name is changed, this will not be accurate. ONLY query by entityUUID.
* ```
     */
    setEntityNamespace(entityNamespace: string | null): History;
    /**
* ```
     * The Entity UUID value, for the Entity type. This is NOT a document ID.
* ```
     */
    setEntityUUID(entityUUID: string | null): History;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): History;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): History;
    /**
* ```
     * The userUUID that made the change.
* ```
     */
    setUserUUID(userUUID: string | null): History;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
