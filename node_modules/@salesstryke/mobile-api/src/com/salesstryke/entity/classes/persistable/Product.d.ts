/**
 * This file is auto generated DO NOT EDIT.
 */
import { AgreementDocument } from './AgreementDocument';
import { KmlType } from './KmlType';
import { Organization } from './Organization';
import { ProductCategoryProduct } from './ProductCategoryProduct';
import { ProductColor } from './ProductColor';
import { ProductImage } from './ProductImage';
import { ProductPricing } from './ProductPricing';
import { Workspace } from './Workspace';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _activeEndDateIsMutated: string;
    _activeStartDateIsMutated: string;
    _agreementDocumentIsMutated: string;
    _descriptionIsMutated: string;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isActiveIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isRemoveFromRelationship: string;
    _isRemoveFromRelationshipIsMutated: string;
    _jsonStateStr: string;
    _kmlTypeIsMutated: string;
    _labelIsMutated: string;
    _nameIsMutated: string;
    _organizationIsMutated: string;
    _productCategoriesIsMutated: string;
    _productColorsIsMutated: string;
    _productImagesIsMutated: string;
    _productPricingsIsMutated: string;
    _uiDescriptionIsMutated: string;
    _uiNameIsMutated: string;
    _workspaceIsMutated: string;
    activeEndDate: string;
    activeStartDate: string;
    agreementDocument: string;
    createdDate: string;
    description: string;
    id: string;
    isActive: string;
    jsonType: string;
    kmlType: string;
    label: string;
    modifiedDate: string;
    name: string;
    organization: string;
    productCategories: string;
    productColors: string;
    productImages: string;
    productPricings: string;
    uiDescription: string;
    uiName: string;
    workspace: string;
}
declare class MongoVirtual {
    productCategories: string;
    productColors: string;
    productImages: string;
    productPricings: string;
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _activeEndDateIsMutated: string;
    _activeStartDateIsMutated: string;
    _agreementDocumentIsMutated: string;
    _descriptionIsMutated: string;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isActiveIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isRemoveFromRelationship: string;
    _isRemoveFromRelationshipIsMutated: string;
    _jsonStateStr: string;
    _kmlTypeIsMutated: string;
    _labelIsMutated: string;
    _nameIsMutated: string;
    _organizationIsMutated: string;
    _productCategoriesIsMutated: string;
    _productColorsIsMutated: string;
    _productImagesIsMutated: string;
    _productPricingsIsMutated: string;
    _uiDescriptionIsMutated: string;
    _uiNameIsMutated: string;
    _workspaceIsMutated: string;
    activeEndDate: string;
    activeStartDate: string;
    agreementDocument: string;
    createdDate: string;
    description: string;
    _id: string;
    isActive: string;
    jsonType: string;
    kmlType: string;
    label: string;
    modifiedDate: string;
    name: string;
    organization: string;
    productCategories: string;
    productColors: string;
    productImages: string;
    productPricings: string;
    uiDescription: string;
    uiName: string;
    workspace: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class Product extends JsonApiPersistableBase {
    static metaDataForProduct: MetaData;
    private _activeEndDateIsMutated;
    private _activeStartDateIsMutated;
    private _agreementDocumentIsMutated;
    private _descriptionIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isActiveIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _isRemoveFromRelationship;
    private _isRemoveFromRelationshipIsMutated;
    private _kmlTypeIsMutated;
    private _labelIsMutated;
    private _nameIsMutated;
    private _organizationIsMutated;
    private _productCategoriesIsMutated;
    private _productColorsIsMutated;
    private _productImagesIsMutated;
    private _productPricingsIsMutated;
    private _uiDescriptionIsMutated;
    private _uiNameIsMutated;
    private _workspaceIsMutated;
    private activeEndDate;
    private activeStartDate;
    private agreementDocument;
    private description;
    private id;
    private isActive;
    private jsonType;
    private kmlType;
    private label;
    private name;
    private organization;
    private productCategories;
    private productColors;
    private productImages;
    private productPricings;
    private uiDescription;
    private uiName;
    private workspace;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): Product;
    getClassName(): string;
    /**
     * The product category for the product.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductCategory(productCategory: ProductCategoryProduct, persistanceType?: PersistenceType): Product;
    /**
     * The product category for the product.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductCategory(productCategory: ProductCategoryProduct, persistanceType?: PersistenceType): Product;
    /**
     * The product color for the product.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductColor(productColor: ProductColor, persistanceType?: PersistenceType): Product;
    /**
     * The product color for the product.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductColor(productColor: ProductColor, persistanceType?: PersistenceType): Product;
    /**
     * The product image for the product.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductImage(productImage: ProductImage, persistanceType?: PersistenceType): Product;
    /**
     * The product image for the product.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductImage(productImage: ProductImage, persistanceType?: PersistenceType): Product;
    /**
     * The product pricing for the product.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addProductPricing(productPricing: ProductPricing, persistanceType?: PersistenceType): Product;
    /**
     * The product pricing for the product.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeProductPricing(productPricing: ProductPricing, persistanceType?: PersistenceType): Product;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsActiveEndDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsActiveStartDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAgreementDocumentMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsKmlTypeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLabelMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsProductCategoriesMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsProductColorsMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsProductImagesMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsProductPricingsMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsUiDescriptionMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsUiNameMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceMutated(): boolean;
    /**
     * Active end date.
     * @returns Date | null
     */
    getActiveEndDate(): Date | null;
    /**
     * Active start date.
     * @returns Date | null
     */
    getActiveStartDate(): Date | null;
    /**
     * The agreement document.
     * @returns AgreementDocument | null
     */
    getAgreementDocument(): AgreementDocument | null;
    /**
     * The description of product.
     * @returns string | null
     */
    getDescription(): string | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * Identifies if the product is active.
     * @returns boolean
     */
    getIsActive(): boolean;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The Kml type for the product.
     * @returns KmlType | null
     */
    getKmlType(): KmlType | null;
    /**
     * The label of product.
     * @returns string | null
     */
    getLabel(): string | null;
    /**
     * The name of product.
     * @returns string | null
     */
    getName(): string | null;
    /**
     * The tenant Organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * The product category for the product.
     * @returns Array<ProductCategoryProduct>
     */
    getProductCategories(): Array<ProductCategoryProduct>;
    /**
     * The product color for the product.
     * @returns Array<ProductColor>
     */
    getProductColors(): Array<ProductColor>;
    /**
     * The product image for the product.
     * @returns Array<ProductImage>
     */
    getProductImages(): Array<ProductImage>;
    /**
     * The product pricing for the product.
     * @returns Array<ProductPricing>
     */
    getProductPricings(): Array<ProductPricing>;
    /**
     * The description of product for the UI.
     * @returns string | null
     */
    getUiDescription(): string | null;
    /**
     * The name of product for the UI.
     * @returns string | null
     */
    getUiName(): string | null;
    /**
     * The product workspace id.
     * @returns Workspace | null
     */
    getWorkspace(): Workspace | null;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): Product;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): Product;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): Product;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): Product;
    /**
* ```
     *
* ```
     */
    _setIsActiveEndDateMutated(_activeEndDateIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsActiveStartDateMutated(_activeStartDateIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsAgreementDocumentMutated(_agreementDocumentIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated: boolean): Product;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): Product;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): Product;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsKmlTypeMutated(_kmlTypeIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsLabelMutated(_labelIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsProductCategoriesMutated(_productCategoriesIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsProductColorsMutated(_productColorsIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsProductImagesMutated(_productImagesIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsProductPricingsMutated(_productPricingsIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsUiDescriptionMutated(_uiDescriptionIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsUiNameMutated(_uiNameIsMutated: boolean): Product;
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceMutated(_workspaceIsMutated: boolean): Product;
    /**
* ```
     * Active end date.
* ```
     */
    setActiveEndDate(activeEndDate: Date | null): Product;
    /**
* ```
     * Active start date.
* ```
     */
    setActiveStartDate(activeStartDate: Date | null): Product;
    /**
* ```
     * The agreement document.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setAgreementDocument(agreementDocument: AgreementDocument | null, persistanceType?: PersistenceType): Product;
    /**
* ```
     * The description of product.
* ```
     */
    setDescription(description: string | null): Product;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): Product;
    /**
* ```
     * Identifies if the product is active.
* ```
     */
    setIsActive(isActive: boolean): Product;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): Product;
    /**
* ```
     * The Kml type for the product.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setKmlType(kmlType: KmlType | null, persistanceType?: PersistenceType): Product;
    /**
* ```
     * The label of product.
* ```
     */
    setLabel(label: string | null): Product;
    /**
* ```
     * The name of product.
* ```
     */
    setName(name: string | null): Product;
    /**
* ```
     * The tenant Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): Product;
    /**
* ```
     * The product category for the product.
* ```
     */
    setProductCategories(productCategories: Array<ProductCategoryProduct>): Product;
    /**
* ```
     * The product color for the product.
* ```
     */
    setProductColors(productColors: Array<ProductColor>): Product;
    /**
* ```
     * The product image for the product.
* ```
     */
    setProductImages(productImages: Array<ProductImage>): Product;
    /**
* ```
     * The product pricing for the product.
* ```
     */
    setProductPricings(productPricings: Array<ProductPricing>): Product;
    /**
* ```
     * The description of product for the UI.
* ```
     */
    setUiDescription(uiDescription: string | null): Product;
    /**
* ```
     * The name of product for the UI.
* ```
     */
    setUiName(uiName: string | null): Product;
    /**
* ```
     * The product workspace id.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspace(workspace: Workspace | null, persistanceType?: PersistenceType): Product;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
