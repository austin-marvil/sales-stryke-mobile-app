/**
 * This file is auto generated DO NOT EDIT.
 */
import { Organization } from './Organization';
import { Workspace } from './Workspace';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _allDayIsMutated: string;
    _backgroundColorIsMutated: string;
    _borderColorIsMutated: string;
    _descriptionIsMutated: string;
    _entityState: string;
    _eventEndDateIsMutated: string;
    _eventEndTimeIsMutated: string;
    _eventStartDateIsMutated: string;
    _eventStartTimeIsMutated: string;
    _excludeDatesIsMutated: string;
    _frequencyIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _intervalIsMutated: string;
    _isActiveIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _jsonStateStr: string;
    _nameIsMutated: string;
    _nthIsMutated: string;
    _organizationIsMutated: string;
    _originalEventStartDateIsMutated: string;
    _recurringEndDateIsMutated: string;
    _recurringEventIdIsMutated: string;
    _recurringStartDateIsMutated: string;
    _relationshipPersistableType: string;
    _resourceIdIsMutated: string;
    _workspaceIsMutated: string;
    allDay: string;
    backgroundColor: string;
    borderColor: string;
    createdDate: string;
    description: string;
    eventEndDate: string;
    eventEndTime: string;
    eventStartDate: string;
    eventStartTime: string;
    excludeDates: string;
    frequency: string;
    id: string;
    interval: string;
    isActive: string;
    jsonType: string;
    modifiedDate: string;
    name: string;
    nth: string;
    organization: string;
    originalEventStartDate: string;
    recurringEndDate: string;
    recurringEventId: string;
    recurringStartDate: string;
    resourceId: string;
    workspace: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _allDayIsMutated: string;
    _backgroundColorIsMutated: string;
    _borderColorIsMutated: string;
    _descriptionIsMutated: string;
    _entityState: string;
    _eventEndDateIsMutated: string;
    _eventEndTimeIsMutated: string;
    _eventStartDateIsMutated: string;
    _eventStartTimeIsMutated: string;
    _excludeDatesIsMutated: string;
    _frequencyIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _intervalIsMutated: string;
    _isActiveIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _jsonStateStr: string;
    _nameIsMutated: string;
    _nthIsMutated: string;
    _organizationIsMutated: string;
    _originalEventStartDateIsMutated: string;
    _recurringEndDateIsMutated: string;
    _recurringEventIdIsMutated: string;
    _recurringStartDateIsMutated: string;
    _relationshipPersistableType: string;
    _resourceIdIsMutated: string;
    _workspaceIsMutated: string;
    allDay: string;
    backgroundColor: string;
    borderColor: string;
    createdDate: string;
    description: string;
    eventEndDate: string;
    eventEndTime: string;
    eventStartDate: string;
    eventStartTime: string;
    excludeDates: string;
    frequency: string;
    _id: string;
    interval: string;
    isActive: string;
    jsonType: string;
    modifiedDate: string;
    name: string;
    nth: string;
    organization: string;
    originalEventStartDate: string;
    recurringEndDate: string;
    recurringEventId: string;
    recurringStartDate: string;
    resourceId: string;
    workspace: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class CalendarItem extends JsonApiPersistableBase {
    static metaDataForCalendarItem: MetaData;
    private _allDayIsMutated;
    private _backgroundColorIsMutated;
    private _borderColorIsMutated;
    private _descriptionIsMutated;
    private _eventEndDateIsMutated;
    private _eventEndTimeIsMutated;
    private _eventStartDateIsMutated;
    private _eventStartTimeIsMutated;
    private _excludeDatesIsMutated;
    private _frequencyIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _intervalIsMutated;
    private _isActiveIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _nameIsMutated;
    private _nthIsMutated;
    private _organizationIsMutated;
    private _originalEventStartDateIsMutated;
    private _recurringEndDateIsMutated;
    private _recurringEventIdIsMutated;
    private _recurringStartDateIsMutated;
    private _resourceIdIsMutated;
    private _workspaceIsMutated;
    private allDay;
    private backgroundColor;
    private borderColor;
    private description;
    private eventEndDate;
    private eventEndTime;
    private eventStartDate;
    private eventStartTime;
    private excludeDates;
    private frequency;
    private id;
    private interval;
    private isActive;
    private jsonType;
    private name;
    private nth;
    private organization;
    private originalEventStartDate;
    private recurringEndDate;
    private recurringEventId;
    private recurringStartDate;
    private resourceId;
    private workspace;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): CalendarItem;
    getClassName(): string;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType(): number;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsAllDayMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsBackgroundColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsBorderColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsEventEndDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsEventEndTimeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsEventStartDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsEventStartTimeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsExcludeDatesMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsFrequencyMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsIntervalMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsNthMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOriginalEventStartDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRecurringEndDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRecurringEventIdMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRecurringStartDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsResourceIdMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceMutated(): boolean;
    /**
     * Identify if event is all day.
     * @returns boolean
     */
    getAllDay(): boolean;
    /**
     * The background color
     * @returns string | null
     */
    getBackgroundColor(): string | null;
    /**
     * The border color
     * @returns string | null
     */
    getBorderColor(): string | null;
    /**
     * The description.
     * @returns string | null
     */
    getDescription(): string | null;
    /**
     * Event end date of the event in YYYY-MM-DD format.
     * @returns string | null
     */
    getEventEndDate(): string | null;
    /**
     * The event end time in HH:mm format.
     * @returns string | null
     */
    getEventEndTime(): string | null;
    /**
     * Event start date of the event in YYYY-MM-DD format.
     * @returns string | null
     */
    getEventStartDate(): string | null;
    /**
     * The event start time in HH:mm format.
     * @returns string | null
     */
    getEventStartTime(): string | null;
    /**
     * An json data that contains an array of dates to exclude from the recurrence.
     * @returns Object
     */
    getExcludeDates(): Object;
    /**
     * The frequency of the recurrence (e.g., daily, weekly, monthly).
     * @returns string | null
     */
    getFrequency(): string | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * The interval of the recurrence (e.g., every 2 weeks).
     * @returns number
     */
    getInterval(): number;
    /**
     * Identifies if active.
     * @returns boolean
     */
    getIsActive(): boolean;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The data name
     * @returns string | null
     */
    getName(): string | null;
    /**
     * The nth occurrence within the frequency (e.g., 2nd Monday of the month). Monthly frequency only.
     * @returns number
     */
    getNth(): number;
    /**
     * Entity Organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * For an instance of a recurring event. The original event start date
     * @returns Date | null
     */
    getOriginalEventStartDate(): Date | null;
    /**
     * The end date of the recurrence pattern.
     * @returns Date | null
     */
    getRecurringEndDate(): Date | null;
    /**
     * The recurring event Id it belong to or branch off from when created
     * @returns string | null
     */
    getRecurringEventId(): string | null;
    /**
     * The start date of the recurrence pattern.
     * @returns Date | null
     */
    getRecurringStartDate(): Date | null;
    /**
     * The resource id (kmlLayer.id, KmlGeometry.id, etc.)
     * @returns string | null
     */
    getResourceId(): string | null;
    /**
     * Entity Workspace.
     * @returns Workspace | null
     */
    getWorkspace(): Workspace | null;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): CalendarItem;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): CalendarItem;
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType: number): CalendarItem;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): CalendarItem;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsAllDayMutated(_allDayIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsBackgroundColorMutated(_backgroundColorIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsBorderColorMutated(_borderColorIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsEventEndDateMutated(_eventEndDateIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsEventEndTimeMutated(_eventEndTimeIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsEventStartDateMutated(_eventStartDateIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsEventStartTimeMutated(_eventStartTimeIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsExcludeDatesMutated(_excludeDatesIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsFrequencyMutated(_frequencyIsMutated: boolean): CalendarItem;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): CalendarItem;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsIntervalMutated(_intervalIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsNthMutated(_nthIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsOriginalEventStartDateMutated(_originalEventStartDateIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsRecurringEndDateMutated(_recurringEndDateIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsRecurringEventIdMutated(_recurringEventIdIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsRecurringStartDateMutated(_recurringStartDateIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsResourceIdMutated(_resourceIdIsMutated: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceMutated(_workspaceIsMutated: boolean): CalendarItem;
    /**
* ```
     * Identify if event is all day.
* ```
     */
    setAllDay(allDay: boolean): CalendarItem;
    /**
* ```
     * The background color
* ```
     */
    setBackgroundColor(backgroundColor: string | null): CalendarItem;
    /**
* ```
     * The border color
* ```
     */
    setBorderColor(borderColor: string | null): CalendarItem;
    /**
* ```
     * The description.
* ```
     */
    setDescription(description: string | null): CalendarItem;
    /**
* ```
     * Event end date of the event in YYYY-MM-DD format.
* ```
     */
    setEventEndDate(eventEndDate: string | null): CalendarItem;
    /**
* ```
     * The event end time in HH:mm format.
* ```
     */
    setEventEndTime(eventEndTime: string | null): CalendarItem;
    /**
* ```
     * Event start date of the event in YYYY-MM-DD format.
* ```
     */
    setEventStartDate(eventStartDate: string | null): CalendarItem;
    /**
* ```
     * The event start time in HH:mm format.
* ```
     */
    setEventStartTime(eventStartTime: string | null): CalendarItem;
    /**
* ```
     * An json data that contains an array of dates to exclude from the recurrence.
* ```
     */
    setExcludeDates(excludeDates: Object): CalendarItem;
    /**
* ```
     * The frequency of the recurrence (e.g., daily, weekly, monthly).
* ```
     */
    setFrequency(frequency: string | null): CalendarItem;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): CalendarItem;
    /**
* ```
     * The interval of the recurrence (e.g., every 2 weeks).
* ```
     */
    setInterval(interval: number): CalendarItem;
    /**
* ```
     * Identifies if active.
* ```
     */
    setIsActive(isActive: boolean): CalendarItem;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): CalendarItem;
    /**
* ```
     * The data name
* ```
     */
    setName(name: string | null): CalendarItem;
    /**
* ```
     * The nth occurrence within the frequency (e.g., 2nd Monday of the month). Monthly frequency only.
* ```
     */
    setNth(nth: number): CalendarItem;
    /**
* ```
     * Entity Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): CalendarItem;
    /**
* ```
     * For an instance of a recurring event. The original event start date
* ```
     */
    setOriginalEventStartDate(originalEventStartDate: Date | null): CalendarItem;
    /**
* ```
     * The end date of the recurrence pattern.
* ```
     */
    setRecurringEndDate(recurringEndDate: Date | null): CalendarItem;
    /**
* ```
     * The recurring event Id it belong to or branch off from when created
* ```
     */
    setRecurringEventId(recurringEventId: string | null): CalendarItem;
    /**
* ```
     * The start date of the recurrence pattern.
* ```
     */
    setRecurringStartDate(recurringStartDate: Date | null): CalendarItem;
    /**
* ```
     * The resource id (kmlLayer.id, KmlGeometry.id, etc.)
* ```
     */
    setResourceId(resourceId: string | null): CalendarItem;
    /**
* ```
     * Entity Workspace.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspace(workspace: Workspace | null, persistanceType?: PersistenceType): CalendarItem;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
