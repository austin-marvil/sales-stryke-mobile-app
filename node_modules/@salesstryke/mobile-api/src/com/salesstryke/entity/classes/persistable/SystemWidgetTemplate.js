"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemWidgetTemplate = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistenceType_1 = require("../../../data/PersistenceType");
class EntityAttributes {
    constructor() {
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._systemWidgetAttributeTemplatesIsMutated = "_systemWidgetAttributeTemplatesIsMutated";
        this._systemWidgetViewTemplatesIsMutated = "_systemWidgetViewTemplatesIsMutated";
        this._tokenIsMutated = "_tokenIsMutated";
        this._versionIsMutated = "_versionIsMutated";
        this.createdDate = "createdDate";
        this.description = "description";
        this.id = "id";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.systemWidgetAttributeTemplates = "systemWidgetAttributeTemplates";
        this.systemWidgetViewTemplates = "systemWidgetViewTemplates";
        this.token = "token";
        this.version = "version";
    }
}
class MongoVirtual {
    constructor() {
        this.systemWidgetAttributeTemplates = "systemWidgetAttributeTemplates";
        this.systemWidgetViewTemplates = "systemWidgetViewTemplates";
    }
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._systemWidgetAttributeTemplatesIsMutated = "_systemWidgetAttributeTemplatesIsMutated";
        this._systemWidgetViewTemplatesIsMutated = "_systemWidgetViewTemplatesIsMutated";
        this._tokenIsMutated = "_tokenIsMutated";
        this._versionIsMutated = "_versionIsMutated";
        this.createdDate = "createdDate";
        this.description = "description";
        this._id = "_id";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.systemWidgetAttributeTemplates = "systemWidgetAttributeTemplates";
        this.systemWidgetViewTemplates = "systemWidgetViewTemplates";
        this.token = "token";
        this.version = "version";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.SystemWidgetTemplate";
        this.mongDataModeName = "SystemWidgetTemplate";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class SystemWidgetTemplate extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._descriptionIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isActiveIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isRemoveFromRelationship = false;
        this._isRemoveFromRelationshipIsMutated = false;
        this._nameIsMutated = false;
        this._systemWidgetAttributeTemplatesIsMutated = false;
        this._systemWidgetViewTemplatesIsMutated = false;
        this._tokenIsMutated = false;
        this._versionIsMutated = false;
        this.description = null;
        this.id = null;
        this.isActive = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.SystemWidgetTemplate";
        this.name = null;
        this.systemWidgetAttributeTemplates = new Array();
        this.systemWidgetViewTemplates = new Array();
        this.token = null;
        this.version = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._descriptionIsMutated = false;
        this._isActiveIsMutated = false;
        this._nameIsMutated = false;
        this._systemWidgetAttributeTemplatesIsMutated = false;
        this._systemWidgetViewTemplatesIsMutated = false;
        this._tokenIsMutated = false;
        this._versionIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.SystemWidgetTemplate");
    }
    /**
     * The SystemWidgetAttributeTemplate templates for the SystemWidgetTemplate.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addSystemWidgetAttributeTemplate(systemWidgetAttributeTemplate, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            systemWidgetAttributeTemplate._trackMutations();
        }
        systemWidgetAttributeTemplate._setRelationshipPersistableType(persistanceType.getId());
        this.systemWidgetAttributeTemplates.push(systemWidgetAttributeTemplate);
        return (this);
    }
    /**
     * The SystemWidgetAttributeTemplate templates for the SystemWidgetTemplate.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeSystemWidgetAttributeTemplate(systemWidgetAttributeTemplate, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            systemWidgetAttributeTemplate._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.systemWidgetAttributeTemplates.findIndex(obj => obj === systemWidgetAttributeTemplate);
            if (index !== -1) {
                this.systemWidgetAttributeTemplates.splice(index, 1);
            }
            systemWidgetAttributeTemplate._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        systemWidgetAttributeTemplate._setRelationshipPersistableType(persistanceType.getId());
        this.systemWidgetAttributeTemplates.push(systemWidgetAttributeTemplate);
        return (this);
    }
    /**
     * The SystemWidgetViewTemplate templates for the SystemWidgetTemplate.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addSystemWidgetViewTemplate(systemWidgetViewTemplate, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            systemWidgetViewTemplate._trackMutations();
        }
        systemWidgetViewTemplate._setRelationshipPersistableType(persistanceType.getId());
        this.systemWidgetViewTemplates.push(systemWidgetViewTemplate);
        return (this);
    }
    /**
     * The SystemWidgetViewTemplate templates for the SystemWidgetTemplate.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeSystemWidgetViewTemplate(systemWidgetViewTemplate, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            systemWidgetViewTemplate._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.systemWidgetViewTemplates.findIndex(obj => obj === systemWidgetViewTemplate);
            if (index !== -1) {
                this.systemWidgetViewTemplates.splice(index, 1);
            }
            systemWidgetViewTemplate._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        systemWidgetViewTemplate._setRelationshipPersistableType(persistanceType.getId());
        this.systemWidgetViewTemplates.push(systemWidgetViewTemplate);
        return (this);
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated() {
        return (this._isActiveIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship() {
        return (this._isRemoveFromRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated() {
        return (this._isRemoveFromRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSystemWidgetAttributeTemplatesMutated() {
        return (this._systemWidgetAttributeTemplatesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSystemWidgetViewTemplatesMutated() {
        return (this._systemWidgetViewTemplatesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsTokenMutated() {
        return (this._tokenIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsVersionMutated() {
        return (this._versionIsMutated);
    }
    /**
     * The description of the widget.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * Identifies if the widget is active.
     * @returns boolean
     */
    getIsActive() {
        return ((this.isActive === undefined) ? false : this.isActive);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The widget name.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The SystemWidgetAttributeTemplate templates for the SystemWidgetTemplate.
     * @returns Array<SystemWidgetAttributeTemplate>
     */
    getSystemWidgetAttributeTemplates() {
        return (this.systemWidgetAttributeTemplates);
    }
    /**
     * The SystemWidgetViewTemplate templates for the SystemWidgetTemplate.
     * @returns Array<SystemWidgetViewTemplate>
     */
    getSystemWidgetViewTemplates() {
        return (this.systemWidgetViewTemplates);
    }
    /**
     * The widget token.
     * @returns string | null
     */
    getToken() {
        return (this.token);
    }
    /**
     * The curent verions of the widget.
     * @returns string | null
     */
    getVersion() {
        return (this.version);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated) {
        this._isActiveIsMutated = _isActiveIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship) {
        if (this._isRemoveFromRelationship !== _isRemoveFromRelationship) {
            this._setIsRemoveFromRelationshipMutated(true);
        }
        this._isRemoveFromRelationship = _isRemoveFromRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated) {
        this._isRemoveFromRelationshipIsMutated = _isRemoveFromRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSystemWidgetAttributeTemplatesMutated(_systemWidgetAttributeTemplatesIsMutated) {
        this._systemWidgetAttributeTemplatesIsMutated = _systemWidgetAttributeTemplatesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSystemWidgetViewTemplatesMutated(_systemWidgetViewTemplatesIsMutated) {
        this._systemWidgetViewTemplatesIsMutated = _systemWidgetViewTemplatesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsTokenMutated(_tokenIsMutated) {
        this._tokenIsMutated = _tokenIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsVersionMutated(_versionIsMutated) {
        this._versionIsMutated = _versionIsMutated;
        return (this);
    }
    /**
* ```
     * The description of the widget.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * Identifies if the widget is active.
* ```
     */
    setIsActive(isActive) {
        if (!this._getIsMutateSuppressed() && this.isActive !== isActive) {
            this._setIsActiveMutated(true);
        }
        this.isActive = isActive;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The widget name.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The SystemWidgetAttributeTemplate templates for the SystemWidgetTemplate.
* ```
     */
    setSystemWidgetAttributeTemplates(systemWidgetAttributeTemplates) {
        if (!this._getIsMutateSuppressed() && this.systemWidgetAttributeTemplates !== systemWidgetAttributeTemplates) {
            this._setIsSystemWidgetAttributeTemplatesMutated(true);
        }
        this.systemWidgetAttributeTemplates = systemWidgetAttributeTemplates;
        return (this);
    }
    /**
* ```
     * The SystemWidgetViewTemplate templates for the SystemWidgetTemplate.
* ```
     */
    setSystemWidgetViewTemplates(systemWidgetViewTemplates) {
        if (!this._getIsMutateSuppressed() && this.systemWidgetViewTemplates !== systemWidgetViewTemplates) {
            this._setIsSystemWidgetViewTemplatesMutated(true);
        }
        this.systemWidgetViewTemplates = systemWidgetViewTemplates;
        return (this);
    }
    /**
* ```
     * The widget token.
* ```
     */
    setToken(token) {
        if (!this._getIsMutateSuppressed() && this.token !== token) {
            this._setIsTokenMutated(true);
        }
        this.token = token;
        return (this);
    }
    /**
* ```
     * The curent verions of the widget.
* ```
     */
    setVersion(version) {
        if (!this._getIsMutateSuppressed() && this.version !== version) {
            this._setIsVersionMutated(true);
        }
        this.version = version;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'systemWidgetAttributeTemplates',
            value: this.systemWidgetAttributeTemplates
        });
        this._setCurrentState2({
            attributeName: 'systemWidgetViewTemplates',
            value: this.systemWidgetViewTemplates
        });
        this._setCurrentState2({
            attributeName: 'token',
            value: this.token
        });
        this._setCurrentState2({
            attributeName: 'version',
            value: this.version
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'systemWidgetAttributeTemplates',
            value: this.systemWidgetAttributeTemplates
        });
        this._setInitializedState2({
            attributeName: 'systemWidgetViewTemplates',
            value: this.systemWidgetViewTemplates
        });
        this._setInitializedState2({
            attributeName: 'token',
            value: this.token
        });
        this._setInitializedState2({
            attributeName: 'version',
            value: this.version
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this._isRemoveFromRelationship);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isActive);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.systemWidgetAttributeTemplates);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.systemWidgetViewTemplates);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.token);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.version);
        return (hashCode_n);
    }
}
exports.SystemWidgetTemplate = SystemWidgetTemplate;
SystemWidgetTemplate.metaDataForSystemWidgetTemplate = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.SystemWidgetTemplate", SystemWidgetTemplate);
//# sourceMappingURL=SystemWidgetTemplate.js.map