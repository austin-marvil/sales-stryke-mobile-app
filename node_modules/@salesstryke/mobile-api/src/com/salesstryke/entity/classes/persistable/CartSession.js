"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CartSession = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._agreementDocumentAgreeIsMutated = "_agreementDocumentAgreeIsMutated";
        this._agreementDocumentVersionIsMutated = "_agreementDocumentVersionIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._quoteBlock_oidIsMutated = "_quoteBlock_oidIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._sessionIsMutated = "_sessionIsMutated";
        this._userUUIDIsMutated = "_userUUIDIsMutated";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.agreementDocumentAgree = "agreementDocumentAgree";
        this.agreementDocumentVersion = "agreementDocumentVersion";
        this.createdDate = "createdDate";
        this.description = "description";
        this.id = "id";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.quoteBlock_oid = "quoteBlock_oid";
        this.session = "session";
        this.userUUID = "userUUID";
        this.workspace = "workspace";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._agreementDocumentAgreeIsMutated = "_agreementDocumentAgreeIsMutated";
        this._agreementDocumentVersionIsMutated = "_agreementDocumentVersionIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._quoteBlock_oidIsMutated = "_quoteBlock_oidIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._sessionIsMutated = "_sessionIsMutated";
        this._userUUIDIsMutated = "_userUUIDIsMutated";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.agreementDocumentAgree = "agreementDocumentAgree";
        this.agreementDocumentVersion = "agreementDocumentVersion";
        this.createdDate = "createdDate";
        this.description = "description";
        this._id = "_id";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.quoteBlock_oid = "quoteBlock_oid";
        this.session = "session";
        this.userUUID = "userUUID";
        this.workspace = "workspace";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.CartSession";
        this.mongDataModeName = "CartSession";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class CartSession extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._agreementDocumentAgreeIsMutated = false;
        this._agreementDocumentVersionIsMutated = false;
        this._descriptionIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isActiveIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._quoteBlock_oidIsMutated = false;
        this._sessionIsMutated = false;
        this._userUUIDIsMutated = false;
        this._workspaceIsMutated = false;
        this.agreementDocumentAgree = undefined;
        this.agreementDocumentVersion = null;
        this.description = null;
        this.id = null;
        this.isActive = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.CartSession";
        this.name = null;
        this.organization = null;
        this.quoteBlock_oid = null;
        this.session = null;
        this.userUUID = null;
        this.workspace = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._agreementDocumentAgreeIsMutated = false;
        this._agreementDocumentVersionIsMutated = false;
        this._descriptionIsMutated = false;
        this._isActiveIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._quoteBlock_oidIsMutated = false;
        this._sessionIsMutated = false;
        this._userUUIDIsMutated = false;
        this._workspaceIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.CartSession");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsAgreementDocumentAgreeMutated() {
        return (this._agreementDocumentAgreeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAgreementDocumentVersionMutated() {
        return (this._agreementDocumentVersionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated() {
        return (this._isActiveIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsQuoteBlock_oidMutated() {
        return (this._quoteBlock_oidIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSessionMutated() {
        return (this._sessionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUserUUIDMutated() {
        return (this._userUUIDIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceMutated() {
        return (this._workspaceIsMutated);
    }
    /**
     * Identifies if the agreement document is agreed to.
     * @returns boolean
     */
    getAgreementDocumentAgree() {
        return ((this.agreementDocumentAgree === undefined) ? false : this.agreementDocumentAgree);
    }
    /**
     * The agreement document version.
     * @returns AgreementDocumentVersion | null
     */
    getAgreementDocumentVersion() {
        return (this.agreementDocumentVersion);
    }
    /**
     * The description.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * Indicates if the cart session is active.
     * @returns boolean
     */
    getIsActive() {
        return ((this.isActive === undefined) ? false : this.isActive);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The name.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * Quote Block oid.
     * @returns string | null
     */
    getQuoteBlock_oid() {
        return (this.quoteBlock_oid);
    }
    /**
     * The session id of the cart.
     * @returns string | null
     */
    getSession() {
        return (this.session);
    }
    /**
     * The user UUID.
     * @returns string | null
     */
    getUserUUID() {
        return (this.userUUID);
    }
    /**
     * The workspace.
     * @returns Workspace | null
     */
    getWorkspace() {
        return (this.workspace);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAgreementDocumentAgreeMutated(_agreementDocumentAgreeIsMutated) {
        this._agreementDocumentAgreeIsMutated = _agreementDocumentAgreeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAgreementDocumentVersionMutated(_agreementDocumentVersionIsMutated) {
        this._agreementDocumentVersionIsMutated = _agreementDocumentVersionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated) {
        this._isActiveIsMutated = _isActiveIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsQuoteBlock_oidMutated(_quoteBlock_oidIsMutated) {
        this._quoteBlock_oidIsMutated = _quoteBlock_oidIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSessionMutated(_sessionIsMutated) {
        this._sessionIsMutated = _sessionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUserUUIDMutated(_userUUIDIsMutated) {
        this._userUUIDIsMutated = _userUUIDIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceMutated(_workspaceIsMutated) {
        this._workspaceIsMutated = _workspaceIsMutated;
        return (this);
    }
    /**
* ```
     * Identifies if the agreement document is agreed to.
* ```
     */
    setAgreementDocumentAgree(agreementDocumentAgree) {
        if (!this._getIsMutateSuppressed() && this.agreementDocumentAgree !== agreementDocumentAgree) {
            this._setIsAgreementDocumentAgreeMutated(true);
        }
        this.agreementDocumentAgree = agreementDocumentAgree;
        return (this);
    }
    /**
* ```
     * The agreement document version.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setAgreementDocumentVersion(agreementDocumentVersion, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.agreementDocumentVersion !== agreementDocumentVersion) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(agreementDocumentVersion, persistanceType);
            this._setIsAgreementDocumentVersionMutated(true);
        }
        this.agreementDocumentVersion = agreementDocumentVersion;
        return (this);
    }
    /**
* ```
     * The description.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * Indicates if the cart session is active.
* ```
     */
    setIsActive(isActive) {
        if (!this._getIsMutateSuppressed() && this.isActive !== isActive) {
            this._setIsActiveMutated(true);
        }
        this.isActive = isActive;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The name.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * Quote Block oid.
* ```
     */
    setQuoteBlock_oid(quoteBlock_oid) {
        if (!this._getIsMutateSuppressed() && this.quoteBlock_oid !== quoteBlock_oid) {
            this._setIsQuoteBlock_oidMutated(true);
        }
        this.quoteBlock_oid = quoteBlock_oid;
        return (this);
    }
    /**
* ```
     * The session id of the cart.
* ```
     */
    setSession(session) {
        if (!this._getIsMutateSuppressed() && this.session !== session) {
            this._setIsSessionMutated(true);
        }
        this.session = session;
        return (this);
    }
    /**
* ```
     * The user UUID.
* ```
     */
    setUserUUID(userUUID) {
        if (!this._getIsMutateSuppressed() && this.userUUID !== userUUID) {
            this._setIsUserUUIDMutated(true);
        }
        this.userUUID = userUUID;
        return (this);
    }
    /**
* ```
     * The workspace.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspace(workspace, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.workspace !== workspace) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(workspace, persistanceType);
            this._setIsWorkspaceMutated(true);
        }
        this.workspace = workspace;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'agreementDocumentAgree',
            value: this.agreementDocumentAgree
        });
        this._setCurrentState2({
            attributeName: 'agreementDocumentVersion',
            value: this.agreementDocumentVersion
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'quoteBlock_oid',
            value: this.quoteBlock_oid
        });
        this._setCurrentState2({
            attributeName: 'session',
            value: this.session
        });
        this._setCurrentState2({
            attributeName: 'userUUID',
            value: this.userUUID
        });
        this._setCurrentState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'agreementDocumentAgree',
            value: this.agreementDocumentAgree
        });
        this._setInitializedState2({
            attributeName: 'agreementDocumentVersion',
            value: this.agreementDocumentVersion
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'quoteBlock_oid',
            value: this.quoteBlock_oid
        });
        this._setInitializedState2({
            attributeName: 'session',
            value: this.session
        });
        this._setInitializedState2({
            attributeName: 'userUUID',
            value: this.userUUID
        });
        this._setInitializedState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.agreementDocumentAgree);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.agreementDocumentVersion);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isActive);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.quoteBlock_oid);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.session);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.userUUID);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspace);
        return (hashCode_n);
    }
}
exports.CartSession = CartSession;
CartSession.metaDataForCartSession = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.CartSession", CartSession);
//# sourceMappingURL=CartSession.js.map