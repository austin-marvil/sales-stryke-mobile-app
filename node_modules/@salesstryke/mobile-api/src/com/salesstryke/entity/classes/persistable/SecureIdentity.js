"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecureIdentity = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistenceType_1 = require("../../../data/PersistenceType");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._activeWorkspaceIsMutated = "_activeWorkspaceIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isAuthenticatedIsMutated = "_isAuthenticatedIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._jwtTokenIsMutated = "_jwtTokenIsMutated";
        this._loginIsMutated = "_loginIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._passwordIsMutated = "_passwordIsMutated";
        this._rolesIsMutated = "_rolesIsMutated";
        this._securityPermissionsIsMutated = "_securityPermissionsIsMutated";
        this._settingIsMutated = "_settingIsMutated";
        this._userIsMutated = "_userIsMutated";
        this._workspacesIsMutated = "_workspacesIsMutated";
        this.activeWorkspace = "activeWorkspace";
        this.createdDate = "createdDate";
        this.id = "id";
        this.isAuthenticated = "isAuthenticated";
        this.jsonType = "jsonType";
        this.jwtToken = "jwtToken";
        this.login = "login";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.password = "password";
        this.roles = "roles";
        this.securityPermissions = "securityPermissions";
        this.setting = "setting";
        this.user = "user";
        this.workspaces = "workspaces";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._activeWorkspaceIsMutated = "_activeWorkspaceIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isAuthenticatedIsMutated = "_isAuthenticatedIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._jwtTokenIsMutated = "_jwtTokenIsMutated";
        this._loginIsMutated = "_loginIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._passwordIsMutated = "_passwordIsMutated";
        this._rolesIsMutated = "_rolesIsMutated";
        this._securityPermissionsIsMutated = "_securityPermissionsIsMutated";
        this._settingIsMutated = "_settingIsMutated";
        this._userIsMutated = "_userIsMutated";
        this._workspacesIsMutated = "_workspacesIsMutated";
        this.activeWorkspace = "activeWorkspace";
        this.createdDate = "createdDate";
        this._id = "_id";
        this.isAuthenticated = "isAuthenticated";
        this.jsonType = "jsonType";
        this.jwtToken = "jwtToken";
        this.login = "login";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.password = "password";
        this.roles = "roles";
        this.securityPermissions = "securityPermissions";
        this.setting = "setting";
        this.user = "user";
        this.workspaces = "workspaces";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.SecureIdentity";
        this.mongDataModeName = "SecureIdentity";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class SecureIdentity extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._activeWorkspaceIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isAuthenticatedIsMutated = false;
        this._jwtTokenIsMutated = false;
        this._loginIsMutated = false;
        this._organizationIsMutated = false;
        this._passwordIsMutated = false;
        this._rolesIsMutated = false;
        this._securityPermissionsIsMutated = false;
        this._settingIsMutated = false;
        this._userIsMutated = false;
        this._workspacesIsMutated = false;
        this.activeWorkspace = null;
        this.id = null;
        this.isAuthenticated = false;
        this.jsonType = "com.salesstryke.entity.classes.persistable.SecureIdentity";
        this.jwtToken = null;
        this.login = null;
        this.organization = null;
        this.password = null;
        this.roles = new Array();
        this.securityPermissions = new Array();
        this.setting = null;
        this.user = null;
        this.workspaces = new Array();
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._activeWorkspaceIsMutated = false;
        this._loginIsMutated = false;
        this._organizationIsMutated = false;
        this._passwordIsMutated = false;
        this._rolesIsMutated = false;
        this._securityPermissionsIsMutated = false;
        this._settingIsMutated = false;
        this._userIsMutated = false;
        this._workspacesIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.SecureIdentity");
    }
    /**
     * The User Roles.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addRole(role, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            role._trackMutations();
        }
        role._setRelationshipPersistableType(persistanceType.getId());
        this.roles.push(role);
        return (this);
    }
    /**
     * The User Roles.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeRole(role, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            role._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.roles.findIndex(obj => obj === role);
            if (index !== -1) {
                this.roles.splice(index, 1);
            }
            role._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        role._setRelationshipPersistableType(persistanceType.getId());
        this.roles.push(role);
        return (this);
    }
    /**
     * MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addSecurityPermission(securityPermission, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            securityPermission._trackMutations();
        }
        securityPermission._setRelationshipPersistableType(persistanceType.getId());
        this.securityPermissions.push(securityPermission);
        return (this);
    }
    /**
     * MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeSecurityPermission(securityPermission, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            securityPermission._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.securityPermissions.findIndex(obj => obj === securityPermission);
            if (index !== -1) {
                this.securityPermissions.splice(index, 1);
            }
            securityPermission._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        securityPermission._setRelationshipPersistableType(persistanceType.getId());
        this.securityPermissions.push(securityPermission);
        return (this);
    }
    /**
     * Secure Identity Workspace allowed.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspace(workspace, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            workspace._trackMutations();
        }
        workspace._setRelationshipPersistableType(persistanceType.getId());
        this.workspaces.push(workspace);
        return (this);
    }
    /**
     * Secure Identity Workspace allowed.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspace(workspace, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            workspace._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.workspaces.findIndex(obj => obj === workspace);
            if (index !== -1) {
                this.workspaces.splice(index, 1);
            }
            workspace._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        workspace._setRelationshipPersistableType(persistanceType.getId());
        this.workspaces.push(workspace);
        return (this);
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveWorkspaceMutated() {
        return (this._activeWorkspaceIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAuthenticatedMutated() {
        return (this._isAuthenticatedIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsJwtTokenMutated() {
        return (this._jwtTokenIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLoginMutated() {
        return (this._loginIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPasswordMutated() {
        return (this._passwordIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRolesMutated() {
        return (this._rolesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSecurityPermissionsMutated() {
        return (this._securityPermissionsIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSettingMutated() {
        return (this._settingIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUserMutated() {
        return (this._userIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspacesMutated() {
        return (this._workspacesIsMutated);
    }
    /**
     * Current active workspace.
     * @returns Workspace | null
     */
    getActiveWorkspace() {
        return (this.activeWorkspace);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * Identifies if the user is Authenticated.
     * @returns boolean
     */
    getIsAuthenticated() {
        return (this.isAuthenticated);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The JWT token for the Identity.
     * @returns string | null
     */
    getJwtToken() {
        return (this.jwtToken);
    }
    /**
     * The user login for Authentication
     * @returns string | null
     */
    getLogin() {
        return (this.login);
    }
    /**
     * The tenant Organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The user password for Authentication
     * @returns string | null
     */
    getPassword() {
        return (this.password);
    }
    /**
     * The User Roles.
     * @returns Array<SecurityRole>
     */
    getRoles() {
        return (this.roles);
    }
    /**
     * MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.
     * @returns Array<SecurityPermission>
     */
    getSecurityPermissions() {
        return (this.securityPermissions);
    }
    /**
     * Organization Setting.
     * @returns Setting | null
     */
    getSetting() {
        return (this.setting);
    }
    /**
     * The User for the Identity.
     * @returns User | null
     */
    getUser() {
        return (this.user);
    }
    /**
     * Secure Identity Workspace allowed.
     * @returns Array<Workspace>
     */
    getWorkspaces() {
        return (this.workspaces);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveWorkspaceMutated(_activeWorkspaceIsMutated) {
        this._activeWorkspaceIsMutated = _activeWorkspaceIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAuthenticatedMutated(_isAuthenticatedIsMutated) {
        this._isAuthenticatedIsMutated = _isAuthenticatedIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsJwtTokenMutated(_jwtTokenIsMutated) {
        this._jwtTokenIsMutated = _jwtTokenIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLoginMutated(_loginIsMutated) {
        this._loginIsMutated = _loginIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPasswordMutated(_passwordIsMutated) {
        this._passwordIsMutated = _passwordIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRolesMutated(_rolesIsMutated) {
        this._rolesIsMutated = _rolesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSecurityPermissionsMutated(_securityPermissionsIsMutated) {
        this._securityPermissionsIsMutated = _securityPermissionsIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSettingMutated(_settingIsMutated) {
        this._settingIsMutated = _settingIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUserMutated(_userIsMutated) {
        this._userIsMutated = _userIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspacesMutated(_workspacesIsMutated) {
        this._workspacesIsMutated = _workspacesIsMutated;
        return (this);
    }
    /**
* ```
     * Current active workspace.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setActiveWorkspace(activeWorkspace, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.activeWorkspace !== activeWorkspace) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(activeWorkspace, persistanceType);
            this._setIsActiveWorkspaceMutated(true);
        }
        this.activeWorkspace = activeWorkspace;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * Identifies if the user is Authenticated.
* ```
     */
    setIsAuthenticated(isAuthenticated) {
        if (this.isAuthenticated !== isAuthenticated) {
            this._setIsAuthenticatedMutated(true);
        }
        this.isAuthenticated = isAuthenticated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The JWT token for the Identity.
* ```
     */
    setJwtToken(jwtToken) {
        if (this.jwtToken !== jwtToken) {
            this._setIsJwtTokenMutated(true);
        }
        this.jwtToken = jwtToken;
        return (this);
    }
    /**
* ```
     * The user login for Authentication
* ```
     */
    setLogin(login) {
        if (!this._getIsMutateSuppressed() && this.login !== login) {
            this._setIsLoginMutated(true);
        }
        this.login = login;
        return (this);
    }
    /**
* ```
     * The tenant Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The user password for Authentication
* ```
     */
    setPassword(password) {
        if (!this._getIsMutateSuppressed() && this.password !== password) {
            this._setIsPasswordMutated(true);
        }
        this.password = password;
        return (this);
    }
    /**
* ```
     * The User Roles.
* ```
     */
    setRoles(roles) {
        if (!this._getIsMutateSuppressed() && this.roles !== roles) {
            this._setIsRolesMutated(true);
        }
        this.roles = roles;
        return (this);
    }
    /**
* ```
     * MongoRefArray of SecurityPermission. Use .addSecurityPermission(securityPermission, PersistenceType.ATTACH); to add a MongoRefArray item. Use .removeSecurityPermission(securityPermission, PersistenceType.DETACH); to remove a MongoRefArray item.
* ```
     */
    setSecurityPermissions(securityPermissions) {
        if (!this._getIsMutateSuppressed() && this.securityPermissions !== securityPermissions) {
            this._setIsSecurityPermissionsMutated(true);
        }
        this.securityPermissions = securityPermissions;
        return (this);
    }
    /**
* ```
     * Organization Setting.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSetting(setting, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.setting !== setting) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(setting, persistanceType);
            this._setIsSettingMutated(true);
        }
        this.setting = setting;
        return (this);
    }
    /**
* ```
     * The User for the Identity.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setUser(user, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.user !== user) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(user, persistanceType);
            this._setIsUserMutated(true);
        }
        this.user = user;
        return (this);
    }
    /**
* ```
     * Secure Identity Workspace allowed.
* ```
     */
    setWorkspaces(workspaces) {
        if (!this._getIsMutateSuppressed() && this.workspaces !== workspaces) {
            this._setIsWorkspacesMutated(true);
        }
        this.workspaces = workspaces;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: 'activeWorkspace',
            value: this.activeWorkspace
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'isAuthenticated',
            value: this.isAuthenticated
        });
        this._setCurrentState2({
            attributeName: 'jwtToken',
            value: this.jwtToken
        });
        this._setCurrentState2({
            attributeName: 'login',
            value: this.login
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'password',
            value: this.password
        });
        this._setCurrentState2({
            attributeName: 'roles',
            value: this.roles
        });
        this._setCurrentState2({
            attributeName: 'securityPermissions',
            value: this.securityPermissions
        });
        this._setCurrentState2({
            attributeName: 'setting',
            value: this.setting
        });
        this._setCurrentState2({
            attributeName: 'user',
            value: this.user
        });
        this._setCurrentState2({
            attributeName: 'workspaces',
            value: this.workspaces
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: 'activeWorkspace',
            value: this.activeWorkspace
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'isAuthenticated',
            value: this.isAuthenticated
        });
        this._setInitializedState2({
            attributeName: 'jwtToken',
            value: this.jwtToken
        });
        this._setInitializedState2({
            attributeName: 'login',
            value: this.login
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'password',
            value: this.password
        });
        this._setInitializedState2({
            attributeName: 'roles',
            value: this.roles
        });
        this._setInitializedState2({
            attributeName: 'securityPermissions',
            value: this.securityPermissions
        });
        this._setInitializedState2({
            attributeName: 'setting',
            value: this.setting
        });
        this._setInitializedState2({
            attributeName: 'user',
            value: this.user
        });
        this._setInitializedState2({
            attributeName: 'workspaces',
            value: this.workspaces
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.activeWorkspace);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isAuthenticated);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.jwtToken);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.login);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.password);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.roles);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.securityPermissions);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.setting);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.user);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspaces);
        return (hashCode_n);
    }
}
exports.SecureIdentity = SecureIdentity;
SecureIdentity.metaDataForSecureIdentity = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.SecureIdentity", SecureIdentity);
//# sourceMappingURL=SecureIdentity.js.map