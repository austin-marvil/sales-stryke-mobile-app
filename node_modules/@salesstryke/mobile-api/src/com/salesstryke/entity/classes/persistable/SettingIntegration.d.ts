/**
 * This file is auto generated DO NOT EDIT.
 */
import { EmailAddress } from './EmailAddress';
import { Organization } from './Organization';
import { SettingIntegrationType } from './SettingIntegrationType';
import { SettingToken } from './SettingToken';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _integrationErrorEmailsIsMutated: string;
    _integrationVersionIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _jsonStateStr: string;
    _organizationIsMutated: string;
    _relationshipPersistableType: string;
    _settingIntegrationTypeIsMutated: string;
    _settingTokenIsMutated: string;
    _softpakCompanyIdIsMutated: string;
    _softpakRobotApiEndpointIsMutated: string;
    _softpakRobotApiLoginIsMutated: string;
    _softpakRobotApiPasswordIsMutated: string;
    createdDate: string;
    id: string;
    integrationErrorEmails: string;
    integrationVersion: string;
    jsonType: string;
    modifiedDate: string;
    organization: string;
    settingIntegrationType: string;
    settingToken: string;
    softpakCompanyId: string;
    softpakRobotApiEndpoint: string;
    softpakRobotApiLogin: string;
    softpakRobotApiPassword: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _integrationErrorEmailsIsMutated: string;
    _integrationVersionIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _jsonStateStr: string;
    _organizationIsMutated: string;
    _relationshipPersistableType: string;
    _settingIntegrationTypeIsMutated: string;
    _settingTokenIsMutated: string;
    _softpakCompanyIdIsMutated: string;
    _softpakRobotApiEndpointIsMutated: string;
    _softpakRobotApiLoginIsMutated: string;
    _softpakRobotApiPasswordIsMutated: string;
    createdDate: string;
    _id: string;
    integrationErrorEmails: string;
    integrationVersion: string;
    jsonType: string;
    modifiedDate: string;
    organization: string;
    settingIntegrationType: string;
    settingToken: string;
    softpakCompanyId: string;
    softpakRobotApiEndpoint: string;
    softpakRobotApiLogin: string;
    softpakRobotApiPassword: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class SettingIntegration extends JsonApiPersistableBase {
    static metaDataForSettingIntegration: MetaData;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _integrationErrorEmailsIsMutated;
    private _integrationVersionIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _organizationIsMutated;
    private _settingIntegrationTypeIsMutated;
    private _settingTokenIsMutated;
    private _softpakCompanyIdIsMutated;
    private _softpakRobotApiEndpointIsMutated;
    private _softpakRobotApiLoginIsMutated;
    private _softpakRobotApiPasswordIsMutated;
    private id;
    private integrationErrorEmails;
    private integrationVersion;
    private jsonType;
    private organization;
    private settingIntegrationType;
    private settingToken;
    private softpakCompanyId;
    private softpakRobotApiEndpoint;
    private softpakRobotApiLogin;
    private softpakRobotApiPassword;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): SettingIntegration;
    getClassName(): string;
    /**
     * The email address to send integration error notifications to.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addIntegrationErrorEmail(integrationErrorEmail: EmailAddress, persistanceType?: PersistenceType): SettingIntegration;
    /**
     * The email address to send integration error notifications to.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeIntegrationErrorEmail(integrationErrorEmail: EmailAddress, persistanceType?: PersistenceType): SettingIntegration;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType(): number;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsIntegrationErrorEmailsMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsIntegrationVersionMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSettingIntegrationTypeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSettingTokenMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSoftpakCompanyIdMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSoftpakRobotApiEndpointMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSoftpakRobotApiLoginMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSoftpakRobotApiPasswordMutated(): boolean;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * The email address to send integration error notifications to.
     * @returns Array<EmailAddress>
     */
    getIntegrationErrorEmails(): Array<EmailAddress>;
    /**
     * The version of the integration.
     * @returns string | null
     */
    getIntegrationVersion(): string | null;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * The settingIntegrationType.
     * @returns SettingIntegrationType | null
     */
    getSettingIntegrationType(): SettingIntegrationType | null;
    /**
     * The settingToken.
     * @returns SettingToken | null
     */
    getSettingToken(): SettingToken | null;
    /**
     * The softpak company ID.
     * @returns string | null
     */
    getSoftpakCompanyId(): string | null;
    /**
     * The softpak robot API endpoint.
     * @returns string | null
     */
    getSoftpakRobotApiEndpoint(): string | null;
    /**
     * The softpak robot API login.
     * @returns string | null
     */
    getSoftpakRobotApiLogin(): string | null;
    /**
     * The softpak robot API password.
     * @returns string | null
     */
    getSoftpakRobotApiPassword(): string | null;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): SettingIntegration;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): SettingIntegration;
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType: number): SettingIntegration;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): SettingIntegration;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): SettingIntegration;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): SettingIntegration;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsIntegrationErrorEmailsMutated(_integrationErrorEmailsIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsIntegrationVersionMutated(_integrationVersionIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsSettingIntegrationTypeMutated(_settingIntegrationTypeIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsSettingTokenMutated(_settingTokenIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsSoftpakCompanyIdMutated(_softpakCompanyIdIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsSoftpakRobotApiEndpointMutated(_softpakRobotApiEndpointIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsSoftpakRobotApiLoginMutated(_softpakRobotApiLoginIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    _setIsSoftpakRobotApiPasswordMutated(_softpakRobotApiPasswordIsMutated: boolean): SettingIntegration;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): SettingIntegration;
    /**
* ```
     * The email address to send integration error notifications to.
* ```
     */
    setIntegrationErrorEmails(integrationErrorEmails: Array<EmailAddress>): SettingIntegration;
    /**
* ```
     * The version of the integration.
* ```
     */
    setIntegrationVersion(integrationVersion: string | null): SettingIntegration;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): SettingIntegration;
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): SettingIntegration;
    /**
* ```
     * The settingIntegrationType.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSettingIntegrationType(settingIntegrationType: SettingIntegrationType | null, persistanceType?: PersistenceType): SettingIntegration;
    /**
* ```
     * The settingToken.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSettingToken(settingToken: SettingToken | null, persistanceType?: PersistenceType): SettingIntegration;
    /**
* ```
     * The softpak company ID.
* ```
     */
    setSoftpakCompanyId(softpakCompanyId: string | null): SettingIntegration;
    /**
* ```
     * The softpak robot API endpoint.
* ```
     */
    setSoftpakRobotApiEndpoint(softpakRobotApiEndpoint: string | null): SettingIntegration;
    /**
* ```
     * The softpak robot API login.
* ```
     */
    setSoftpakRobotApiLogin(softpakRobotApiLogin: string | null): SettingIntegration;
    /**
* ```
     * The softpak robot API password.
* ```
     */
    setSoftpakRobotApiPassword(softpakRobotApiPassword: string | null): SettingIntegration;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
