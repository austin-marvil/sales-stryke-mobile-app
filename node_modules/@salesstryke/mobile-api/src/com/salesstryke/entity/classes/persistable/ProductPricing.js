"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductPricing = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._activeEndDateIsMutated = "_activeEndDateIsMutated";
        this._activeStartDateIsMutated = "_activeStartDateIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._durationTypeIsMutated = "_durationTypeIsMutated";
        this._entityState = "_entityState";
        this._feeIsMutated = "_feeIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isPriceLockedIsMutated = "_isPriceLockedIsMutated";
        this._isRecurringIsMutated = "_isRecurringIsMutated";
        this._isUrgentIsMutated = "_isUrgentIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._maxQuantityAtUnitPriceIsMutated = "_maxQuantityAtUnitPriceIsMutated";
        this._minQuantityAtUnitPriceIsMutated = "_minQuantityAtUnitPriceIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._productIsMutated = "_productIsMutated";
        this._productPricingReccuringPeriodTypeIsMutated = "_productPricingReccuringPeriodTypeIsMutated";
        this._recurringUnitPriceIsMutated = "_recurringUnitPriceIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._taxIdIsMutated = "_taxIdIsMutated";
        this._unitPriceIsMutated = "_unitPriceIsMutated";
        this._useAsUnitPriceIfInQuantityRangeIsMutated = "_useAsUnitPriceIfInQuantityRangeIsMutated";
        this._weightPerBagIsMutated = "_weightPerBagIsMutated";
        this.activeEndDate = "activeEndDate";
        this.activeStartDate = "activeStartDate";
        this.createdDate = "createdDate";
        this.description = "description";
        this.durationType = "durationType";
        this.fee = "fee";
        this.id = "id";
        this.isPriceLocked = "isPriceLocked";
        this.isRecurring = "isRecurring";
        this.isUrgent = "isUrgent";
        this.jsonType = "jsonType";
        this.maxQuantityAtUnitPrice = "maxQuantityAtUnitPrice";
        this.minQuantityAtUnitPrice = "minQuantityAtUnitPrice";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.product = "product";
        this.productPricingReccuringPeriodType = "productPricingReccuringPeriodType";
        this.recurringUnitPrice = "recurringUnitPrice";
        this.taxId = "taxId";
        this.unitPrice = "unitPrice";
        this.useAsUnitPriceIfInQuantityRange = "useAsUnitPriceIfInQuantityRange";
        this.weightPerBag = "weightPerBag";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._activeEndDateIsMutated = "_activeEndDateIsMutated";
        this._activeStartDateIsMutated = "_activeStartDateIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._durationTypeIsMutated = "_durationTypeIsMutated";
        this._entityState = "_entityState";
        this._feeIsMutated = "_feeIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isPriceLockedIsMutated = "_isPriceLockedIsMutated";
        this._isRecurringIsMutated = "_isRecurringIsMutated";
        this._isUrgentIsMutated = "_isUrgentIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._maxQuantityAtUnitPriceIsMutated = "_maxQuantityAtUnitPriceIsMutated";
        this._minQuantityAtUnitPriceIsMutated = "_minQuantityAtUnitPriceIsMutated";
        this._nameIsMutated = "_nameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._productIsMutated = "_productIsMutated";
        this._productPricingReccuringPeriodTypeIsMutated = "_productPricingReccuringPeriodTypeIsMutated";
        this._recurringUnitPriceIsMutated = "_recurringUnitPriceIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._taxIdIsMutated = "_taxIdIsMutated";
        this._unitPriceIsMutated = "_unitPriceIsMutated";
        this._useAsUnitPriceIfInQuantityRangeIsMutated = "_useAsUnitPriceIfInQuantityRangeIsMutated";
        this._weightPerBagIsMutated = "_weightPerBagIsMutated";
        this.activeEndDate = "activeEndDate";
        this.activeStartDate = "activeStartDate";
        this.createdDate = "createdDate";
        this.description = "description";
        this.durationType = "durationType";
        this.fee = "fee";
        this._id = "_id";
        this.isPriceLocked = "isPriceLocked";
        this.isRecurring = "isRecurring";
        this.isUrgent = "isUrgent";
        this.jsonType = "jsonType";
        this.maxQuantityAtUnitPrice = "maxQuantityAtUnitPrice";
        this.minQuantityAtUnitPrice = "minQuantityAtUnitPrice";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.organization = "organization";
        this.product = "product";
        this.productPricingReccuringPeriodType = "productPricingReccuringPeriodType";
        this.recurringUnitPrice = "recurringUnitPrice";
        this.taxId = "taxId";
        this.unitPrice = "unitPrice";
        this.useAsUnitPriceIfInQuantityRange = "useAsUnitPriceIfInQuantityRange";
        this.weightPerBag = "weightPerBag";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.ProductPricing";
        this.mongDataModeName = "ProductPricing";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class ProductPricing extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._activeEndDateIsMutated = false;
        this._activeStartDateIsMutated = false;
        this._descriptionIsMutated = false;
        this._durationTypeIsMutated = false;
        this._feeIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isPriceLockedIsMutated = false;
        this._isRecurringIsMutated = false;
        this._isUrgentIsMutated = false;
        this._maxQuantityAtUnitPriceIsMutated = false;
        this._minQuantityAtUnitPriceIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._productIsMutated = false;
        this._productPricingReccuringPeriodTypeIsMutated = false;
        this._recurringUnitPriceIsMutated = false;
        this._taxIdIsMutated = false;
        this._unitPriceIsMutated = false;
        this._useAsUnitPriceIfInQuantityRangeIsMutated = false;
        this._weightPerBagIsMutated = false;
        this.activeEndDate = null;
        this.activeStartDate = null;
        this.description = null;
        this.durationType = null;
        this.fee = 0;
        this.id = null;
        this.isPriceLocked = undefined;
        this.isRecurring = undefined;
        this.isUrgent = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.ProductPricing";
        this.maxQuantityAtUnitPrice = 0;
        this.minQuantityAtUnitPrice = 0;
        this.name = null;
        this.organization = null;
        this.product = null;
        this.productPricingReccuringPeriodType = null;
        this.recurringUnitPrice = 0;
        this.taxId = null;
        this.unitPrice = 0;
        this.useAsUnitPriceIfInQuantityRange = undefined;
        this.weightPerBag = 0;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._activeEndDateIsMutated = false;
        this._activeStartDateIsMutated = false;
        this._descriptionIsMutated = false;
        this._durationTypeIsMutated = false;
        this._feeIsMutated = false;
        this._isPriceLockedIsMutated = false;
        this._isRecurringIsMutated = false;
        this._isUrgentIsMutated = false;
        this._maxQuantityAtUnitPriceIsMutated = false;
        this._minQuantityAtUnitPriceIsMutated = false;
        this._nameIsMutated = false;
        this._organizationIsMutated = false;
        this._productIsMutated = false;
        this._productPricingReccuringPeriodTypeIsMutated = false;
        this._recurringUnitPriceIsMutated = false;
        this._taxIdIsMutated = false;
        this._unitPriceIsMutated = false;
        this._useAsUnitPriceIfInQuantityRangeIsMutated = false;
        this._weightPerBagIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.ProductPricing");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveEndDateMutated() {
        return (this._activeEndDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveStartDateMutated() {
        return (this._activeStartDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDurationTypeMutated() {
        return (this._durationTypeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsFeeMutated() {
        return (this._feeIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPriceLockedMutated() {
        return (this._isPriceLockedIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRecurringMutated() {
        return (this._isRecurringIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUrgentMutated() {
        return (this._isUrgentIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsMaxQuantityAtUnitPriceMutated() {
        return (this._maxQuantityAtUnitPriceIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsMinQuantityAtUnitPriceMutated() {
        return (this._minQuantityAtUnitPriceIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductMutated() {
        return (this._productIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsProductPricingReccuringPeriodTypeMutated() {
        return (this._productPricingReccuringPeriodTypeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRecurringUnitPriceMutated() {
        return (this._recurringUnitPriceIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsTaxIdMutated() {
        return (this._taxIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUnitPriceMutated() {
        return (this._unitPriceIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUseAsUnitPriceIfInQuantityRangeMutated() {
        return (this._useAsUnitPriceIfInQuantityRangeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWeightPerBagMutated() {
        return (this._weightPerBagIsMutated);
    }
    /**
     * Active end date.
     * @returns Date | null
     */
    getActiveEndDate() {
        return (this.activeEndDate);
    }
    /**
     * Active start date.
     * @returns Date | null
     */
    getActiveStartDate() {
        return (this.activeStartDate);
    }
    /**
     * Description of product price.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     * The duration type.
     * @returns DurationType | null
     */
    getDurationType() {
        return (this.durationType);
    }
    /**
     * Product fee.
     * @returns number
     */
    getFee() {
        return (this.fee);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * The product price is locked.
     * @returns boolean
     */
    getIsPriceLocked() {
        return ((this.isPriceLocked === undefined) ? false : this.isPriceLocked);
    }
    /**
     * Product is recurring charge.
     * @returns boolean
     */
    getIsRecurring() {
        return ((this.isRecurring === undefined) ? false : this.isRecurring);
    }
    /**
     * The product is an urgent request.
     * @returns boolean
     */
    getIsUrgent() {
        return ((this.isUrgent === undefined) ? false : this.isUrgent);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * Max quantity at unit price.
     * @returns number
     */
    getMaxQuantityAtUnitPrice() {
        return (this.maxQuantityAtUnitPrice);
    }
    /**
     * Min quantity at unit price.
     * @returns number
     */
    getMinQuantityAtUnitPrice() {
        return (this.minQuantityAtUnitPrice);
    }
    /**
     * Name of product price.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The Product.
     * @returns Product | null
     */
    getProduct() {
        return (this.product);
    }
    /**
     * The organization.
     * @returns ProductPricingRecurringPeriodType | null
     */
    getProductPricingReccuringPeriodType() {
        return (this.productPricingReccuringPeriodType);
    }
    /**
     * Price per unit for recurring.
     * @returns number
     */
    getRecurringUnitPrice() {
        return (this.recurringUnitPrice);
    }
    /**
     * The tax type.
     * @returns Tax | null
     */
    getTaxId() {
        return (this.taxId);
    }
    /**
     * Unit price.
     * @returns number
     */
    getUnitPrice() {
        return (this.unitPrice);
    }
    /**
     * Use as unit price if in quantity range.
     * @returns boolean
     */
    getUseAsUnitPriceIfInQuantityRange() {
        return ((this.useAsUnitPriceIfInQuantityRange === undefined) ? false : this.useAsUnitPriceIfInQuantityRange);
    }
    /**
     * Weight per bag.
     * @returns number
     */
    getWeightPerBag() {
        return (this.weightPerBag);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveEndDateMutated(_activeEndDateIsMutated) {
        this._activeEndDateIsMutated = _activeEndDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveStartDateMutated(_activeStartDateIsMutated) {
        this._activeStartDateIsMutated = _activeStartDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDurationTypeMutated(_durationTypeIsMutated) {
        this._durationTypeIsMutated = _durationTypeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsFeeMutated(_feeIsMutated) {
        this._feeIsMutated = _feeIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPriceLockedMutated(_isPriceLockedIsMutated) {
        this._isPriceLockedIsMutated = _isPriceLockedIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRecurringMutated(_isRecurringIsMutated) {
        this._isRecurringIsMutated = _isRecurringIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUrgentMutated(_isUrgentIsMutated) {
        this._isUrgentIsMutated = _isUrgentIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsMaxQuantityAtUnitPriceMutated(_maxQuantityAtUnitPriceIsMutated) {
        this._maxQuantityAtUnitPriceIsMutated = _maxQuantityAtUnitPriceIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsMinQuantityAtUnitPriceMutated(_minQuantityAtUnitPriceIsMutated) {
        this._minQuantityAtUnitPriceIsMutated = _minQuantityAtUnitPriceIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductMutated(_productIsMutated) {
        this._productIsMutated = _productIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsProductPricingReccuringPeriodTypeMutated(_productPricingReccuringPeriodTypeIsMutated) {
        this._productPricingReccuringPeriodTypeIsMutated = _productPricingReccuringPeriodTypeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRecurringUnitPriceMutated(_recurringUnitPriceIsMutated) {
        this._recurringUnitPriceIsMutated = _recurringUnitPriceIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsTaxIdMutated(_taxIdIsMutated) {
        this._taxIdIsMutated = _taxIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUnitPriceMutated(_unitPriceIsMutated) {
        this._unitPriceIsMutated = _unitPriceIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUseAsUnitPriceIfInQuantityRangeMutated(_useAsUnitPriceIfInQuantityRangeIsMutated) {
        this._useAsUnitPriceIfInQuantityRangeIsMutated = _useAsUnitPriceIfInQuantityRangeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWeightPerBagMutated(_weightPerBagIsMutated) {
        this._weightPerBagIsMutated = _weightPerBagIsMutated;
        return (this);
    }
    /**
* ```
     * Active end date.
* ```
     */
    setActiveEndDate(activeEndDate) {
        if (!this._getIsMutateSuppressed() && this.activeEndDate !== activeEndDate) {
            this._setIsActiveEndDateMutated(true);
        }
        this.activeEndDate = activeEndDate;
        return (this);
    }
    /**
* ```
     * Active start date.
* ```
     */
    setActiveStartDate(activeStartDate) {
        if (!this._getIsMutateSuppressed() && this.activeStartDate !== activeStartDate) {
            this._setIsActiveStartDateMutated(true);
        }
        this.activeStartDate = activeStartDate;
        return (this);
    }
    /**
* ```
     * Description of product price.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     * The duration type.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setDurationType(durationType, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.durationType !== durationType) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(durationType, persistanceType);
            this._setIsDurationTypeMutated(true);
        }
        this.durationType = durationType;
        return (this);
    }
    /**
* ```
     * Product fee.
* ```
     */
    setFee(fee) {
        if (!this._getIsMutateSuppressed() && this.fee !== fee) {
            this._setIsFeeMutated(true);
        }
        this.fee = fee;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * The product price is locked.
* ```
     */
    setIsPriceLocked(isPriceLocked) {
        if (!this._getIsMutateSuppressed() && this.isPriceLocked !== isPriceLocked) {
            this._setIsPriceLockedMutated(true);
        }
        this.isPriceLocked = isPriceLocked;
        return (this);
    }
    /**
* ```
     * Product is recurring charge.
* ```
     */
    setIsRecurring(isRecurring) {
        if (!this._getIsMutateSuppressed() && this.isRecurring !== isRecurring) {
            this._setIsRecurringMutated(true);
        }
        this.isRecurring = isRecurring;
        return (this);
    }
    /**
* ```
     * The product is an urgent request.
* ```
     */
    setIsUrgent(isUrgent) {
        if (!this._getIsMutateSuppressed() && this.isUrgent !== isUrgent) {
            this._setIsUrgentMutated(true);
        }
        this.isUrgent = isUrgent;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * Max quantity at unit price.
* ```
     */
    setMaxQuantityAtUnitPrice(maxQuantityAtUnitPrice) {
        if (!this._getIsMutateSuppressed() && this.maxQuantityAtUnitPrice !== maxQuantityAtUnitPrice) {
            this._setIsMaxQuantityAtUnitPriceMutated(true);
        }
        this.maxQuantityAtUnitPrice = maxQuantityAtUnitPrice;
        return (this);
    }
    /**
* ```
     * Min quantity at unit price.
* ```
     */
    setMinQuantityAtUnitPrice(minQuantityAtUnitPrice) {
        if (!this._getIsMutateSuppressed() && this.minQuantityAtUnitPrice !== minQuantityAtUnitPrice) {
            this._setIsMinQuantityAtUnitPriceMutated(true);
        }
        this.minQuantityAtUnitPrice = minQuantityAtUnitPrice;
        return (this);
    }
    /**
* ```
     * Name of product price.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The Product.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setProduct(product, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.product !== product) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(product, persistanceType);
            this._setIsProductMutated(true);
        }
        this.product = product;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setProductPricingReccuringPeriodType(productPricingReccuringPeriodType, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.productPricingReccuringPeriodType !== productPricingReccuringPeriodType) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(productPricingReccuringPeriodType, persistanceType);
            this._setIsProductPricingReccuringPeriodTypeMutated(true);
        }
        this.productPricingReccuringPeriodType = productPricingReccuringPeriodType;
        return (this);
    }
    /**
* ```
     * Price per unit for recurring.
* ```
     */
    setRecurringUnitPrice(recurringUnitPrice) {
        if (!this._getIsMutateSuppressed() && this.recurringUnitPrice !== recurringUnitPrice) {
            this._setIsRecurringUnitPriceMutated(true);
        }
        this.recurringUnitPrice = recurringUnitPrice;
        return (this);
    }
    /**
* ```
     * The tax type.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setTaxId(taxId, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.taxId !== taxId) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(taxId, persistanceType);
            this._setIsTaxIdMutated(true);
        }
        this.taxId = taxId;
        return (this);
    }
    /**
* ```
     * Unit price.
* ```
     */
    setUnitPrice(unitPrice) {
        if (!this._getIsMutateSuppressed() && this.unitPrice !== unitPrice) {
            this._setIsUnitPriceMutated(true);
        }
        this.unitPrice = unitPrice;
        return (this);
    }
    /**
* ```
     * Use as unit price if in quantity range.
* ```
     */
    setUseAsUnitPriceIfInQuantityRange(useAsUnitPriceIfInQuantityRange) {
        if (!this._getIsMutateSuppressed() && this.useAsUnitPriceIfInQuantityRange !== useAsUnitPriceIfInQuantityRange) {
            this._setIsUseAsUnitPriceIfInQuantityRangeMutated(true);
        }
        this.useAsUnitPriceIfInQuantityRange = useAsUnitPriceIfInQuantityRange;
        return (this);
    }
    /**
* ```
     * Weight per bag.
* ```
     */
    setWeightPerBag(weightPerBag) {
        if (!this._getIsMutateSuppressed() && this.weightPerBag !== weightPerBag) {
            this._setIsWeightPerBagMutated(true);
        }
        this.weightPerBag = weightPerBag;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'activeEndDate',
            value: this.activeEndDate
        });
        this._setCurrentState2({
            attributeName: 'activeStartDate',
            value: this.activeStartDate
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'durationType',
            value: this.durationType
        });
        this._setCurrentState2({
            attributeName: 'fee',
            value: this.fee
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'isPriceLocked',
            value: this.isPriceLocked
        });
        this._setCurrentState2({
            attributeName: 'isRecurring',
            value: this.isRecurring
        });
        this._setCurrentState2({
            attributeName: 'isUrgent',
            value: this.isUrgent
        });
        this._setCurrentState2({
            attributeName: 'maxQuantityAtUnitPrice',
            value: this.maxQuantityAtUnitPrice
        });
        this._setCurrentState2({
            attributeName: 'minQuantityAtUnitPrice',
            value: this.minQuantityAtUnitPrice
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'product',
            value: this.product
        });
        this._setCurrentState2({
            attributeName: 'productPricingReccuringPeriodType',
            value: this.productPricingReccuringPeriodType
        });
        this._setCurrentState2({
            attributeName: 'recurringUnitPrice',
            value: this.recurringUnitPrice
        });
        this._setCurrentState2({
            attributeName: 'taxId',
            value: this.taxId
        });
        this._setCurrentState2({
            attributeName: 'unitPrice',
            value: this.unitPrice
        });
        this._setCurrentState2({
            attributeName: 'useAsUnitPriceIfInQuantityRange',
            value: this.useAsUnitPriceIfInQuantityRange
        });
        this._setCurrentState2({
            attributeName: 'weightPerBag',
            value: this.weightPerBag
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'activeEndDate',
            value: this.activeEndDate
        });
        this._setInitializedState2({
            attributeName: 'activeStartDate',
            value: this.activeStartDate
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'durationType',
            value: this.durationType
        });
        this._setInitializedState2({
            attributeName: 'fee',
            value: this.fee
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'isPriceLocked',
            value: this.isPriceLocked
        });
        this._setInitializedState2({
            attributeName: 'isRecurring',
            value: this.isRecurring
        });
        this._setInitializedState2({
            attributeName: 'isUrgent',
            value: this.isUrgent
        });
        this._setInitializedState2({
            attributeName: 'maxQuantityAtUnitPrice',
            value: this.maxQuantityAtUnitPrice
        });
        this._setInitializedState2({
            attributeName: 'minQuantityAtUnitPrice',
            value: this.minQuantityAtUnitPrice
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'product',
            value: this.product
        });
        this._setInitializedState2({
            attributeName: 'productPricingReccuringPeriodType',
            value: this.productPricingReccuringPeriodType
        });
        this._setInitializedState2({
            attributeName: 'recurringUnitPrice',
            value: this.recurringUnitPrice
        });
        this._setInitializedState2({
            attributeName: 'taxId',
            value: this.taxId
        });
        this._setInitializedState2({
            attributeName: 'unitPrice',
            value: this.unitPrice
        });
        this._setInitializedState2({
            attributeName: 'useAsUnitPriceIfInQuantityRange',
            value: this.useAsUnitPriceIfInQuantityRange
        });
        this._setInitializedState2({
            attributeName: 'weightPerBag',
            value: this.weightPerBag
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.activeEndDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.activeStartDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.durationType);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.fee);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isPriceLocked);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isRecurring);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isUrgent);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.maxQuantityAtUnitPrice);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.minQuantityAtUnitPrice);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.product);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.productPricingReccuringPeriodType);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.recurringUnitPrice);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.taxId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.unitPrice);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.useAsUnitPriceIfInQuantityRange);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.weightPerBag);
        return (hashCode_n);
    }
}
exports.ProductPricing = ProductPricing;
ProductPricing.metaDataForProductPricing = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.ProductPricing", ProductPricing);
//# sourceMappingURL=ProductPricing.js.map