"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.USState = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
class EntityAttributes {
    constructor() {
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._shortNameIsMutated = "_shortNameIsMutated";
        this.createdDate = "createdDate";
        this.id = "id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.shortName = "shortName";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._shortNameIsMutated = "_shortNameIsMutated";
        this.createdDate = "createdDate";
        this._id = "_id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.shortName = "shortName";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.USState";
        this.mongDataModeName = "USState";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class USState extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._nameIsMutated = false;
        this._shortNameIsMutated = false;
        this.id = null;
        this.jsonType = "com.salesstryke.entity.classes.persistable.USState";
        this.name = null;
        this.shortName = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._nameIsMutated = false;
        this._shortNameIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.USState");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsShortNameMutated() {
        return (this._shortNameIsMutated);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The full name of the state.
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The postal abriviation.
     * @returns string | null
     */
    getShortName() {
        return (this.shortName);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsShortNameMutated(_shortNameIsMutated) {
        this._shortNameIsMutated = _shortNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The full name of the state.
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The postal abriviation.
* ```
     */
    setShortName(shortName) {
        if (!this._getIsMutateSuppressed() && this.shortName !== shortName) {
            this._setIsShortNameMutated(true);
        }
        this.shortName = shortName;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'shortName',
            value: this.shortName
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'shortName',
            value: this.shortName
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.shortName);
        return (hashCode_n);
    }
}
exports.USState = USState;
USState.metaDataForUSState = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.USState", USState);
//# sourceMappingURL=USState.js.map