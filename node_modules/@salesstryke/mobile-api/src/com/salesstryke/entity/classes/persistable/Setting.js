"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Setting = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const EntityUtils_1 = require("../../../utils/entity/EntityUtils");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._displayedNameIsMutated = "_displayedNameIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isDefaultIsMutated = "_isDefaultIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._logoHeightIsMutated = "_logoHeightIsMutated";
        this._logoIsMutated = "_logoIsMutated";
        this._logoWidthIsMutated = "_logoWidthIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._settingNotificationIsMutated = "_settingNotificationIsMutated";
        this._settingOrganizationIsMutated = "_settingOrganizationIsMutated";
        this._settingWorkspaceIsMutated = "_settingWorkspaceIsMutated";
        this._typographyIsMutated = "_typographyIsMutated";
        this.createdDate = "createdDate";
        this.displayedName = "displayedName";
        this.id = "id";
        this.isDefault = "isDefault";
        this.jsonType = "jsonType";
        this.logo = "logo";
        this.logoHeight = "logoHeight";
        this.logoWidth = "logoWidth";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.settingNotification = "settingNotification";
        this.settingOrganization = "settingOrganization";
        this.settingWorkspace = "settingWorkspace";
        this.typography = "typography";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._displayedNameIsMutated = "_displayedNameIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isDefaultIsMutated = "_isDefaultIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._logoHeightIsMutated = "_logoHeightIsMutated";
        this._logoIsMutated = "_logoIsMutated";
        this._logoWidthIsMutated = "_logoWidthIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._settingNotificationIsMutated = "_settingNotificationIsMutated";
        this._settingOrganizationIsMutated = "_settingOrganizationIsMutated";
        this._settingWorkspaceIsMutated = "_settingWorkspaceIsMutated";
        this._typographyIsMutated = "_typographyIsMutated";
        this.createdDate = "createdDate";
        this.displayedName = "displayedName";
        this._id = "_id";
        this.isDefault = "isDefault";
        this.jsonType = "jsonType";
        this.logo = "logo";
        this.logoHeight = "logoHeight";
        this.logoWidth = "logoWidth";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.settingNotification = "settingNotification";
        this.settingOrganization = "settingOrganization";
        this.settingWorkspace = "settingWorkspace";
        this.typography = "typography";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.Setting";
        this.mongDataModeName = "Setting";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class Setting extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._displayedNameIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isDefaultIsMutated = false;
        this._logoHeightIsMutated = false;
        this._logoIsMutated = false;
        this._logoWidthIsMutated = false;
        this._organizationIsMutated = false;
        this._settingNotificationIsMutated = false;
        this._settingOrganizationIsMutated = false;
        this._settingWorkspaceIsMutated = false;
        this._typographyIsMutated = false;
        this.displayedName = null;
        this.id = null;
        this.isDefault = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.Setting";
        this.logo = null;
        this.logoHeight = 0;
        this.logoWidth = 0;
        this.organization = null;
        this.settingNotification = null;
        this.settingOrganization = null;
        this.settingWorkspace = null;
        this.typography = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._displayedNameIsMutated = false;
        this._isDefaultIsMutated = false;
        this._logoIsMutated = false;
        this._logoHeightIsMutated = false;
        this._logoWidthIsMutated = false;
        this._organizationIsMutated = false;
        this._settingNotificationIsMutated = false;
        this._settingOrganizationIsMutated = false;
        this._settingWorkspaceIsMutated = false;
        this._typographyIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.Setting");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsDisplayedNameMutated() {
        return (this._displayedNameIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDefaultMutated() {
        return (this._isDefaultIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLogoHeightMutated() {
        return (this._logoHeightIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLogoMutated() {
        return (this._logoIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLogoWidthMutated() {
        return (this._logoWidthIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSettingNotificationMutated() {
        return (this._settingNotificationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSettingOrganizationMutated() {
        return (this._settingOrganizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSettingWorkspaceMutated() {
        return (this._settingWorkspaceIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsTypographyMutated() {
        return (this._typographyIsMutated);
    }
    /**
     * The Display name for the organization or group.
     * @returns string | null
     */
    getDisplayedName() {
        return (this.displayedName);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * is Default.
     * @returns boolean
     */
    getIsDefault() {
        return ((this.isDefault === undefined) ? false : this.isDefault);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The HTML URL for the Organization logo.
     * @returns string | null
     */
    getLogo() {
        return (this.logo);
    }
    /**
     * The height of the Organization logo in pixels.
     * @returns number
     */
    getLogoHeight() {
        return (this.logoHeight);
    }
    /**
     * The width of the Organization logo in pixels.
     * @returns number
     */
    getLogoWidth() {
        return (this.logoWidth);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * Notification setting
     * @returns SettingNotification | null
     */
    getSettingNotification() {
        return (this.settingNotification);
    }
    /**
     * Organization setting
     * @returns SettingOrganization | null
     */
    getSettingOrganization() {
        return (this.settingOrganization);
    }
    /**
     * Workspace setting.
     * @returns SettingWorkspace | null
     */
    getSettingWorkspace() {
        return (this.settingWorkspace);
    }
    /**
     * Setting for typography, such as font family and size.
     * @returns Object
     */
    getTypography() {
        return EntityUtils_1.EntityUtils.jsonStringGetter({ value: this.typography || '' });
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDisplayedNameMutated(_displayedNameIsMutated) {
        this._displayedNameIsMutated = _displayedNameIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDefaultMutated(_isDefaultIsMutated) {
        this._isDefaultIsMutated = _isDefaultIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLogoHeightMutated(_logoHeightIsMutated) {
        this._logoHeightIsMutated = _logoHeightIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLogoMutated(_logoIsMutated) {
        this._logoIsMutated = _logoIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLogoWidthMutated(_logoWidthIsMutated) {
        this._logoWidthIsMutated = _logoWidthIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSettingNotificationMutated(_settingNotificationIsMutated) {
        this._settingNotificationIsMutated = _settingNotificationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSettingOrganizationMutated(_settingOrganizationIsMutated) {
        this._settingOrganizationIsMutated = _settingOrganizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSettingWorkspaceMutated(_settingWorkspaceIsMutated) {
        this._settingWorkspaceIsMutated = _settingWorkspaceIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsTypographyMutated(_typographyIsMutated) {
        this._typographyIsMutated = _typographyIsMutated;
        return (this);
    }
    /**
* ```
     * The Display name for the organization or group.
* ```
     */
    setDisplayedName(displayedName) {
        if (!this._getIsMutateSuppressed() && this.displayedName !== displayedName) {
            this._setIsDisplayedNameMutated(true);
        }
        this.displayedName = displayedName;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * is Default.
* ```
     */
    setIsDefault(isDefault) {
        if (!this._getIsMutateSuppressed() && this.isDefault !== isDefault) {
            this._setIsDefaultMutated(true);
        }
        this.isDefault = isDefault;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The HTML URL for the Organization logo.
* ```
     */
    setLogo(logo) {
        if (!this._getIsMutateSuppressed() && this.logo !== logo) {
            this._setIsLogoMutated(true);
        }
        this.logo = logo;
        return (this);
    }
    /**
* ```
     * The height of the Organization logo in pixels.
* ```
     */
    setLogoHeight(logoHeight) {
        if (!this._getIsMutateSuppressed() && this.logoHeight !== logoHeight) {
            this._setIsLogoHeightMutated(true);
        }
        this.logoHeight = logoHeight;
        return (this);
    }
    /**
* ```
     * The width of the Organization logo in pixels.
* ```
     */
    setLogoWidth(logoWidth) {
        if (!this._getIsMutateSuppressed() && this.logoWidth !== logoWidth) {
            this._setIsLogoWidthMutated(true);
        }
        this.logoWidth = logoWidth;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * Notification setting
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSettingNotification(settingNotification, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.settingNotification !== settingNotification) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(settingNotification, persistanceType);
            this._setIsSettingNotificationMutated(true);
        }
        this.settingNotification = settingNotification;
        return (this);
    }
    /**
* ```
     * Organization setting
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSettingOrganization(settingOrganization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.settingOrganization !== settingOrganization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(settingOrganization, persistanceType);
            this._setIsSettingOrganizationMutated(true);
        }
        this.settingOrganization = settingOrganization;
        return (this);
    }
    /**
* ```
     * Workspace setting.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSettingWorkspace(settingWorkspace, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.settingWorkspace !== settingWorkspace) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(settingWorkspace, persistanceType);
            this._setIsSettingWorkspaceMutated(true);
        }
        this.settingWorkspace = settingWorkspace;
        return (this);
    }
    /**
* ```
     * Setting for typography, such as font family and size.
* ```
     */
    setTypography(typography) {
        if (!this._getIsMutateSuppressed() && this.typography !== EntityUtils_1.EntityUtils.jsonStringSetter({ value: typography })) {
            this._setIsTypographyMutated(true);
        }
        this.typography = EntityUtils_1.EntityUtils.jsonStringSetter({ value: typography });
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'displayedName',
            value: this.displayedName
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'isDefault',
            value: this.isDefault
        });
        this._setCurrentState2({
            attributeName: 'logo',
            value: this.logo
        });
        this._setCurrentState2({
            attributeName: 'logoHeight',
            value: this.logoHeight
        });
        this._setCurrentState2({
            attributeName: 'logoWidth',
            value: this.logoWidth
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'settingNotification',
            value: this.settingNotification
        });
        this._setCurrentState2({
            attributeName: 'settingOrganization',
            value: this.settingOrganization
        });
        this._setCurrentState2({
            attributeName: 'settingWorkspace',
            value: this.settingWorkspace
        });
        this._setCurrentState2({
            attributeName: 'typography',
            value: this.typography
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'displayedName',
            value: this.displayedName
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'isDefault',
            value: this.isDefault
        });
        this._setInitializedState2({
            attributeName: 'logo',
            value: this.logo
        });
        this._setInitializedState2({
            attributeName: 'logoHeight',
            value: this.logoHeight
        });
        this._setInitializedState2({
            attributeName: 'logoWidth',
            value: this.logoWidth
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'settingNotification',
            value: this.settingNotification
        });
        this._setInitializedState2({
            attributeName: 'settingOrganization',
            value: this.settingOrganization
        });
        this._setInitializedState2({
            attributeName: 'settingWorkspace',
            value: this.settingWorkspace
        });
        this._setInitializedState2({
            attributeName: 'typography',
            value: this.typography
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.displayedName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isDefault);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.logo);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.logoHeight);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.logoWidth);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.settingNotification);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.settingOrganization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.settingWorkspace);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.typography);
        return (hashCode_n);
    }
}
exports.Setting = Setting;
Setting.metaDataForSetting = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.Setting", Setting);
//# sourceMappingURL=Setting.js.map