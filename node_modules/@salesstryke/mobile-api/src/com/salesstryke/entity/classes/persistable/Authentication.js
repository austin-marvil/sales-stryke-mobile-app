"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authentication = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
class EntityAttributes {
    constructor() {
        this._entityState = "_entityState";
        this._loginIsMutated = "_loginIsMutated";
        this._passwordIsMutated = "_passwordIsMutated";
        this.jsonType = "jsonType";
        this.login = "login";
        this.organization = "organization";
        this.password = "password";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._entityState = "_entityState";
        this._loginIsMutated = "_loginIsMutated";
        this._passwordIsMutated = "_passwordIsMutated";
        this.jsonType = "jsonType";
        this.login = "login";
        this.organizationRef = "organizationRef";
        this.password = "password";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.Authentication";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class Authentication extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor() {
        super();
        this._loginIsMutated = false;
        this._passwordIsMutated = false;
        this.jsonType = "com.salesstryke.entity.classes.persistable.Authentication";
        this.login = null;
        this.organization = null;
        this.password = null;
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.Authentication");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     *
     * @returns boolean
     */
    _getIsLoginMutated() {
        return (this._loginIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPasswordMutated() {
        return (this._passwordIsMutated);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     *
     * @returns string | null
     */
    getLogin() {
        return (this.login);
    }
    /**
     *
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     *
     * @returns string | null
     */
    getPassword() {
        return (this.password);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     *
     */
    _setIsLoginMutated(_loginIsMutated) {
        this._loginIsMutated = _loginIsMutated;
        return (this);
    }
    /**
     *
     */
    _setIsPasswordMutated(_passwordIsMutated) {
        this._passwordIsMutated = _passwordIsMutated;
        return (this);
    }
    /**
     *
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
     *
     */
    setLogin(login) {
        if (this.login !== login) {
            this._setIsLoginMutated(true);
        }
        this.login = login;
        return (this);
    }
    /**
     *
     */
    setOrganization(organization) {
        this.organization = organization;
        return (this);
    }
    /**
     *
     */
    setPassword(password) {
        if (this.password !== password) {
            this._setIsPasswordMutated(true);
        }
        this.password = password;
        return (this);
    }
}
exports.Authentication = Authentication;
Authentication.metaDataForAuthentication = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.Authentication", Authentication);
//# sourceMappingURL=Authentication.js.map