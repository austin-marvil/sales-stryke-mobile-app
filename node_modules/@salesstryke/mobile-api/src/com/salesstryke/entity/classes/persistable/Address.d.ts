/**
 * This file is auto generated DO NOT EDIT.
 */
import { USState } from './USState';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _administrativeLevel1IsMutated: string;
    _administrativeLevel2IsMutated: string;
    _administrativeLevel3IsMutated: string;
    _cityIsMutated: string;
    _confidenceIsMutated: string;
    _directionIsMutated: string;
    _entityState: string;
    _formattedAddressIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isValidatedIsMutated: string;
    _jsonStateStr: string;
    _latIsMutated: string;
    _lngIsMutated: string;
    _neighborhoodIsMutated: string;
    _postOfficeIsMutated: string;
    _streetIsMutated: string;
    _streetNameIsMutated: string;
    _streetNumberIsMutated: string;
    _streetSuffixIsMutated: string;
    _subpremiseLevelIsMutated: string;
    _usStateIsMutated: string;
    _validatedByIsMutated: string;
    _zipcodeIsMutated: string;
    administrativeLevel1: string;
    administrativeLevel2: string;
    administrativeLevel3: string;
    city: string;
    confidence: string;
    createdDate: string;
    direction: string;
    formattedAddress: string;
    id: string;
    isValidated: string;
    jsonType: string;
    lat: string;
    lng: string;
    modifiedDate: string;
    neighborhood: string;
    postOffice: string;
    street: string;
    streetName: string;
    streetNumber: string;
    streetSuffix: string;
    subpremiseLevel: string;
    usState: string;
    validatedBy: string;
    zipcode: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _administrativeLevel1IsMutated: string;
    _administrativeLevel2IsMutated: string;
    _administrativeLevel3IsMutated: string;
    _cityIsMutated: string;
    _confidenceIsMutated: string;
    _directionIsMutated: string;
    _entityState: string;
    _formattedAddressIsMutated: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isValidatedIsMutated: string;
    _jsonStateStr: string;
    _latIsMutated: string;
    _lngIsMutated: string;
    _neighborhoodIsMutated: string;
    _postOfficeIsMutated: string;
    _streetIsMutated: string;
    _streetNameIsMutated: string;
    _streetNumberIsMutated: string;
    _streetSuffixIsMutated: string;
    _subpremiseLevelIsMutated: string;
    _usStateIsMutated: string;
    _validatedByIsMutated: string;
    _zipcodeIsMutated: string;
    administrativeLevel1: string;
    administrativeLevel2: string;
    administrativeLevel3: string;
    city: string;
    confidence: string;
    createdDate: string;
    direction: string;
    formattedAddress: string;
    _id: string;
    isValidated: string;
    jsonType: string;
    lat: string;
    lng: string;
    modifiedDate: string;
    neighborhood: string;
    postOffice: string;
    street: string;
    streetName: string;
    streetNumber: string;
    streetSuffix: string;
    subpremiseLevel: string;
    usState: string;
    validatedBy: string;
    zipcode: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class Address extends JsonApiPersistableBase {
    static metaDataForAddress: MetaData;
    private _administrativeLevel1IsMutated;
    private _administrativeLevel2IsMutated;
    private _administrativeLevel3IsMutated;
    private _cityIsMutated;
    private _confidenceIsMutated;
    private _directionIsMutated;
    private _formattedAddressIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _isValidatedIsMutated;
    private _latIsMutated;
    private _lngIsMutated;
    private _neighborhoodIsMutated;
    private _postOfficeIsMutated;
    private _streetIsMutated;
    private _streetNameIsMutated;
    private _streetNumberIsMutated;
    private _streetSuffixIsMutated;
    private _subpremiseLevelIsMutated;
    private _usStateIsMutated;
    private _validatedByIsMutated;
    private _zipcodeIsMutated;
    private administrativeLevel1;
    private administrativeLevel2;
    private administrativeLevel3;
    private city;
    private confidence;
    private direction;
    private formattedAddress;
    private id;
    private isValidated;
    private jsonType;
    private lat;
    private lng;
    private neighborhood;
    private postOffice;
    private street;
    private streetName;
    private streetNumber;
    private streetSuffix;
    private subpremiseLevel;
    private usState;
    private validatedBy;
    private zipcode;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): Address;
    getClassName(): string;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsAdministrativeLevel1Mutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAdministrativeLevel2Mutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAdministrativeLevel3Mutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsCityMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsConfidenceMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsDirectionMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsFormattedAddressMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsValidatedMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLatMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLngMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsNeighborhoodMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsPostOfficeMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStreetMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStreetNameMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStreetNumberMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStreetSuffixMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSubpremiseLevelMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsUsStateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsValidatedByMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsZipcodeMutated(): boolean;
    /**
     * The administrativeLevel1 (state) for the address.
     * @returns string | null
     */
    getAdministrativeLevel1(): string | null;
    /**
     * The administrativeLevel2 (county) for the address.
     * @returns string | null
     */
    getAdministrativeLevel2(): string | null;
    /**
     * The administrativeLevel3 (city/town) for the address.
     * @returns string | null
     */
    getAdministrativeLevel3(): string | null;
    /**
     * The city
     * @returns string | null
     */
    getCity(): string | null;
    /**
     * The confidence for the address.
     * @returns number
     */
    getConfidence(): number;
    /**
     * The direction for the address.
     * @returns string | null
     */
    getDirection(): string | null;
    /**
     * The formattedAddress for the address.
     * @returns string | null
     */
    getFormattedAddress(): string | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * Is address validated by a service.
     * @returns boolean
     */
    getIsValidated(): boolean;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The lat for the address.
     * @returns number
     */
    getLat(): number;
    /**
     * The lng for the address.
     * @returns number
     */
    getLng(): number;
    /**
     * The neighborhood for the address.
     * @returns string | null
     */
    getNeighborhood(): string | null;
    /**
     * Is the address a post office/box.
     * @returns string | null
     */
    getPostOffice(): string | null;
    /**
     * The street for the address.
     * @returns string | null
     */
    getStreet(): string | null;
    /**
     * The name of the street for the address.
     * @returns string | null
     */
    getStreetName(): string | null;
    /**
     * The streetNumber for the address.
     * @returns string | null
     */
    getStreetNumber(): string | null;
    /**
     * The street suffix for the address.
     * @returns string | null
     */
    getStreetSuffix(): string | null;
    /**
     * The subpremiseLevel for the address.
     * @returns string | null
     */
    getSubpremiseLevel(): string | null;
    /**
     * The US state for the address.
     * @returns USState | null
     */
    getUsState(): USState | null;
    /**
     * The service that validate the address.
     * @returns string | null
     */
    getValidatedBy(): string | null;
    /**
     * The zipcode for the address.
     * @returns string | null
     */
    getZipcode(): string | null;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): Address;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): Address;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): Address;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): Address;
    /**
* ```
     *
* ```
     */
    _setIsAdministrativeLevel1Mutated(_administrativeLevel1IsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsAdministrativeLevel2Mutated(_administrativeLevel2IsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsAdministrativeLevel3Mutated(_administrativeLevel3IsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsCityMutated(_cityIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsConfidenceMutated(_confidenceIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsDirectionMutated(_directionIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsFormattedAddressMutated(_formattedAddressIsMutated: boolean): Address;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): Address;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): Address;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsValidatedMutated(_isValidatedIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsLatMutated(_latIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsLngMutated(_lngIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsNeighborhoodMutated(_neighborhoodIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsPostOfficeMutated(_postOfficeIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsStreetMutated(_streetIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsStreetNameMutated(_streetNameIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsStreetNumberMutated(_streetNumberIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsStreetSuffixMutated(_streetSuffixIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsSubpremiseLevelMutated(_subpremiseLevelIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsUsStateMutated(_usStateIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsValidatedByMutated(_validatedByIsMutated: boolean): Address;
    /**
* ```
     *
* ```
     */
    _setIsZipcodeMutated(_zipcodeIsMutated: boolean): Address;
    /**
* ```
     * The administrativeLevel1 (state) for the address.
* ```
     */
    setAdministrativeLevel1(administrativeLevel1: string | null): Address;
    /**
* ```
     * The administrativeLevel2 (county) for the address.
* ```
     */
    setAdministrativeLevel2(administrativeLevel2: string | null): Address;
    /**
* ```
     * The administrativeLevel3 (city/town) for the address.
* ```
     */
    setAdministrativeLevel3(administrativeLevel3: string | null): Address;
    /**
* ```
     * The city
* ```
     */
    setCity(city: string | null): Address;
    /**
* ```
     * The confidence for the address.
* ```
     */
    setConfidence(confidence: number): Address;
    /**
* ```
     * The direction for the address.
* ```
     */
    setDirection(direction: string | null): Address;
    /**
* ```
     * The formattedAddress for the address.
* ```
     */
    setFormattedAddress(formattedAddress: string | null): Address;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): Address;
    /**
* ```
     * Is address validated by a service.
* ```
     */
    setIsValidated(isValidated: boolean): Address;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): Address;
    /**
* ```
     * The lat for the address.
* ```
     */
    setLat(lat: number): Address;
    /**
* ```
     * The lng for the address.
* ```
     */
    setLng(lng: number): Address;
    /**
* ```
     * The neighborhood for the address.
* ```
     */
    setNeighborhood(neighborhood: string | null): Address;
    /**
* ```
     * Is the address a post office/box.
* ```
     */
    setPostOffice(postOffice: string | null): Address;
    /**
* ```
     * The street for the address.
* ```
     */
    setStreet(street: string | null): Address;
    /**
* ```
     * The name of the street for the address.
* ```
     */
    setStreetName(streetName: string | null): Address;
    /**
* ```
     * The streetNumber for the address.
* ```
     */
    setStreetNumber(streetNumber: string | null): Address;
    /**
* ```
     * The street suffix for the address.
* ```
     */
    setStreetSuffix(streetSuffix: string | null): Address;
    /**
* ```
     * The subpremiseLevel for the address.
* ```
     */
    setSubpremiseLevel(subpremiseLevel: string | null): Address;
    /**
* ```
     * The US state for the address.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setUsState(usState: USState | null, persistanceType?: PersistenceType): Address;
    /**
* ```
     * The service that validate the address.
* ```
     */
    setValidatedBy(validatedBy: string | null): Address;
    /**
* ```
     * The zipcode for the address.
* ```
     */
    setZipcode(zipcode: string | null): Address;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
