"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._emailIsMutated = "_emailIsMutated";
        this._entityState = "_entityState";
        this._firstNameIsMutated = "_firstNameIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._lastNameIsMutated = "_lastNameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._phoneIsMutated = "_phoneIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._softPakCustomerIdIsMutated = "_softPakCustomerIdIsMutated";
        this._userTypeIsMutated = "_userTypeIsMutated";
        this.createdDate = "createdDate";
        this.email = "email";
        this.firstName = "firstName";
        this.id = "id";
        this.jsonType = "jsonType";
        this.lastName = "lastName";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.phone = "phone";
        this.softPakCustomerId = "softPakCustomerId";
        this.userType = "userType";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._emailIsMutated = "_emailIsMutated";
        this._entityState = "_entityState";
        this._firstNameIsMutated = "_firstNameIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._lastNameIsMutated = "_lastNameIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._phoneIsMutated = "_phoneIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._softPakCustomerIdIsMutated = "_softPakCustomerIdIsMutated";
        this._userTypeIsMutated = "_userTypeIsMutated";
        this.createdDate = "createdDate";
        this.email = "email";
        this.firstName = "firstName";
        this._id = "_id";
        this.jsonType = "jsonType";
        this.lastName = "lastName";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.phone = "phone";
        this.softPakCustomerId = "softPakCustomerId";
        this.userType = "userType";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.User";
        this.mongDataModeName = "User";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class User extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._emailIsMutated = false;
        this._firstNameIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._lastNameIsMutated = false;
        this._organizationIsMutated = false;
        this._phoneIsMutated = false;
        this._softPakCustomerIdIsMutated = false;
        this._userTypeIsMutated = false;
        this.email = null;
        this.firstName = null;
        this.id = null;
        this.jsonType = "com.salesstryke.entity.classes.persistable.User";
        this.lastName = null;
        this.organization = null;
        this.phone = null;
        this.softPakCustomerId = null;
        this.userType = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._emailIsMutated = false;
        this._firstNameIsMutated = false;
        this._lastNameIsMutated = false;
        this._organizationIsMutated = false;
        this._phoneIsMutated = false;
        this._softPakCustomerIdIsMutated = false;
        this._userTypeIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.User");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsEmailMutated() {
        return (this._emailIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsFirstNameMutated() {
        return (this._firstNameIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsLastNameMutated() {
        return (this._lastNameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsPhoneMutated() {
        return (this._phoneIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsSoftPakCustomerIdMutated() {
        return (this._softPakCustomerIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsUserTypeMutated() {
        return (this._userTypeIsMutated);
    }
    /**
     * The user email
     * @returns string | null
     */
    getEmail() {
        return (this.email);
    }
    /**
     * The user first name.
     * @returns string | null
     */
    getFirstName() {
        return (this.firstName);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The user LastName
     * @returns string | null
     */
    getLastName() {
        return (this.lastName);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The user phone number
     * @returns string | null
     */
    getPhone() {
        return (this.phone);
    }
    /**
     * The Soft-Pak customerid.
     * @returns string | null
     */
    getSoftPakCustomerId() {
        return (this.softPakCustomerId);
    }
    /**
     * The User Type.
     * @returns UserType | null
     */
    getUserType() {
        return (this.userType);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEmailMutated(_emailIsMutated) {
        this._emailIsMutated = _emailIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsFirstNameMutated(_firstNameIsMutated) {
        this._firstNameIsMutated = _firstNameIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsLastNameMutated(_lastNameIsMutated) {
        this._lastNameIsMutated = _lastNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsPhoneMutated(_phoneIsMutated) {
        this._phoneIsMutated = _phoneIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsSoftPakCustomerIdMutated(_softPakCustomerIdIsMutated) {
        this._softPakCustomerIdIsMutated = _softPakCustomerIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsUserTypeMutated(_userTypeIsMutated) {
        this._userTypeIsMutated = _userTypeIsMutated;
        return (this);
    }
    /**
* ```
     * The user email
* ```
     */
    setEmail(email) {
        if (!this._getIsMutateSuppressed() && this.email !== email) {
            this._setIsEmailMutated(true);
        }
        this.email = email;
        return (this);
    }
    /**
* ```
     * The user first name.
* ```
     */
    setFirstName(firstName) {
        if (!this._getIsMutateSuppressed() && this.firstName !== firstName) {
            this._setIsFirstNameMutated(true);
        }
        this.firstName = firstName;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The user LastName
* ```
     */
    setLastName(lastName) {
        if (!this._getIsMutateSuppressed() && this.lastName !== lastName) {
            this._setIsLastNameMutated(true);
        }
        this.lastName = lastName;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The user phone number
* ```
     */
    setPhone(phone) {
        if (!this._getIsMutateSuppressed() && this.phone !== phone) {
            this._setIsPhoneMutated(true);
        }
        this.phone = phone;
        return (this);
    }
    /**
* ```
     * The Soft-Pak customerid.
* ```
     */
    setSoftPakCustomerId(softPakCustomerId) {
        if (!this._getIsMutateSuppressed() && this.softPakCustomerId !== softPakCustomerId) {
            this._setIsSoftPakCustomerIdMutated(true);
        }
        this.softPakCustomerId = softPakCustomerId;
        return (this);
    }
    /**
* ```
     * The User Type.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setUserType(userType, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.userType !== userType) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(userType, persistanceType);
            this._setIsUserTypeMutated(true);
        }
        this.userType = userType;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'email',
            value: this.email
        });
        this._setCurrentState2({
            attributeName: 'firstName',
            value: this.firstName
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'lastName',
            value: this.lastName
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'phone',
            value: this.phone
        });
        this._setCurrentState2({
            attributeName: 'softPakCustomerId',
            value: this.softPakCustomerId
        });
        this._setCurrentState2({
            attributeName: 'userType',
            value: this.userType
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'email',
            value: this.email
        });
        this._setInitializedState2({
            attributeName: 'firstName',
            value: this.firstName
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'lastName',
            value: this.lastName
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'phone',
            value: this.phone
        });
        this._setInitializedState2({
            attributeName: 'softPakCustomerId',
            value: this.softPakCustomerId
        });
        this._setInitializedState2({
            attributeName: 'userType',
            value: this.userType
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.email);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.firstName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.lastName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.phone);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.softPakCustomerId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.userType);
        return (hashCode_n);
    }
}
exports.User = User;
User.metaDataForUser = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.User", User);
//# sourceMappingURL=User.js.map