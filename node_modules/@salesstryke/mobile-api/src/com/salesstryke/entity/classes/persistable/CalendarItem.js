"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarItem = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const EntityUtils_1 = require("../../../utils/entity/EntityUtils");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._allDayIsMutated = "_allDayIsMutated";
        this._backgroundColorIsMutated = "_backgroundColorIsMutated";
        this._borderColorIsMutated = "_borderColorIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._eventEndDateIsMutated = "_eventEndDateIsMutated";
        this._eventEndTimeIsMutated = "_eventEndTimeIsMutated";
        this._eventStartDateIsMutated = "_eventStartDateIsMutated";
        this._eventStartTimeIsMutated = "_eventStartTimeIsMutated";
        this._excludeDatesIsMutated = "_excludeDatesIsMutated";
        this._frequencyIsMutated = "_frequencyIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._intervalIsMutated = "_intervalIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._nthIsMutated = "_nthIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._originalEventStartDateIsMutated = "_originalEventStartDateIsMutated";
        this._recurringEndDateIsMutated = "_recurringEndDateIsMutated";
        this._recurringEventIdIsMutated = "_recurringEventIdIsMutated";
        this._recurringStartDateIsMutated = "_recurringStartDateIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._resourceIdIsMutated = "_resourceIdIsMutated";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.allDay = "allDay";
        this.backgroundColor = "backgroundColor";
        this.borderColor = "borderColor";
        this.createdDate = "createdDate";
        this.description = "description";
        this.eventEndDate = "eventEndDate";
        this.eventEndTime = "eventEndTime";
        this.eventStartDate = "eventStartDate";
        this.eventStartTime = "eventStartTime";
        this.excludeDates = "excludeDates";
        this.frequency = "frequency";
        this.id = "id";
        this.interval = "interval";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.nth = "nth";
        this.organization = "organization";
        this.originalEventStartDate = "originalEventStartDate";
        this.recurringEndDate = "recurringEndDate";
        this.recurringEventId = "recurringEventId";
        this.recurringStartDate = "recurringStartDate";
        this.resourceId = "resourceId";
        this.workspace = "workspace";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._allDayIsMutated = "_allDayIsMutated";
        this._backgroundColorIsMutated = "_backgroundColorIsMutated";
        this._borderColorIsMutated = "_borderColorIsMutated";
        this._descriptionIsMutated = "_descriptionIsMutated";
        this._entityState = "_entityState";
        this._eventEndDateIsMutated = "_eventEndDateIsMutated";
        this._eventEndTimeIsMutated = "_eventEndTimeIsMutated";
        this._eventStartDateIsMutated = "_eventStartDateIsMutated";
        this._eventStartTimeIsMutated = "_eventStartTimeIsMutated";
        this._excludeDatesIsMutated = "_excludeDatesIsMutated";
        this._frequencyIsMutated = "_frequencyIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._intervalIsMutated = "_intervalIsMutated";
        this._isActiveIsMutated = "_isActiveIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._nameIsMutated = "_nameIsMutated";
        this._nthIsMutated = "_nthIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._originalEventStartDateIsMutated = "_originalEventStartDateIsMutated";
        this._recurringEndDateIsMutated = "_recurringEndDateIsMutated";
        this._recurringEventIdIsMutated = "_recurringEventIdIsMutated";
        this._recurringStartDateIsMutated = "_recurringStartDateIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._resourceIdIsMutated = "_resourceIdIsMutated";
        this._workspaceIsMutated = "_workspaceIsMutated";
        this.allDay = "allDay";
        this.backgroundColor = "backgroundColor";
        this.borderColor = "borderColor";
        this.createdDate = "createdDate";
        this.description = "description";
        this.eventEndDate = "eventEndDate";
        this.eventEndTime = "eventEndTime";
        this.eventStartDate = "eventStartDate";
        this.eventStartTime = "eventStartTime";
        this.excludeDates = "excludeDates";
        this.frequency = "frequency";
        this._id = "_id";
        this.interval = "interval";
        this.isActive = "isActive";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.name = "name";
        this.nth = "nth";
        this.organization = "organization";
        this.originalEventStartDate = "originalEventStartDate";
        this.recurringEndDate = "recurringEndDate";
        this.recurringEventId = "recurringEventId";
        this.recurringStartDate = "recurringStartDate";
        this.resourceId = "resourceId";
        this.workspace = "workspace";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.CalendarItem";
        this.mongDataModeName = "CalendarItem";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class CalendarItem extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._allDayIsMutated = false;
        this._backgroundColorIsMutated = false;
        this._borderColorIsMutated = false;
        this._descriptionIsMutated = false;
        this._eventEndDateIsMutated = false;
        this._eventEndTimeIsMutated = false;
        this._eventStartDateIsMutated = false;
        this._eventStartTimeIsMutated = false;
        this._excludeDatesIsMutated = false;
        this._frequencyIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._intervalIsMutated = false;
        this._isActiveIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._nameIsMutated = false;
        this._nthIsMutated = false;
        this._organizationIsMutated = false;
        this._originalEventStartDateIsMutated = false;
        this._recurringEndDateIsMutated = false;
        this._recurringEventIdIsMutated = false;
        this._recurringStartDateIsMutated = false;
        this._resourceIdIsMutated = false;
        this._workspaceIsMutated = false;
        this.allDay = undefined;
        this.backgroundColor = null;
        this.borderColor = null;
        this.description = null;
        this.eventEndDate = null;
        this.eventEndTime = null;
        this.eventStartDate = null;
        this.eventStartTime = null;
        this.excludeDates = null;
        this.frequency = null;
        this.id = null;
        this.interval = 0;
        this.isActive = undefined;
        this.jsonType = "com.salesstryke.entity.classes.persistable.CalendarItem";
        this.name = null;
        this.nth = 0;
        this.organization = null;
        this.originalEventStartDate = null;
        this.recurringEndDate = null;
        this.recurringEventId = null;
        this.recurringStartDate = null;
        this.resourceId = null;
        this.workspace = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._allDayIsMutated = false;
        this._backgroundColorIsMutated = false;
        this._borderColorIsMutated = false;
        this._descriptionIsMutated = false;
        this._eventEndDateIsMutated = false;
        this._eventEndTimeIsMutated = false;
        this._eventStartDateIsMutated = false;
        this._eventStartTimeIsMutated = false;
        this._excludeDatesIsMutated = false;
        this._frequencyIsMutated = false;
        this._intervalIsMutated = false;
        this._isActiveIsMutated = false;
        this._nameIsMutated = false;
        this._nthIsMutated = false;
        this._organizationIsMutated = false;
        this._originalEventStartDateIsMutated = false;
        this._recurringEndDateIsMutated = false;
        this._recurringEventIdIsMutated = false;
        this._recurringStartDateIsMutated = false;
        this._resourceIdIsMutated = false;
        this._workspaceIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.CalendarItem");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsAllDayMutated() {
        return (this._allDayIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsBackgroundColorMutated() {
        return (this._backgroundColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsBorderColorMutated() {
        return (this._borderColorIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated() {
        return (this._descriptionIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsEventEndDateMutated() {
        return (this._eventEndDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsEventEndTimeMutated() {
        return (this._eventEndTimeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsEventStartDateMutated() {
        return (this._eventStartDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsEventStartTimeMutated() {
        return (this._eventStartTimeIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsExcludeDatesMutated() {
        return (this._excludeDatesIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsFrequencyMutated() {
        return (this._frequencyIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsIntervalMutated() {
        return (this._intervalIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated() {
        return (this._isActiveIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated() {
        return (this._nameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNthMutated() {
        return (this._nthIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOriginalEventStartDateMutated() {
        return (this._originalEventStartDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRecurringEndDateMutated() {
        return (this._recurringEndDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRecurringEventIdMutated() {
        return (this._recurringEventIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRecurringStartDateMutated() {
        return (this._recurringStartDateIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsResourceIdMutated() {
        return (this._resourceIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceMutated() {
        return (this._workspaceIsMutated);
    }
    /**
     * Identify if event is all day.
     * @returns boolean
     */
    getAllDay() {
        return ((this.allDay === undefined) ? false : this.allDay);
    }
    /**
     * The background color
     * @returns string | null
     */
    getBackgroundColor() {
        return (this.backgroundColor);
    }
    /**
     * The border color
     * @returns string | null
     */
    getBorderColor() {
        return (this.borderColor);
    }
    /**
     * The description.
     * @returns string | null
     */
    getDescription() {
        return (this.description);
    }
    /**
     * Event end date of the event in YYYY-MM-DD format.
     * @returns string | null
     */
    getEventEndDate() {
        return (this.eventEndDate);
    }
    /**
     * The event end time in HH:mm format.
     * @returns string | null
     */
    getEventEndTime() {
        return (this.eventEndTime);
    }
    /**
     * Event start date of the event in YYYY-MM-DD format.
     * @returns string | null
     */
    getEventStartDate() {
        return (this.eventStartDate);
    }
    /**
     * The event start time in HH:mm format.
     * @returns string | null
     */
    getEventStartTime() {
        return (this.eventStartTime);
    }
    /**
     * An json data that contains an array of dates to exclude from the recurrence.
     * @returns Object
     */
    getExcludeDates() {
        return EntityUtils_1.EntityUtils.jsonStringGetter({ value: this.excludeDates || '' });
    }
    /**
     * The frequency of the recurrence (e.g., daily, weekly, monthly).
     * @returns string | null
     */
    getFrequency() {
        return (this.frequency);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     * The interval of the recurrence (e.g., every 2 weeks).
     * @returns number
     */
    getInterval() {
        return (this.interval);
    }
    /**
     * Identifies if active.
     * @returns boolean
     */
    getIsActive() {
        return ((this.isActive === undefined) ? false : this.isActive);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The data name
     * @returns string | null
     */
    getName() {
        return (this.name);
    }
    /**
     * The nth occurrence within the frequency (e.g., 2nd Monday of the month). Monthly frequency only.
     * @returns number
     */
    getNth() {
        return (this.nth);
    }
    /**
     * Entity Organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * For an instance of a recurring event. The original event start date
     * @returns Date | null
     */
    getOriginalEventStartDate() {
        return (this.originalEventStartDate);
    }
    /**
     * The end date of the recurrence pattern.
     * @returns Date | null
     */
    getRecurringEndDate() {
        return (this.recurringEndDate);
    }
    /**
     * The recurring event Id it belong to or branch off from when created
     * @returns string | null
     */
    getRecurringEventId() {
        return (this.recurringEventId);
    }
    /**
     * The start date of the recurrence pattern.
     * @returns Date | null
     */
    getRecurringStartDate() {
        return (this.recurringStartDate);
    }
    /**
     * The resource id (kmlLayer.id, KmlGeometry.id, etc.)
     * @returns string | null
     */
    getResourceId() {
        return (this.resourceId);
    }
    /**
     * Entity Workspace.
     * @returns Workspace | null
     */
    getWorkspace() {
        return (this.workspace);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAllDayMutated(_allDayIsMutated) {
        this._allDayIsMutated = _allDayIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsBackgroundColorMutated(_backgroundColorIsMutated) {
        this._backgroundColorIsMutated = _backgroundColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsBorderColorMutated(_borderColorIsMutated) {
        this._borderColorIsMutated = _borderColorIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated) {
        this._descriptionIsMutated = _descriptionIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEventEndDateMutated(_eventEndDateIsMutated) {
        this._eventEndDateIsMutated = _eventEndDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEventEndTimeMutated(_eventEndTimeIsMutated) {
        this._eventEndTimeIsMutated = _eventEndTimeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEventStartDateMutated(_eventStartDateIsMutated) {
        this._eventStartDateIsMutated = _eventStartDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsEventStartTimeMutated(_eventStartTimeIsMutated) {
        this._eventStartTimeIsMutated = _eventStartTimeIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsExcludeDatesMutated(_excludeDatesIsMutated) {
        this._excludeDatesIsMutated = _excludeDatesIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsFrequencyMutated(_frequencyIsMutated) {
        this._frequencyIsMutated = _frequencyIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsIntervalMutated(_intervalIsMutated) {
        this._intervalIsMutated = _intervalIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated) {
        this._isActiveIsMutated = _isActiveIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated) {
        this._nameIsMutated = _nameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNthMutated(_nthIsMutated) {
        this._nthIsMutated = _nthIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOriginalEventStartDateMutated(_originalEventStartDateIsMutated) {
        this._originalEventStartDateIsMutated = _originalEventStartDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRecurringEndDateMutated(_recurringEndDateIsMutated) {
        this._recurringEndDateIsMutated = _recurringEndDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRecurringEventIdMutated(_recurringEventIdIsMutated) {
        this._recurringEventIdIsMutated = _recurringEventIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRecurringStartDateMutated(_recurringStartDateIsMutated) {
        this._recurringStartDateIsMutated = _recurringStartDateIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsResourceIdMutated(_resourceIdIsMutated) {
        this._resourceIdIsMutated = _resourceIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceMutated(_workspaceIsMutated) {
        this._workspaceIsMutated = _workspaceIsMutated;
        return (this);
    }
    /**
* ```
     * Identify if event is all day.
* ```
     */
    setAllDay(allDay) {
        if (!this._getIsMutateSuppressed() && this.allDay !== allDay) {
            this._setIsAllDayMutated(true);
        }
        this.allDay = allDay;
        return (this);
    }
    /**
* ```
     * The background color
* ```
     */
    setBackgroundColor(backgroundColor) {
        if (!this._getIsMutateSuppressed() && this.backgroundColor !== backgroundColor) {
            this._setIsBackgroundColorMutated(true);
        }
        this.backgroundColor = backgroundColor;
        return (this);
    }
    /**
* ```
     * The border color
* ```
     */
    setBorderColor(borderColor) {
        if (!this._getIsMutateSuppressed() && this.borderColor !== borderColor) {
            this._setIsBorderColorMutated(true);
        }
        this.borderColor = borderColor;
        return (this);
    }
    /**
* ```
     * The description.
* ```
     */
    setDescription(description) {
        if (!this._getIsMutateSuppressed() && this.description !== description) {
            this._setIsDescriptionMutated(true);
        }
        this.description = description;
        return (this);
    }
    /**
* ```
     * Event end date of the event in YYYY-MM-DD format.
* ```
     */
    setEventEndDate(eventEndDate) {
        if (!this._getIsMutateSuppressed() && this.eventEndDate !== eventEndDate) {
            this._setIsEventEndDateMutated(true);
        }
        this.eventEndDate = eventEndDate;
        return (this);
    }
    /**
* ```
     * The event end time in HH:mm format.
* ```
     */
    setEventEndTime(eventEndTime) {
        if (!this._getIsMutateSuppressed() && this.eventEndTime !== eventEndTime) {
            this._setIsEventEndTimeMutated(true);
        }
        this.eventEndTime = eventEndTime;
        return (this);
    }
    /**
* ```
     * Event start date of the event in YYYY-MM-DD format.
* ```
     */
    setEventStartDate(eventStartDate) {
        if (!this._getIsMutateSuppressed() && this.eventStartDate !== eventStartDate) {
            this._setIsEventStartDateMutated(true);
        }
        this.eventStartDate = eventStartDate;
        return (this);
    }
    /**
* ```
     * The event start time in HH:mm format.
* ```
     */
    setEventStartTime(eventStartTime) {
        if (!this._getIsMutateSuppressed() && this.eventStartTime !== eventStartTime) {
            this._setIsEventStartTimeMutated(true);
        }
        this.eventStartTime = eventStartTime;
        return (this);
    }
    /**
* ```
     * An json data that contains an array of dates to exclude from the recurrence.
* ```
     */
    setExcludeDates(excludeDates) {
        if (!this._getIsMutateSuppressed() && this.excludeDates !== EntityUtils_1.EntityUtils.jsonStringSetter({ value: excludeDates })) {
            this._setIsExcludeDatesMutated(true);
        }
        this.excludeDates = EntityUtils_1.EntityUtils.jsonStringSetter({ value: excludeDates });
        return (this);
    }
    /**
* ```
     * The frequency of the recurrence (e.g., daily, weekly, monthly).
* ```
     */
    setFrequency(frequency) {
        if (!this._getIsMutateSuppressed() && this.frequency !== frequency) {
            this._setIsFrequencyMutated(true);
        }
        this.frequency = frequency;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     * The interval of the recurrence (e.g., every 2 weeks).
* ```
     */
    setInterval(interval) {
        if (!this._getIsMutateSuppressed() && this.interval !== interval) {
            this._setIsIntervalMutated(true);
        }
        this.interval = interval;
        return (this);
    }
    /**
* ```
     * Identifies if active.
* ```
     */
    setIsActive(isActive) {
        if (!this._getIsMutateSuppressed() && this.isActive !== isActive) {
            this._setIsActiveMutated(true);
        }
        this.isActive = isActive;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The data name
* ```
     */
    setName(name) {
        if (!this._getIsMutateSuppressed() && this.name !== name) {
            this._setIsNameMutated(true);
        }
        this.name = name;
        return (this);
    }
    /**
* ```
     * The nth occurrence within the frequency (e.g., 2nd Monday of the month). Monthly frequency only.
* ```
     */
    setNth(nth) {
        if (!this._getIsMutateSuppressed() && this.nth !== nth) {
            this._setIsNthMutated(true);
        }
        this.nth = nth;
        return (this);
    }
    /**
* ```
     * Entity Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * For an instance of a recurring event. The original event start date
* ```
     */
    setOriginalEventStartDate(originalEventStartDate) {
        if (!this._getIsMutateSuppressed() && this.originalEventStartDate !== originalEventStartDate) {
            this._setIsOriginalEventStartDateMutated(true);
        }
        this.originalEventStartDate = originalEventStartDate;
        return (this);
    }
    /**
* ```
     * The end date of the recurrence pattern.
* ```
     */
    setRecurringEndDate(recurringEndDate) {
        if (!this._getIsMutateSuppressed() && this.recurringEndDate !== recurringEndDate) {
            this._setIsRecurringEndDateMutated(true);
        }
        this.recurringEndDate = recurringEndDate;
        return (this);
    }
    /**
* ```
     * The recurring event Id it belong to or branch off from when created
* ```
     */
    setRecurringEventId(recurringEventId) {
        if (!this._getIsMutateSuppressed() && this.recurringEventId !== recurringEventId) {
            this._setIsRecurringEventIdMutated(true);
        }
        this.recurringEventId = recurringEventId;
        return (this);
    }
    /**
* ```
     * The start date of the recurrence pattern.
* ```
     */
    setRecurringStartDate(recurringStartDate) {
        if (!this._getIsMutateSuppressed() && this.recurringStartDate !== recurringStartDate) {
            this._setIsRecurringStartDateMutated(true);
        }
        this.recurringStartDate = recurringStartDate;
        return (this);
    }
    /**
* ```
     * The resource id (kmlLayer.id, KmlGeometry.id, etc.)
* ```
     */
    setResourceId(resourceId) {
        if (!this._getIsMutateSuppressed() && this.resourceId !== resourceId) {
            this._setIsResourceIdMutated(true);
        }
        this.resourceId = resourceId;
        return (this);
    }
    /**
* ```
     * Entity Workspace.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspace(workspace, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.workspace !== workspace) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(workspace, persistanceType);
            this._setIsWorkspaceMutated(true);
        }
        this.workspace = workspace;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'allDay',
            value: this.allDay
        });
        this._setCurrentState2({
            attributeName: 'backgroundColor',
            value: this.backgroundColor
        });
        this._setCurrentState2({
            attributeName: 'borderColor',
            value: this.borderColor
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'description',
            value: this.description
        });
        this._setCurrentState2({
            attributeName: 'eventEndDate',
            value: this.eventEndDate
        });
        this._setCurrentState2({
            attributeName: 'eventEndTime',
            value: this.eventEndTime
        });
        this._setCurrentState2({
            attributeName: 'eventStartDate',
            value: this.eventStartDate
        });
        this._setCurrentState2({
            attributeName: 'eventStartTime',
            value: this.eventStartTime
        });
        this._setCurrentState2({
            attributeName: 'excludeDates',
            value: this.excludeDates
        });
        this._setCurrentState2({
            attributeName: 'frequency',
            value: this.frequency
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'interval',
            value: this.interval
        });
        this._setCurrentState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'name',
            value: this.name
        });
        this._setCurrentState2({
            attributeName: 'nth',
            value: this.nth
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'originalEventStartDate',
            value: this.originalEventStartDate
        });
        this._setCurrentState2({
            attributeName: 'recurringEndDate',
            value: this.recurringEndDate
        });
        this._setCurrentState2({
            attributeName: 'recurringEventId',
            value: this.recurringEventId
        });
        this._setCurrentState2({
            attributeName: 'recurringStartDate',
            value: this.recurringStartDate
        });
        this._setCurrentState2({
            attributeName: 'resourceId',
            value: this.resourceId
        });
        this._setCurrentState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'allDay',
            value: this.allDay
        });
        this._setInitializedState2({
            attributeName: 'backgroundColor',
            value: this.backgroundColor
        });
        this._setInitializedState2({
            attributeName: 'borderColor',
            value: this.borderColor
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'description',
            value: this.description
        });
        this._setInitializedState2({
            attributeName: 'eventEndDate',
            value: this.eventEndDate
        });
        this._setInitializedState2({
            attributeName: 'eventEndTime',
            value: this.eventEndTime
        });
        this._setInitializedState2({
            attributeName: 'eventStartDate',
            value: this.eventStartDate
        });
        this._setInitializedState2({
            attributeName: 'eventStartTime',
            value: this.eventStartTime
        });
        this._setInitializedState2({
            attributeName: 'excludeDates',
            value: this.excludeDates
        });
        this._setInitializedState2({
            attributeName: 'frequency',
            value: this.frequency
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'interval',
            value: this.interval
        });
        this._setInitializedState2({
            attributeName: 'isActive',
            value: this.isActive
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'name',
            value: this.name
        });
        this._setInitializedState2({
            attributeName: 'nth',
            value: this.nth
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'originalEventStartDate',
            value: this.originalEventStartDate
        });
        this._setInitializedState2({
            attributeName: 'recurringEndDate',
            value: this.recurringEndDate
        });
        this._setInitializedState2({
            attributeName: 'recurringEventId',
            value: this.recurringEventId
        });
        this._setInitializedState2({
            attributeName: 'recurringStartDate',
            value: this.recurringStartDate
        });
        this._setInitializedState2({
            attributeName: 'resourceId',
            value: this.resourceId
        });
        this._setInitializedState2({
            attributeName: 'workspace',
            value: this.workspace
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.allDay);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.backgroundColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.borderColor);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.description);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.eventEndDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.eventEndTime);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.eventStartDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.eventStartTime);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.excludeDates);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.frequency);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.interval);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.isActive);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.name);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.nth);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.originalEventStartDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.recurringEndDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.recurringEventId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.recurringStartDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.resourceId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.workspace);
        return (hashCode_n);
    }
}
exports.CalendarItem = CalendarItem;
CalendarItem.metaDataForCalendarItem = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.CalendarItem", CalendarItem);
//# sourceMappingURL=CalendarItem.js.map