/**
 * This file is auto generated DO NOT EDIT.
 */
import { Organization } from './Organization';
import { WorkspaceTemplate } from './WorkspaceTemplate';
import { WorkspaceWidgetAttribute } from './WorkspaceWidgetAttribute';
import { WorkspaceWidgetEndpoint } from './WorkspaceWidgetEndpoint';
import { WorkspaceWidgetView } from './WorkspaceWidgetView';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _activeEndDateIsMutated: string;
    _activeStartDateIsMutated: string;
    _descriptionIsMutated: string;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isActiveIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isRemoveFromRelationship: string;
    _isRemoveFromRelationshipIsMutated: string;
    _jsonStateStr: string;
    _mapShowPolygonsIsMutated: string;
    _nameIsMutated: string;
    _organizationIsMutated: string;
    _pandaDocWebHookEnabledIsMutated: string;
    _siteButtonHoverBackgroundColorIsMutated: string;
    _siteCustomerSupportNumberIsMutated: string;
    _siteDescriptionIsMutated: string;
    _siteEmailIsMutated: string;
    _siteLogoHeightIsMutated: string;
    _siteLogoPathIsMutated: string;
    _siteUrlPathIsMutated: string;
    _styleButtonEnabledBackgroundColorIsMutated: string;
    _styleButtonEnabledColorIsMutated: string;
    _styleLayoutBoarderColorIsMutated: string;
    _stylePrimaryColorIsMutated: string;
    _styleSecondaryColorIsMutated: string;
    _styleTeriaryColorIsMutated: string;
    _workspaceTemplatesIsMutated: string;
    _workspaceWidgetAttributesIsMutated: string;
    _workspaceWidgetEndpointIsMutated: string;
    _workspaceWidgetViewsIsMutated: string;
    activeEndDate: string;
    activeStartDate: string;
    createdDate: string;
    description: string;
    id: string;
    isActive: string;
    jsonType: string;
    mapShowPolygons: string;
    modifiedDate: string;
    name: string;
    organization: string;
    pandaDocWebHookEnabled: string;
    siteButtonHoverBackgroundColor: string;
    siteCustomerSupportNumber: string;
    siteDescription: string;
    siteEmail: string;
    siteLogoHeight: string;
    siteLogoPath: string;
    siteUrlPath: string;
    styleButtonEnabledBackgroundColor: string;
    styleButtonEnabledColor: string;
    styleLayoutBoarderColor: string;
    stylePrimaryColor: string;
    styleSecondaryColor: string;
    styleTeriaryColor: string;
    workspaceTemplates: string;
    workspaceWidgetAttributes: string;
    workspaceWidgetEndpoint: string;
    workspaceWidgetViews: string;
}
declare class MongoVirtual {
    workspaceWidgetAttributes: string;
    workspaceWidgetViews: string;
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _activeEndDateIsMutated: string;
    _activeStartDateIsMutated: string;
    _descriptionIsMutated: string;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isActiveIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isRemoveFromRelationship: string;
    _isRemoveFromRelationshipIsMutated: string;
    _jsonStateStr: string;
    _mapShowPolygonsIsMutated: string;
    _nameIsMutated: string;
    _organizationIsMutated: string;
    _pandaDocWebHookEnabledIsMutated: string;
    _siteButtonHoverBackgroundColorIsMutated: string;
    _siteCustomerSupportNumberIsMutated: string;
    _siteDescriptionIsMutated: string;
    _siteEmailIsMutated: string;
    _siteLogoHeightIsMutated: string;
    _siteLogoPathIsMutated: string;
    _siteUrlPathIsMutated: string;
    _styleButtonEnabledBackgroundColorIsMutated: string;
    _styleButtonEnabledColorIsMutated: string;
    _styleLayoutBoarderColorIsMutated: string;
    _stylePrimaryColorIsMutated: string;
    _styleSecondaryColorIsMutated: string;
    _styleTeriaryColorIsMutated: string;
    _workspaceTemplatesIsMutated: string;
    _workspaceWidgetAttributesIsMutated: string;
    _workspaceWidgetEndpointIsMutated: string;
    _workspaceWidgetViewsIsMutated: string;
    activeEndDate: string;
    activeStartDate: string;
    createdDate: string;
    description: string;
    _id: string;
    isActive: string;
    jsonType: string;
    mapShowPolygons: string;
    modifiedDate: string;
    name: string;
    organization: string;
    pandaDocWebHookEnabled: string;
    siteButtonHoverBackgroundColor: string;
    siteCustomerSupportNumber: string;
    siteDescription: string;
    siteEmail: string;
    siteLogoHeight: string;
    siteLogoPath: string;
    siteUrlPath: string;
    styleButtonEnabledBackgroundColor: string;
    styleButtonEnabledColor: string;
    styleLayoutBoarderColor: string;
    stylePrimaryColor: string;
    styleSecondaryColor: string;
    styleTeriaryColor: string;
    workspaceTemplates: string;
    workspaceWidgetAttributes: string;
    workspaceWidgetEndpoint: string;
    workspaceWidgetViews: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class WorkspaceWidget extends JsonApiPersistableBase {
    static metaDataForWorkspaceWidget: MetaData;
    private _activeEndDateIsMutated;
    private _activeStartDateIsMutated;
    private _descriptionIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isActiveIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _isRemoveFromRelationship;
    private _isRemoveFromRelationshipIsMutated;
    private _mapShowPolygonsIsMutated;
    private _nameIsMutated;
    private _organizationIsMutated;
    private _pandaDocWebHookEnabledIsMutated;
    private _siteButtonHoverBackgroundColorIsMutated;
    private _siteCustomerSupportNumberIsMutated;
    private _siteDescriptionIsMutated;
    private _siteEmailIsMutated;
    private _siteLogoHeightIsMutated;
    private _siteLogoPathIsMutated;
    private _siteUrlPathIsMutated;
    private _styleButtonEnabledBackgroundColorIsMutated;
    private _styleButtonEnabledColorIsMutated;
    private _styleLayoutBoarderColorIsMutated;
    private _stylePrimaryColorIsMutated;
    private _styleSecondaryColorIsMutated;
    private _styleTeriaryColorIsMutated;
    private _workspaceTemplatesIsMutated;
    private _workspaceWidgetAttributesIsMutated;
    private _workspaceWidgetEndpointIsMutated;
    private _workspaceWidgetViewsIsMutated;
    private activeEndDate;
    private activeStartDate;
    private description;
    private id;
    private isActive;
    private jsonType;
    private mapShowPolygons;
    private name;
    private organization;
    private pandaDocWebHookEnabled;
    private siteButtonHoverBackgroundColor;
    private siteCustomerSupportNumber;
    private siteDescription;
    private siteEmail;
    private siteLogoHeight;
    private siteLogoPath;
    private siteUrlPath;
    private styleButtonEnabledBackgroundColor;
    private styleButtonEnabledColor;
    private styleLayoutBoarderColor;
    private stylePrimaryColor;
    private styleSecondaryColor;
    private styleTeriaryColor;
    private workspaceTemplates;
    private workspaceWidgetAttributes;
    private workspaceWidgetEndpoint;
    private workspaceWidgetViews;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): WorkspaceWidget;
    getClassName(): string;
    /**
     * A WorkspaceTemplate for this Widget.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspaceTemplate(workspaceTemplate: WorkspaceTemplate, persistanceType?: PersistenceType): WorkspaceWidget;
    /**
     * A WorkspaceTemplate for this Widget.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspaceTemplate(workspaceTemplate: WorkspaceTemplate, persistanceType?: PersistenceType): WorkspaceWidget;
    /**
     * The attributes for the widget.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspaceWidgetAttribute(workspaceWidgetAttribute: WorkspaceWidgetAttribute, persistanceType?: PersistenceType): WorkspaceWidget;
    /**
     * The attributes for the widget.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspaceWidgetAttribute(workspaceWidgetAttribute: WorkspaceWidgetAttribute, persistanceType?: PersistenceType): WorkspaceWidget;
    /**
     * The views for the widget.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addWorkspaceWidgetView(workspaceWidgetView: WorkspaceWidgetView, persistanceType?: PersistenceType): WorkspaceWidget;
    /**
     * The views for the widget.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeWorkspaceWidgetView(workspaceWidgetView: WorkspaceWidgetView, persistanceType?: PersistenceType): WorkspaceWidget;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsActiveEndDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsActiveStartDateMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsDescriptionMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsActiveMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsMapShowPolygonsMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsNameMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsPandaDocWebHookEnabledMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSiteButtonHoverBackgroundColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSiteCustomerSupportNumberMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSiteDescriptionMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSiteEmailMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSiteLogoHeightMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSiteLogoPathMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSiteUrlPathMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStyleButtonEnabledBackgroundColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStyleButtonEnabledColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStyleLayoutBoarderColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStylePrimaryColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStyleSecondaryColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsStyleTeriaryColorMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceTemplatesMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceWidgetAttributesMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceWidgetEndpointMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsWorkspaceWidgetViewsMutated(): boolean;
    /**
     * The widget active end date.
     * @returns Date | null
     */
    getActiveEndDate(): Date | null;
    /**
     * The widget active start date.
     * @returns Date | null
     */
    getActiveStartDate(): Date | null;
    /**
     * The widget description.
     * @returns string | null
     */
    getDescription(): string | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * Identifies if the widget is active.
     * @returns boolean
     */
    getIsActive(): boolean;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * Identifies if the map polygons should be shown from the Google Map.
     * @returns boolean
     */
    getMapShowPolygons(): boolean;
    /**
     * The widget name.
     * @returns string | null
     */
    getName(): string | null;
    /**
     * The tenant Organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * Identifies if the PandaDoc webhook has been enabled.
     * @returns boolean
     */
    getPandaDocWebHookEnabled(): boolean;
    /**
     * The widget button hover background color, should match the site default. Is required.
     * @returns string | null
     */
    getSiteButtonHoverBackgroundColor(): string | null;
    /**
     * The widget text that will show the customers support number. Is optional.
     * @returns string | null
     */
    getSiteCustomerSupportNumber(): string | null;
    /**
     * The widget text that displays the site description. Is optional.
     * @returns string | null
     */
    getSiteDescription(): string | null;
    /**
     * The widget text that displays the site contact email address. Is optional.
     * @returns string | null
     */
    getSiteEmail(): string | null;
    /**
     * The site logo height. Is optional.
     * @returns number
     */
    getSiteLogoHeight(): number;
    /**
     * The path to the site logo. Is optional.
     * @returns string | null
     */
    getSiteLogoPath(): string | null;
    /**
     * The path to the website. Is required.
     * @returns string | null
     */
    getSiteUrlPath(): string | null;
    /**
     * The widget button enabled background color. Is required.
     * @returns string | null
     */
    getStyleButtonEnabledBackgroundColor(): string | null;
    /**
     * The widget button enabled color. Is required.
     * @returns string | null
     */
    getStyleButtonEnabledColor(): string | null;
    /**
     * The widget layout boarder color. Is required.
     * @returns string | null
     */
    getStyleLayoutBoarderColor(): string | null;
    /**
     * The widget primary color. Is required.
     * @returns string | null
     */
    getStylePrimaryColor(): string | null;
    /**
     * The widget secondary color. Is required.
     * @returns string | null
     */
    getStyleSecondaryColor(): string | null;
    /**
     * The widget teriary color. Is required.
     * @returns string | null
     */
    getStyleTeriaryColor(): string | null;
    /**
     * A WorkspaceTemplate for this Widget.
     * @returns Array<WorkspaceTemplate>
     */
    getWorkspaceTemplates(): Array<WorkspaceTemplate>;
    /**
     * The attributes for the widget.
     * @returns Array<WorkspaceWidgetAttribute>
     */
    getWorkspaceWidgetAttributes(): Array<WorkspaceWidgetAttribute>;
    /**
     * The endpoint this widget belongs to.
     * @returns WorkspaceWidgetEndpoint | null
     */
    getWorkspaceWidgetEndpoint(): WorkspaceWidgetEndpoint | null;
    /**
     * The views for the widget.
     * @returns Array<WorkspaceWidgetView>
     */
    getWorkspaceWidgetViews(): Array<WorkspaceWidgetView>;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): WorkspaceWidget;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): WorkspaceWidget;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): WorkspaceWidget;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsActiveEndDateMutated(_activeEndDateIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsActiveStartDateMutated(_activeStartDateIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsDescriptionMutated(_descriptionIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): WorkspaceWidget;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsActiveMutated(_isActiveIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsMapShowPolygonsMutated(_mapShowPolygonsIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsNameMutated(_nameIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsPandaDocWebHookEnabledMutated(_pandaDocWebHookEnabledIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsSiteButtonHoverBackgroundColorMutated(_siteButtonHoverBackgroundColorIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsSiteCustomerSupportNumberMutated(_siteCustomerSupportNumberIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsSiteDescriptionMutated(_siteDescriptionIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsSiteEmailMutated(_siteEmailIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsSiteLogoHeightMutated(_siteLogoHeightIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsSiteLogoPathMutated(_siteLogoPathIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsSiteUrlPathMutated(_siteUrlPathIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsStyleButtonEnabledBackgroundColorMutated(_styleButtonEnabledBackgroundColorIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsStyleButtonEnabledColorMutated(_styleButtonEnabledColorIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsStyleLayoutBoarderColorMutated(_styleLayoutBoarderColorIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsStylePrimaryColorMutated(_stylePrimaryColorIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsStyleSecondaryColorMutated(_styleSecondaryColorIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsStyleTeriaryColorMutated(_styleTeriaryColorIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceTemplatesMutated(_workspaceTemplatesIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceWidgetAttributesMutated(_workspaceWidgetAttributesIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceWidgetEndpointMutated(_workspaceWidgetEndpointIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    _setIsWorkspaceWidgetViewsMutated(_workspaceWidgetViewsIsMutated: boolean): WorkspaceWidget;
    /**
* ```
     * The widget active end date.
* ```
     */
    setActiveEndDate(activeEndDate: Date | null): WorkspaceWidget;
    /**
* ```
     * The widget active start date.
* ```
     */
    setActiveStartDate(activeStartDate: Date | null): WorkspaceWidget;
    /**
* ```
     * The widget description.
* ```
     */
    setDescription(description: string | null): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): WorkspaceWidget;
    /**
* ```
     * Identifies if the widget is active.
* ```
     */
    setIsActive(isActive: boolean): WorkspaceWidget;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): WorkspaceWidget;
    /**
* ```
     * Identifies if the map polygons should be shown from the Google Map.
* ```
     */
    setMapShowPolygons(mapShowPolygons: boolean): WorkspaceWidget;
    /**
* ```
     * The widget name.
* ```
     */
    setName(name: string | null): WorkspaceWidget;
    /**
* ```
     * The tenant Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): WorkspaceWidget;
    /**
* ```
     * Identifies if the PandaDoc webhook has been enabled.
* ```
     */
    setPandaDocWebHookEnabled(pandaDocWebHookEnabled: boolean): WorkspaceWidget;
    /**
* ```
     * The widget button hover background color, should match the site default. Is required.
* ```
     */
    setSiteButtonHoverBackgroundColor(siteButtonHoverBackgroundColor: string | null): WorkspaceWidget;
    /**
* ```
     * The widget text that will show the customers support number. Is optional.
* ```
     */
    setSiteCustomerSupportNumber(siteCustomerSupportNumber: string | null): WorkspaceWidget;
    /**
* ```
     * The widget text that displays the site description. Is optional.
* ```
     */
    setSiteDescription(siteDescription: string | null): WorkspaceWidget;
    /**
* ```
     * The widget text that displays the site contact email address. Is optional.
* ```
     */
    setSiteEmail(siteEmail: string | null): WorkspaceWidget;
    /**
* ```
     * The site logo height. Is optional.
* ```
     */
    setSiteLogoHeight(siteLogoHeight: number): WorkspaceWidget;
    /**
* ```
     * The path to the site logo. Is optional.
* ```
     */
    setSiteLogoPath(siteLogoPath: string | null): WorkspaceWidget;
    /**
* ```
     * The path to the website. Is required.
* ```
     */
    setSiteUrlPath(siteUrlPath: string | null): WorkspaceWidget;
    /**
* ```
     * The widget button enabled background color. Is required.
* ```
     */
    setStyleButtonEnabledBackgroundColor(styleButtonEnabledBackgroundColor: string | null): WorkspaceWidget;
    /**
* ```
     * The widget button enabled color. Is required.
* ```
     */
    setStyleButtonEnabledColor(styleButtonEnabledColor: string | null): WorkspaceWidget;
    /**
* ```
     * The widget layout boarder color. Is required.
* ```
     */
    setStyleLayoutBoarderColor(styleLayoutBoarderColor: string | null): WorkspaceWidget;
    /**
* ```
     * The widget primary color. Is required.
* ```
     */
    setStylePrimaryColor(stylePrimaryColor: string | null): WorkspaceWidget;
    /**
* ```
     * The widget secondary color. Is required.
* ```
     */
    setStyleSecondaryColor(styleSecondaryColor: string | null): WorkspaceWidget;
    /**
* ```
     * The widget teriary color. Is required.
* ```
     */
    setStyleTeriaryColor(styleTeriaryColor: string | null): WorkspaceWidget;
    /**
* ```
     * A WorkspaceTemplate for this Widget.
* ```
     */
    setWorkspaceTemplates(workspaceTemplates: Array<WorkspaceTemplate>): WorkspaceWidget;
    /**
* ```
     * The attributes for the widget.
* ```
     */
    setWorkspaceWidgetAttributes(workspaceWidgetAttributes: Array<WorkspaceWidgetAttribute>): WorkspaceWidget;
    /**
* ```
     * The endpoint this widget belongs to.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setWorkspaceWidgetEndpoint(workspaceWidgetEndpoint: WorkspaceWidgetEndpoint | null, persistanceType?: PersistenceType): WorkspaceWidget;
    /**
* ```
     * The views for the widget.
* ```
     */
    setWorkspaceWidgetViews(workspaceWidgetViews: Array<WorkspaceWidgetView>): WorkspaceWidget;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
