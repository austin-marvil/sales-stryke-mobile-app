"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronJobResponse = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiRecordBase_1 = require("../../../jsonApi/JsonApiRecordBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
class EntityAttributes {
    constructor() {
        this._errorMsgIsMutated = "_errorMsgIsMutated";
        this._wasCompletedIsMutated = "_wasCompletedIsMutated";
        this.errorMsg = "errorMsg";
        this.jsonType = "jsonType";
        this.wasCompleted = "wasCompleted";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._errorMsgIsMutated = "_errorMsgIsMutated";
        this._wasCompletedIsMutated = "_wasCompletedIsMutated";
        this.errorMsg = "errorMsg";
        this.jsonType = "jsonType";
        this.wasCompleted = "wasCompleted";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.record.CronJobResponse";
        this.mongDataModeName = "CronJobResponse";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class CronJobResponse extends JsonApiRecordBase_1.JsonApiRecordBase {
    constructor(p) {
        super(p);
        this._errorMsgIsMutated = false;
        this._wasCompletedIsMutated = false;
        this.errorMsg = null;
        this.jsonType = "com.salesstryke.entity.classes.record.CronJobResponse";
        this.wasCompleted = false;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.record.CronJobResponse");
    }
    /**
     *
     * @returns boolean
     */
    _getIsErrorMsgMutated() {
        return (this._errorMsgIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWasCompletedMutated() {
        return (this._wasCompletedIsMutated);
    }
    /**
     * More detailed error message
     * @returns string | null
     */
    getErrorMsg() {
        return (this.errorMsg);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * Indicates if the cron job was completed.
     * @returns boolean
     */
    getWasCompleted() {
        return (this.wasCompleted);
    }
    /**
* ```
     *
* ```
     */
    _setIsErrorMsgMutated(_errorMsgIsMutated) {
        this._errorMsgIsMutated = _errorMsgIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWasCompletedMutated(_wasCompletedIsMutated) {
        this._wasCompletedIsMutated = _wasCompletedIsMutated;
        return (this);
    }
    /**
* ```
     * More detailed error message
* ```
     */
    setErrorMsg(errorMsg) {
        if (this.errorMsg !== errorMsg) {
            this._setIsErrorMsgMutated(true);
        }
        this.errorMsg = errorMsg;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * Indicates if the cron job was completed.
* ```
     */
    setWasCompleted(wasCompleted) {
        if (this.wasCompleted !== wasCompleted) {
            this._setIsWasCompletedMutated(true);
        }
        this.wasCompleted = wasCompleted;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: 'errorMsg',
            value: this.errorMsg
        });
        this._setCurrentState2({
            attributeName: 'wasCompleted',
            value: this.wasCompleted
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: 'errorMsg',
            value: this.errorMsg
        });
        this._setInitializedState2({
            attributeName: 'wasCompleted',
            value: this.wasCompleted
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.errorMsg);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.wasCompleted);
        return (hashCode_n);
    }
}
exports.CronJobResponse = CronJobResponse;
CronJobResponse.metaDataForCronJobResponse = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.record.CronJobResponse", CronJobResponse);
//# sourceMappingURL=CronJobResponse.js.map