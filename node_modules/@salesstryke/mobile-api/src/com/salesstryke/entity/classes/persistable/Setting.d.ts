/**
 * This file is auto generated DO NOT EDIT.
 */
import { Organization } from './Organization';
import { SettingNotification } from './SettingNotification';
import { SettingOrganization } from './SettingOrganization';
import { SettingWorkspace } from './SettingWorkspace';
import { JsonApiPersistableBase } from '../../../jsonApi/JsonApiPersistableBase';
import { PersistenceType } from '../../../data/PersistenceType';
declare class EntityAttributes {
    _displayedNameIsMutated: string;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isDefaultIsMutated: string;
    _jsonStateStr: string;
    _logoHeightIsMutated: string;
    _logoIsMutated: string;
    _logoWidthIsMutated: string;
    _organizationIsMutated: string;
    _relationshipPersistableType: string;
    _settingNotificationIsMutated: string;
    _settingOrganizationIsMutated: string;
    _settingWorkspaceIsMutated: string;
    _typographyIsMutated: string;
    createdDate: string;
    displayedName: string;
    id: string;
    isDefault: string;
    jsonType: string;
    logo: string;
    logoHeight: string;
    logoWidth: string;
    modifiedDate: string;
    organization: string;
    settingNotification: string;
    settingOrganization: string;
    settingWorkspace: string;
    typography: string;
}
declare class MongoVirtual {
}
declare class MongoAttributes {
    virtual: MongoVirtual;
    _displayedNameIsMutated: string;
    _entityState: string;
    _idSetBySystem: string;
    _initializedDataKey: string;
    _initializedDataKeyIsMutated: string;
    _isAddToRelationship: string;
    _isAddToRelationshipIsMutated: string;
    _isDefaultIsMutated: string;
    _jsonStateStr: string;
    _logoHeightIsMutated: string;
    _logoIsMutated: string;
    _logoWidthIsMutated: string;
    _organizationIsMutated: string;
    _relationshipPersistableType: string;
    _settingNotificationIsMutated: string;
    _settingOrganizationIsMutated: string;
    _settingWorkspaceIsMutated: string;
    _typographyIsMutated: string;
    createdDate: string;
    displayedName: string;
    _id: string;
    isDefault: string;
    jsonType: string;
    logo: string;
    logoHeight: string;
    logoWidth: string;
    modifiedDate: string;
    organization: string;
    settingNotification: string;
    settingOrganization: string;
    settingWorkspace: string;
    typography: string;
}
declare class MetaData {
    namespace: string;
    mongDataModeName: string;
    entityAttributes: EntityAttributes;
    mongoAttributes: MongoAttributes;
}
export declare class Setting extends JsonApiPersistableBase {
    static metaDataForSetting: MetaData;
    private _displayedNameIsMutated;
    private _idSetBySystem;
    private _initializedDataKey;
    private _initializedDataKeyIsMutated;
    private _isAddToRelationship;
    private _isAddToRelationshipIsMutated;
    private _isDefaultIsMutated;
    private _logoHeightIsMutated;
    private _logoIsMutated;
    private _logoWidthIsMutated;
    private _organizationIsMutated;
    private _settingNotificationIsMutated;
    private _settingOrganizationIsMutated;
    private _settingWorkspaceIsMutated;
    private _typographyIsMutated;
    private displayedName;
    private id;
    private isDefault;
    private jsonType;
    private logo;
    private logoHeight;
    private logoWidth;
    private organization;
    private settingNotification;
    private settingOrganization;
    private settingWorkspace;
    private typography;
    constructor(p?: {
        isTrackingMutations: boolean;
    });
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated(): Setting;
    getClassName(): string;
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState(): string | null;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr(): string | null;
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType(): number;
    /**
     *
     * @returns Date | null
     */
    getCreatedDate(): Date | null;
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate(): Date | null;
    /**
     *
     * @returns boolean
     */
    _getIsDisplayedNameMutated(): boolean;
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem(): boolean;
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey(): string | null;
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsDefaultMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLogoHeightMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLogoMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsLogoWidthMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSettingNotificationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSettingOrganizationMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsSettingWorkspaceMutated(): boolean;
    /**
     *
     * @returns boolean
     */
    _getIsTypographyMutated(): boolean;
    /**
     * The Display name for the organization or group.
     * @returns string | null
     */
    getDisplayedName(): string | null;
    /**
     *
     * @returns string | null
     */
    getId(): string | null;
    /**
     * is Default.
     * @returns boolean
     */
    getIsDefault(): boolean;
    /**
     *
     * @returns string | null
     */
    getJsonType(): string | null;
    /**
     * The HTML URL for the Organization logo.
     * @returns string | null
     */
    getLogo(): string | null;
    /**
     * The height of the Organization logo in pixels.
     * @returns number
     */
    getLogoHeight(): number;
    /**
     * The width of the Organization logo in pixels.
     * @returns number
     */
    getLogoWidth(): number;
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization(): Organization | null;
    /**
     * Notification setting
     * @returns SettingNotification | null
     */
    getSettingNotification(): SettingNotification | null;
    /**
     * Organization setting
     * @returns SettingOrganization | null
     */
    getSettingOrganization(): SettingOrganization | null;
    /**
     * Workspace setting.
     * @returns SettingWorkspace | null
     */
    getSettingWorkspace(): SettingWorkspace | null;
    /**
     * Setting for typography, such as font family and size.
     * @returns Object
     */
    getTypography(): Object;
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState: string | null): Setting;
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr: string | null): Setting;
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType: number): Setting;
    /**
     *
     */
    setCreatedDate(createdDate: Date | null): Setting;
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate: Date | null): Setting;
    /**
* ```
     *
* ```
     */
    _setIsDisplayedNameMutated(_displayedNameIsMutated: boolean): Setting;
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem: boolean): Setting;
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey: string | null): Setting;
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsDefaultMutated(_isDefaultIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsLogoHeightMutated(_logoHeightIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsLogoMutated(_logoIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsLogoWidthMutated(_logoWidthIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsSettingNotificationMutated(_settingNotificationIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsSettingOrganizationMutated(_settingOrganizationIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsSettingWorkspaceMutated(_settingWorkspaceIsMutated: boolean): Setting;
    /**
* ```
     *
* ```
     */
    _setIsTypographyMutated(_typographyIsMutated: boolean): Setting;
    /**
* ```
     * The Display name for the organization or group.
* ```
     */
    setDisplayedName(displayedName: string | null): Setting;
    /**
* ```
     *
* ```
     */
    setId(id: string | null): Setting;
    /**
* ```
     * is Default.
* ```
     */
    setIsDefault(isDefault: boolean): Setting;
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType: string | null): Setting;
    /**
* ```
     * The HTML URL for the Organization logo.
* ```
     */
    setLogo(logo: string | null): Setting;
    /**
* ```
     * The height of the Organization logo in pixels.
* ```
     */
    setLogoHeight(logoHeight: number): Setting;
    /**
* ```
     * The width of the Organization logo in pixels.
* ```
     */
    setLogoWidth(logoWidth: number): Setting;
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization: Organization | null, persistanceType?: PersistenceType): Setting;
    /**
* ```
     * Notification setting
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSettingNotification(settingNotification: SettingNotification | null, persistanceType?: PersistenceType): Setting;
    /**
* ```
     * Organization setting
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSettingOrganization(settingOrganization: SettingOrganization | null, persistanceType?: PersistenceType): Setting;
    /**
* ```
     * Workspace setting.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setSettingWorkspace(settingWorkspace: SettingWorkspace | null, persistanceType?: PersistenceType): Setting;
    /**
* ```
     * Setting for typography, such as font family and size.
* ```
     */
    setTypography(typography: Object): Setting;
    _getIsMutated(): boolean;
    _trackMutations(): this;
    getHashCode(): number;
}
export {};
