"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingToken = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistenceType_1 = require("../../../data/PersistenceType");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._entityState = "_entityState";
        this._expirationIsMutated = "_expirationIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._notificationEmailsIsMutated = "_notificationEmailsIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._parentIdIsMutated = "_parentIdIsMutated";
        this._refreshTokenIsMutated = "_refreshTokenIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._tokenIsMutated = "_tokenIsMutated";
        this.createdDate = "createdDate";
        this.expiration = "expiration";
        this.id = "id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.notificationEmails = "notificationEmails";
        this.organization = "organization";
        this.parentId = "parentId";
        this.refreshToken = "refreshToken";
        this.token = "token";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._entityState = "_entityState";
        this._expirationIsMutated = "_expirationIsMutated";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._notificationEmailsIsMutated = "_notificationEmailsIsMutated";
        this._organizationIsMutated = "_organizationIsMutated";
        this._parentIdIsMutated = "_parentIdIsMutated";
        this._refreshTokenIsMutated = "_refreshTokenIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._tokenIsMutated = "_tokenIsMutated";
        this.createdDate = "createdDate";
        this.expiration = "expiration";
        this._id = "_id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.notificationEmails = "notificationEmails";
        this.organization = "organization";
        this.parentId = "parentId";
        this.refreshToken = "refreshToken";
        this.token = "token";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.SettingToken";
        this.mongDataModeName = "SettingToken";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class SettingToken extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._expirationIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._notificationEmailsIsMutated = false;
        this._organizationIsMutated = false;
        this._parentIdIsMutated = false;
        this._refreshTokenIsMutated = false;
        this._tokenIsMutated = false;
        this.expiration = null;
        this.id = null;
        this.jsonType = "com.salesstryke.entity.classes.persistable.SettingToken";
        this.notificationEmails = new Array();
        this.organization = null;
        this.parentId = null;
        this.refreshToken = null;
        this.token = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._expirationIsMutated = false;
        this._notificationEmailsIsMutated = false;
        this._organizationIsMutated = false;
        this._parentIdIsMutated = false;
        this._refreshTokenIsMutated = false;
        this._tokenIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.SettingToken");
    }
    /**
     * The email address to send email to for expiration notifications.
     *
     * Default PersistenceType : PersistenceType.ATTACH
     */
    addNotificationEmail(notificationEmail, persistanceType = PersistenceType_1.PersistenceType.ATTACH) {
        if (this._getIsTrackingMutations()) {
            notificationEmail._trackMutations();
        }
        notificationEmail._setRelationshipPersistableType(persistanceType.getId());
        this.notificationEmails.push(notificationEmail);
        return (this);
    }
    /**
     * The email address to send email to for expiration notifications.
     * If the Entity ID is null, will not be added.
     * Default PersistenceType : PersistenceType.DETACH
     */
    removeNotificationEmail(notificationEmail, persistanceType = PersistenceType_1.PersistenceType.DETACH) {
        if (this._getIsTrackingMutations()) {
            notificationEmail._trackMutations();
        }
        if (persistanceType === PersistenceType_1.PersistenceType.NONE) {
            let index = this.notificationEmails.findIndex(obj => obj === notificationEmail);
            if (index !== -1) {
                this.notificationEmails.splice(index, 1);
            }
            notificationEmail._setRelationshipPersistableType(PersistenceType_1.PersistenceType.NONE.getId());
            return (this);
        }
        notificationEmail._setRelationshipPersistableType(persistanceType.getId());
        this.notificationEmails.push(notificationEmail);
        return (this);
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsExpirationMutated() {
        return (this._expirationIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsNotificationEmailsMutated() {
        return (this._notificationEmailsIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsParentIdMutated() {
        return (this._parentIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRefreshTokenMutated() {
        return (this._refreshTokenIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsTokenMutated() {
        return (this._tokenIsMutated);
    }
    /**
     * The expiration date of the token.
     * @returns Date | null
     */
    getExpiration() {
        return (this.expiration);
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The email address to send email to for expiration notifications.
     * @returns Array<EmailAddress>
     */
    getNotificationEmails() {
        return (this.notificationEmails);
    }
    /**
     * The organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The parent ID
     * @returns string | null
     */
    getParentId() {
        return (this.parentId);
    }
    /**
     * The refresh token
     * @returns string | null
     */
    getRefreshToken() {
        return (this.refreshToken);
    }
    /**
     * The token
     * @returns string | null
     */
    getToken() {
        return (this.token);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsExpirationMutated(_expirationIsMutated) {
        this._expirationIsMutated = _expirationIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsNotificationEmailsMutated(_notificationEmailsIsMutated) {
        this._notificationEmailsIsMutated = _notificationEmailsIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsParentIdMutated(_parentIdIsMutated) {
        this._parentIdIsMutated = _parentIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRefreshTokenMutated(_refreshTokenIsMutated) {
        this._refreshTokenIsMutated = _refreshTokenIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsTokenMutated(_tokenIsMutated) {
        this._tokenIsMutated = _tokenIsMutated;
        return (this);
    }
    /**
* ```
     * The expiration date of the token.
* ```
     */
    setExpiration(expiration) {
        if (!this._getIsMutateSuppressed() && this.expiration !== expiration) {
            this._setIsExpirationMutated(true);
        }
        this.expiration = expiration;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The email address to send email to for expiration notifications.
* ```
     */
    setNotificationEmails(notificationEmails) {
        if (!this._getIsMutateSuppressed() && this.notificationEmails !== notificationEmails) {
            this._setIsNotificationEmailsMutated(true);
        }
        this.notificationEmails = notificationEmails;
        return (this);
    }
    /**
* ```
     * The organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The parent ID
* ```
     */
    setParentId(parentId) {
        if (!this._getIsMutateSuppressed() && this.parentId !== parentId) {
            this._setIsParentIdMutated(true);
        }
        this.parentId = parentId;
        return (this);
    }
    /**
* ```
     * The refresh token
* ```
     */
    setRefreshToken(refreshToken) {
        if (!this._getIsMutateSuppressed() && this.refreshToken !== refreshToken) {
            this._setIsRefreshTokenMutated(true);
        }
        this.refreshToken = refreshToken;
        return (this);
    }
    /**
* ```
     * The token
* ```
     */
    setToken(token) {
        if (!this._getIsMutateSuppressed() && this.token !== token) {
            this._setIsTokenMutated(true);
        }
        this.token = token;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'expiration',
            value: this.expiration
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'notificationEmails',
            value: this.notificationEmails
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'parentId',
            value: this.parentId
        });
        this._setCurrentState2({
            attributeName: 'refreshToken',
            value: this.refreshToken
        });
        this._setCurrentState2({
            attributeName: 'token',
            value: this.token
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'expiration',
            value: this.expiration
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'notificationEmails',
            value: this.notificationEmails
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'parentId',
            value: this.parentId
        });
        this._setInitializedState2({
            attributeName: 'refreshToken',
            value: this.refreshToken
        });
        this._setInitializedState2({
            attributeName: 'token',
            value: this.token
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.expiration);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.notificationEmails);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.parentId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.refreshToken);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.token);
        return (hashCode_n);
    }
}
exports.SettingToken = SettingToken;
SettingToken.metaDataForSettingToken = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.SettingToken", SettingToken);
//# sourceMappingURL=SettingToken.js.map