"use strict";
/**
 * This file is auto generated DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductServiceViewStatusAudit = void 0;
const ClassFor_1 = require("../../../data/ClassFor");
const EntityUtils_1 = require("../../../utils/entity/EntityUtils");
const JsonApiPersistableBase_1 = require("../../../jsonApi/JsonApiPersistableBase");
const HashCodeUtil_1 = require("../../../utils/HashCodeUtil");
const PersistableUtils_1 = require("../../../data/PersistableUtils");
class EntityAttributes {
    constructor() {
        this._cartIdIsMutated = "_cartIdIsMutated";
        this._customerAddressIsMutated = "_customerAddressIsMutated";
        this._customerFirstNameIsMutated = "_customerFirstNameIsMutated";
        this._customerLastNameIsMutated = "_customerLastNameIsMutated";
        this._dataJSONStrIsMutated = "_dataJSONStrIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._organizationIsMutated = "_organizationIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._statusIsMutated = "_statusIsMutated";
        this._widgetCustomerUUIDIsMutated = "_widgetCustomerUUIDIsMutated";
        this.cartId = "cartId";
        this.createdDate = "createdDate";
        this.customerAddress = "customerAddress";
        this.customerFirstName = "customerFirstName";
        this.customerLastName = "customerLastName";
        this.dataJSONStr = "dataJSONStr";
        this.id = "id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.status = "status";
        this.widgetCustomerUUID = "widgetCustomerUUID";
    }
}
class MongoVirtual {
}
class MongoAttributes {
    constructor() {
        this.virtual = new MongoVirtual();
        this._cartIdIsMutated = "_cartIdIsMutated";
        this._customerAddressIsMutated = "_customerAddressIsMutated";
        this._customerFirstNameIsMutated = "_customerFirstNameIsMutated";
        this._customerLastNameIsMutated = "_customerLastNameIsMutated";
        this._dataJSONStrIsMutated = "_dataJSONStrIsMutated";
        this._entityState = "_entityState";
        this._idSetBySystem = "_idSetBySystem";
        this._initializedDataKey = "_initializedDataKey";
        this._initializedDataKeyIsMutated = "_initializedDataKeyIsMutated";
        this._isAddToRelationship = "_isAddToRelationship";
        this._isAddToRelationshipIsMutated = "_isAddToRelationshipIsMutated";
        this._isRemoveFromRelationship = "_isRemoveFromRelationship";
        this._isRemoveFromRelationshipIsMutated = "_isRemoveFromRelationshipIsMutated";
        this._jsonStateStr = "_jsonStateStr";
        this._organizationIsMutated = "_organizationIsMutated";
        this._relationshipPersistableType = "_relationshipPersistableType";
        this._statusIsMutated = "_statusIsMutated";
        this._widgetCustomerUUIDIsMutated = "_widgetCustomerUUIDIsMutated";
        this.cartId = "cartId";
        this.createdDate = "createdDate";
        this.customerAddress = "customerAddress";
        this.customerFirstName = "customerFirstName";
        this.customerLastName = "customerLastName";
        this.dataJSONStr = "dataJSONStr";
        this._id = "_id";
        this.jsonType = "jsonType";
        this.modifiedDate = "modifiedDate";
        this.organization = "organization";
        this.status = "status";
        this.widgetCustomerUUID = "widgetCustomerUUID";
    }
}
class MetaData {
    constructor() {
        this.namespace = "com.salesstryke.entity.classes.persistable.ProductServiceViewStatusAudit";
        this.mongDataModeName = "ProductServiceViewStatusAudit";
        this.entityAttributes = new EntityAttributes();
        this.mongoAttributes = new MongoAttributes();
    }
}
class ProductServiceViewStatusAudit extends JsonApiPersistableBase_1.JsonApiPersistableBase {
    constructor(p) {
        super(p);
        this._cartIdIsMutated = false;
        this._customerAddressIsMutated = false;
        this._customerFirstNameIsMutated = false;
        this._customerLastNameIsMutated = false;
        this._dataJSONStrIsMutated = false;
        this._idSetBySystem = false;
        this._initializedDataKey = null;
        this._initializedDataKeyIsMutated = false;
        this._isAddToRelationship = false;
        this._isAddToRelationshipIsMutated = false;
        this._isRemoveFromRelationship = false;
        this._isRemoveFromRelationshipIsMutated = false;
        this._organizationIsMutated = false;
        this._statusIsMutated = false;
        this._widgetCustomerUUIDIsMutated = false;
        this.cartId = null;
        this.customerAddress = null;
        this.customerFirstName = null;
        this.customerLastName = null;
        this.dataJSONStr = null;
        this.id = null;
        this.jsonType = "com.salesstryke.entity.classes.persistable.ProductServiceViewStatusAudit";
        this.organization = null;
        this.status = null;
        this.widgetCustomerUUID = null;
    }
    /**
     * Sets all isMutated flags to be false
     * @returns
     */
    _clearIsMutated() {
        this._initializedDataKeyIsMutated = false;
        this._cartIdIsMutated = false;
        this._customerAddressIsMutated = false;
        this._customerFirstNameIsMutated = false;
        this._customerLastNameIsMutated = false;
        this._dataJSONStrIsMutated = false;
        this._organizationIsMutated = false;
        this._statusIsMutated = false;
        this._widgetCustomerUUIDIsMutated = false;
        return (this);
    }
    getClassName() {
        return ("com.salesstryke.entity.classes.persistable.ProductServiceViewStatusAudit");
    }
    /**
     * CREATE, DELETE, UPDATE
     * @returns string | null
     */
    _getEntityState() {
        //return(super._getEntityState());
        return (super._getEntityState());
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     * @returns string | null
     */
    _getJsonStateStr() {
        //return(super._getEntityState());
        return (super._getJsonStateStr());
    }
    /**
     * A system attribute to identify the relationship persisable type.
     * @returns number
     */
    _getRelationshipPersistableType() {
        //return(super._getEntityState());
        return (super._getRelationshipPersistableType());
    }
    /**
     *
     * @returns Date | null
     */
    getCreatedDate() {
        //return(super._getEntityState());
        return (super.getCreatedDate());
    }
    /**
     * The modified date of the document
     * @returns Date | null
     */
    getModifiedDate() {
        //return(super._getEntityState());
        return (super.getModifiedDate());
    }
    /**
     *
     * @returns boolean
     */
    _getIsCartIdMutated() {
        return (this._cartIdIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsCustomerAddressMutated() {
        return (this._customerAddressIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsCustomerFirstNameMutated() {
        return (this._customerFirstNameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsCustomerLastNameMutated() {
        return (this._customerLastNameIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsDataJSONStrMutated() {
        return (this._dataJSONStrIsMutated);
    }
    /**
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
     * @returns boolean
     */
    _getIsIdSetBySystem() {
        return (this._idSetBySystem);
    }
    /**
     * This is a key that is used to initialize data one time. Example: setting the USState information.
     * @returns string | null
     */
    _getInitializedDataKey() {
        return (this._initializedDataKey);
    }
    /**
     *
     * @returns boolean
     */
    _getIsInitializedDataKeyMutated() {
        return (this._initializedDataKeyIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationship() {
        return (this._isAddToRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsAddToRelationshipMutated() {
        return (this._isAddToRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationship() {
        return (this._isRemoveFromRelationship);
    }
    /**
     *
     * @returns boolean
     */
    _getIsRemoveFromRelationshipMutated() {
        return (this._isRemoveFromRelationshipIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsOrganizationMutated() {
        return (this._organizationIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsStatusMutated() {
        return (this._statusIsMutated);
    }
    /**
     *
     * @returns boolean
     */
    _getIsWidgetCustomerUUIDMutated() {
        return (this._widgetCustomerUUIDIsMutated);
    }
    /**
     * The ID of the cart associated with this post-service view.
     * @returns string | null
     */
    getCartId() {
        return (this.cartId);
    }
    /**
     * The address of the customer.
     * @returns string | null
     */
    getCustomerAddress() {
        return (this.customerAddress);
    }
    /**
     * The first name of the customer.
     * @returns string | null
     */
    getCustomerFirstName() {
        return (this.customerFirstName);
    }
    /**
     * The last name of the customer.
     * @returns string | null
     */
    getCustomerLastName() {
        return (this.customerLastName);
    }
    /**
     * JSON string containing the post-service view data.
     * @returns Object
     */
    getDataJSONStr() {
        return EntityUtils_1.EntityUtils.jsonStringGetter({ value: this.dataJSONStr || '' });
    }
    /**
     *
     * @returns string | null
     */
    getId() {
        return (this.id);
    }
    /**
     *
     * @returns string | null
     */
    getJsonType() {
        return (this.jsonType);
    }
    /**
     * The tenant Organization.
     * @returns Organization | null
     */
    getOrganization() {
        return (this.organization);
    }
    /**
     * The status of the post-service view.
     * @returns string | null
     */
    getStatus() {
        return (this.status);
    }
    /**
     * The UUID of the customer in the widget system.
     * @returns string | null
     */
    getWidgetCustomerUUID() {
        return (this.widgetCustomerUUID);
    }
    /**
     * CREATE, DELETE, UPDATE
     */
    _setEntityState(_entityState) {
        super._setEntityState(_entityState);
        return (this);
    }
    /**
     * Is a JSON string that passes the state of attributes from client to server, example: '{'attributes':[{'name':'userName','isMutated':true},{'name':'roles','isMutated':true}]}'
     */
    _setJsonStateStr(_jsonStateStr) {
        super._setJsonStateStr(_jsonStateStr);
        return (this);
    }
    /**
     * A system attribute to identify the relationship persisable type.
     */
    _setRelationshipPersistableType(_relationshipPersistableType) {
        super._setRelationshipPersistableType(_relationshipPersistableType);
        return (this);
    }
    /**
     *
     */
    setCreatedDate(createdDate) {
        super.setCreatedDate(createdDate);
        return (this);
    }
    /**
     * The modified date of the document
     */
    setModifiedDate(modifiedDate) {
        super.setModifiedDate(modifiedDate);
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsCartIdMutated(_cartIdIsMutated) {
        this._cartIdIsMutated = _cartIdIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsCustomerAddressMutated(_customerAddressIsMutated) {
        this._customerAddressIsMutated = _customerAddressIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsCustomerFirstNameMutated(_customerFirstNameIsMutated) {
        this._customerFirstNameIsMutated = _customerFirstNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsCustomerLastNameMutated(_customerLastNameIsMutated) {
        this._customerLastNameIsMutated = _customerLastNameIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsDataJSONStrMutated(_dataJSONStrIsMutated) {
        this._dataJSONStrIsMutated = _dataJSONStrIsMutated;
        return (this);
    }
    /**
* ```
     * Indicates if the ID was set by the system and that the ID is used to create the documet.
* ```
     */
    _setIsIdSetBySystem(_idSetBySystem) {
        this._idSetBySystem = _idSetBySystem;
        return (this);
    }
    /**
* ```
     * This is a key that is used to initialize data one time. Example: setting the USState information.
* ```
     */
    _setInitializedDataKey(_initializedDataKey) {
        if (!this._getIsMutateSuppressed() && this._initializedDataKey !== _initializedDataKey) {
            this._setIsInitializedDataKeyMutated(true);
        }
        this._initializedDataKey = _initializedDataKey;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsInitializedDataKeyMutated(_initializedDataKeyIsMutated) {
        this._initializedDataKeyIsMutated = _initializedDataKeyIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationship(_isAddToRelationship) {
        if (this._isAddToRelationship !== _isAddToRelationship) {
            this._setIsAddToRelationshipMutated(true);
        }
        this._isAddToRelationship = _isAddToRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsAddToRelationshipMutated(_isAddToRelationshipIsMutated) {
        this._isAddToRelationshipIsMutated = _isAddToRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationship(_isRemoveFromRelationship) {
        if (this._isRemoveFromRelationship !== _isRemoveFromRelationship) {
            this._setIsRemoveFromRelationshipMutated(true);
        }
        this._isRemoveFromRelationship = _isRemoveFromRelationship;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsRemoveFromRelationshipMutated(_isRemoveFromRelationshipIsMutated) {
        this._isRemoveFromRelationshipIsMutated = _isRemoveFromRelationshipIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsOrganizationMutated(_organizationIsMutated) {
        this._organizationIsMutated = _organizationIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsStatusMutated(_statusIsMutated) {
        this._statusIsMutated = _statusIsMutated;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    _setIsWidgetCustomerUUIDMutated(_widgetCustomerUUIDIsMutated) {
        this._widgetCustomerUUIDIsMutated = _widgetCustomerUUIDIsMutated;
        return (this);
    }
    /**
* ```
     * The ID of the cart associated with this post-service view.
* ```
     */
    setCartId(cartId) {
        if (!this._getIsMutateSuppressed() && this.cartId !== cartId) {
            this._setIsCartIdMutated(true);
        }
        this.cartId = cartId;
        return (this);
    }
    /**
* ```
     * The address of the customer.
* ```
     */
    setCustomerAddress(customerAddress) {
        if (!this._getIsMutateSuppressed() && this.customerAddress !== customerAddress) {
            this._setIsCustomerAddressMutated(true);
        }
        this.customerAddress = customerAddress;
        return (this);
    }
    /**
* ```
     * The first name of the customer.
* ```
     */
    setCustomerFirstName(customerFirstName) {
        if (!this._getIsMutateSuppressed() && this.customerFirstName !== customerFirstName) {
            this._setIsCustomerFirstNameMutated(true);
        }
        this.customerFirstName = customerFirstName;
        return (this);
    }
    /**
* ```
     * The last name of the customer.
* ```
     */
    setCustomerLastName(customerLastName) {
        if (!this._getIsMutateSuppressed() && this.customerLastName !== customerLastName) {
            this._setIsCustomerLastNameMutated(true);
        }
        this.customerLastName = customerLastName;
        return (this);
    }
    /**
* ```
     * JSON string containing the post-service view data.
* ```
     */
    setDataJSONStr(dataJSONStr) {
        if (!this._getIsMutateSuppressed() && this.dataJSONStr !== EntityUtils_1.EntityUtils.jsonStringSetter({ value: dataJSONStr })) {
            this._setIsDataJSONStrMutated(true);
        }
        this.dataJSONStr = EntityUtils_1.EntityUtils.jsonStringSetter({ value: dataJSONStr });
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setId(id) {
        this.id = id;
        return (this);
    }
    /**
* ```
     *
* ```
     */
    setJsonType(jsonType) {
        this.jsonType = jsonType;
        return (this);
    }
    /**
* ```
     * The tenant Organization.
     * persistanceType?: PersistenceType   If the persistanceType is not set and the Entity.id is null or undefined, will be set to PersistenceType.CREATE.
* ```
     */
    setOrganization(organization, persistanceType) {
        if (!this._getIsMutateSuppressed() && this.organization !== organization) {
            PersistableUtils_1.PersistableUtils.mongoRefSetter(organization, persistanceType);
            this._setIsOrganizationMutated(true);
        }
        this.organization = organization;
        return (this);
    }
    /**
* ```
     * The status of the post-service view.
* ```
     */
    setStatus(status) {
        if (!this._getIsMutateSuppressed() && this.status !== status) {
            this._setIsStatusMutated(true);
        }
        this.status = status;
        return (this);
    }
    /**
* ```
     * The UUID of the customer in the widget system.
* ```
     */
    setWidgetCustomerUUID(widgetCustomerUUID) {
        if (!this._getIsMutateSuppressed() && this.widgetCustomerUUID !== widgetCustomerUUID) {
            this._setIsWidgetCustomerUUIDMutated(true);
        }
        this.widgetCustomerUUID = widgetCustomerUUID;
        return (this);
    }
    _getIsMutated() {
        let isMutated = false;
        this._setCurrentState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setCurrentState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setCurrentState2({
            attributeName: 'cartId',
            value: this.cartId
        });
        this._setCurrentState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setCurrentState2({
            attributeName: 'customerAddress',
            value: this.customerAddress
        });
        this._setCurrentState2({
            attributeName: 'customerFirstName',
            value: this.customerFirstName
        });
        this._setCurrentState2({
            attributeName: 'customerLastName',
            value: this.customerLastName
        });
        this._setCurrentState2({
            attributeName: 'dataJSONStr',
            value: this.dataJSONStr
        });
        this._setCurrentState2({
            attributeName: 'id',
            value: this.id
        });
        this._setCurrentState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setCurrentState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setCurrentState2({
            attributeName: 'status',
            value: this.status
        });
        this._setCurrentState2({
            attributeName: 'widgetCustomerUUID',
            value: this.widgetCustomerUUID
        });
        this._currentHashcode2 = this.getHashCode();
        isMutated = super._getIsMutated();
        return (isMutated);
    }
    _trackMutations() {
        if (this._isTrackingingMutations) {
            return (this);
        }
        this._setInitializedState2({
            attributeName: '_isRemoveFromRelationship',
            value: this._isRemoveFromRelationship
        });
        this._setInitializedState2({
            attributeName: '_relationshipPersistableType',
            value: this._relationshipPersistableType
        });
        this._setInitializedState2({
            attributeName: 'cartId',
            value: this.cartId
        });
        this._setInitializedState2({
            attributeName: 'createdDate',
            value: this.createdDate
        });
        this._setInitializedState2({
            attributeName: 'customerAddress',
            value: this.customerAddress
        });
        this._setInitializedState2({
            attributeName: 'customerFirstName',
            value: this.customerFirstName
        });
        this._setInitializedState2({
            attributeName: 'customerLastName',
            value: this.customerLastName
        });
        this._setInitializedState2({
            attributeName: 'dataJSONStr',
            value: this.dataJSONStr
        });
        this._setInitializedState2({
            attributeName: 'id',
            value: this.id
        });
        this._setInitializedState2({
            attributeName: 'modifiedDate',
            value: this.modifiedDate
        });
        this._setInitializedState2({
            attributeName: 'organization',
            value: this.organization
        });
        this._setInitializedState2({
            attributeName: 'status',
            value: this.status
        });
        this._setInitializedState2({
            attributeName: 'widgetCustomerUUID',
            value: this.widgetCustomerUUID
        });
        super._trackMutations();
        if (!this._hasInitializedHashCode2) {
            this._initializedHashcode2 = this.getHashCode();
        }
        this._hasInitializedHashCode2 = true;
        return (this);
    }
    getHashCode() {
        let hashCode_n = -1;
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this._isRemoveFromRelationship);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.cartId);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.createdDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.customerAddress);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.customerFirstName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.customerLastName);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.dataJSONStr);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.id);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.modifiedDate);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.organization);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.status);
        hashCode_n += HashCodeUtil_1.HashCodeUtil.getHashCodeFromValue(this.widgetCustomerUUID);
        return (hashCode_n);
    }
}
exports.ProductServiceViewStatusAudit = ProductServiceViewStatusAudit;
ProductServiceViewStatusAudit.metaDataForProductServiceViewStatusAudit = new MetaData();
ClassFor_1.ClassFor.getInstance().addClass("com.salesstryke.entity.classes.persistable.ProductServiceViewStatusAudit", ProductServiceViewStatusAudit);
//# sourceMappingURL=ProductServiceViewStatusAudit.js.map