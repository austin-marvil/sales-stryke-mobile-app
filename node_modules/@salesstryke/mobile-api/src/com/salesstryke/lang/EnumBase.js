"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumBase = exports.EnumContainer = void 0;
class EnumContainer extends Object {
    constructor() {
        super();
        this.id_n = 0;
        this.enum_ary = new Array();
        this.enumById_map = new Map();
        this.enumByName_map = new Map();
    }
    add(p) {
        if (p.enumBase instanceof EnumBase) {
            let enumItem = p.enumBase;
            let id_i = enumItem.getId();
            let name_s = enumItem.getName();
            if (this.enumById_map.get(id_i)) {
                let error = new Error(`Duplicate id: ${id_i}, name: ${enumItem.getName()}`);
                throw error;
            }
            if (this.enumByName_map.get(name_s)) {
                let error = new Error(`Duplicate name: ${id_i}, name: ${enumItem.getName()}`);
                throw error;
            }
            this.enum_ary.push(p.enumBase);
            this.enumById_map.set(id_i, p.enumBase);
            this.enumByName_map.set(name_s, p.enumBase);
        }
    }
    getAll() {
        return (this.enum_ary);
    }
    getById(p) {
        let enumItem = undefined;
        enumItem = this.enumById_map.get(p.id);
        return (enumItem);
    }
    getByName(p) {
        let enumItem = undefined;
        enumItem = this.enumByName_map.get(p.name);
        return (enumItem);
    }
    getNextId() {
        return (this.id_n++);
    }
}
exports.EnumContainer = EnumContainer;
class EnumBase extends Object {
    /**
     * ```
     * idOverride: This is meant to FORCE the id.
     * ```
     */
    constructor(p) {
        super();
        let enumContainer = EnumBase.enumContainer_map.get(p.namespace);
        if (!enumContainer) {
            enumContainer = new EnumContainer();
            EnumBase.enumContainer_map.set(p.namespace, enumContainer);
        }
        this.name_s = p.name;
        this.id_i = enumContainer.getNextId();
        this.enumContainer = enumContainer;
        this.namespace_s = p.namespace;
        if (p.idOverride) {
            this.id_i = p.idOverride;
        }
        enumContainer.add({ enumBase: this });
    }
    getAll() {
        return (this.enumContainer.getAll());
    }
    getById(p) {
        return (this.enumContainer.getById({ id: p.id }));
    }
    getByName(p) {
        return (this.enumContainer.getByName({ name: p.name }));
    }
    getId() {
        return (this.id_i);
    }
    getName() {
        return (this.name_s);
    }
    getNamespace() {
        return (this.namespace_s);
    }
}
exports.EnumBase = EnumBase;
EnumBase.enumContainer_map = new Map();
//# sourceMappingURL=EnumBase.js.map