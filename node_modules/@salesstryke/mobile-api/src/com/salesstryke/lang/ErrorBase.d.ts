/**
        try {

        }
        catch(error_any: any) {
            let error: Error = (error_any as Error);
            let errorBase: ErrorBase = new ErrorBase(error.message, "", error);
            if(LOGGER.isErrorEnabled()) { LOGGER.logError(`. ${EntityComponentRenderer.#renderMethodName_s} ${errorBase.getMessage()}`); }
        }
        finally {

        }
 */
export declare class ErrorBase extends Error {
    private message_s;
    protected methodName_s: string | null;
    protected namespace_s: string | null;
    protected parentError: ErrorBase | null;
    private uuid_s;
    /**
     * ```
     * p : {
     * message         : string,
     * namespace?      : string,
     * methodName?     : string,
     * errorUUID?      : string,
     * parentError_any?  : any
     * }
     *
     * ```
     * @param p
     */
    constructor(p: TErrorBaseConstructor);
    /**
     * ```
     * message_s         : string,
     * namespace_s?      : string,
     * methodName_s?     : string,
     * errorUUID_s?      : string,
     * parentError_any?  : any
     * ```
     * @param message_s
     * @param namespace_s
     * @param methodName_s
     * @param errorUUID_s
     * @param parentError_any
     */
    constructor(message_s: string, namespace_s?: string, methodName_s?: string, errorUUID_s?: string, parentError_any?: any);
    static getAsErrorBase(error_any: any): ErrorBase;
    /**
     * Returns the errorMessage, namespace, methodname, and error uuid.
     * @returns
     */
    getFullMessage(): string;
    getMethodName(): string | null;
    /**
     * Returns the error message and the error uuid.
     * @returns
     */
    getMessage(): string;
    getNamespace(): string | null;
    getParentError(): ErrorBase | null;
    getUUID(): string | null;
    setParentError(parentError: ErrorBase): void;
    toString(): string;
}
/**
 * ```
 * type TErrorBaseConstructor =
 * {
 *     message           : string,
 * }
 * ```
 */
export type TErrorBaseConstructor = {
    errorUUID?: string;
    message: string;
    methodName?: string;
    namespace?: string;
    parentError_any?: any;
};
