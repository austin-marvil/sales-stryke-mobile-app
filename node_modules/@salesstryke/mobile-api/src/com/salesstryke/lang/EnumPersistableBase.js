"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumPersistableBase = exports.EnumPersistableContainer = void 0;
const EnumBase_1 = require("./EnumBase");
class EnumPersistableContainer extends Object {
    constructor() {
        super();
        this.enumByOID_map = new Map();
    }
    add(p) {
        if (p.enumPersistableBase instanceof EnumPersistableBase) {
            let enumItem = p.enumPersistableBase;
            if (this.enumByOID_map.get(p.databaseOID)) {
                let error = new Error(`Duplicate oid: ${p.databaseOID}, name: ${enumItem.getName()}`);
                throw error;
            }
            this.enumByOID_map.set(enumItem.getDatabaseOID(), enumItem);
        }
    }
    getByOID(p) {
        return (this.enumByOID_map.get(p.oid));
    }
}
exports.EnumPersistableContainer = EnumPersistableContainer;
class EnumPersistableBase extends EnumBase_1.EnumBase {
    constructor(p) {
        super({ name: p.name, namespace: p.namespace });
        let persistableContainer = EnumPersistableBase.persistableContainer_map.get(p.namespace);
        if (!persistableContainer) {
            persistableContainer = new EnumPersistableContainer();
            EnumPersistableBase.persistableContainer_map.set(p.namespace, persistableContainer);
        }
        this.databaseOID = p.databaseOID;
        this.persistableContainer = persistableContainer;
        persistableContainer.add({ databaseOID: p.databaseOID, enumPersistableBase: this });
    }
    getByOID(p) {
        return (this.persistableContainer.getByOID({ oid: p.oid }));
    }
    getDatabaseOID() {
        return (this.databaseOID);
    }
}
exports.EnumPersistableBase = EnumPersistableBase;
EnumPersistableBase.persistableContainer_map = new Map();
//# sourceMappingURL=EnumPersistableBase.js.map